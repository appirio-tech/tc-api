/*
 * Copyright (C) 2013 TopCoder Inc., All Rights Reserved.
 *
 * @version 1.1
 * @author Sky_
 * changes in 1.1:
 * - remove studio tests
 */
"use strict";
/*global describe, it, before, beforeEach, after, afterEach, __dirname */
/*jslint node: true, stupid: true, unparam: true */

/**
 * Module dependencies.
 */
var request = require('supertest');
var assert = require('chai').assert;
var async = require('async');
var testHelper = require('./helpers/testHelper');

var API_ENDPOINT = process.env.API_ENDPOINT || 'http://localhost:8080';
var DATABASE_NAME = "tcs_catalog";

describe('Test Contests API', function () {
    this.timeout(60000); // The api with testing remote db could be quit slow


    /**
     * Add leading zero to number if less than 10
     * @param {Number} nr the number to format
     * @return {String} number with padding
     */
    function padNumber(nr) {
        if (nr < 10) {
            return "0" + nr;
        }
        return String(nr);
    }

    /**
     * Assert contest properties.
     * Contests are generated by pattern that depends on nr, isStudio, type and details parameters.
     * @param {Object} contest - the contest to check
     * @param {Number} nr - the contest generation number
     * @param {String} type - the contest type: "ACTIVE", "OPEN", "PAST" or "UPCOMING"
     * @param {Boolean} details - true if contests has details
     */
    function assertContest(contest, nr, type, details) {
        var expectedContestName, expectedCatalog, expectedType, expectedCmc, cmcMod, errMsg;
        //include contest details to error message
        errMsg = "(nr: " + nr + ", type: " + type + ", details: " + details + ")";
        expectedContestName = "this is ";
        if (details) {
            expectedContestName = "this is DETAIL ";
        }
        expectedContestName = expectedContestName + "software ";
        expectedType = nr % 2 ? "Design" : "Development";
        expectedCatalog = nr % 2 ? "Type16" : "Type22";

        if (type === "ACTIVE" || type === "OPEN") {
            expectedContestName = expectedContestName + "ACTIVE/OPEN ";
        }
        if (type === "PAST") {
            expectedContestName = expectedContestName + "PAST ";
        }
        if (type === "UPCOMING") {
            expectedContestName = expectedContestName + "UPCOMING ";
        }
        expectedContestName = expectedContestName + "contest " + padNumber(nr);
        if (type === "UPCOMING") {
            expectedContestName = expectedContestName + " 1.0";
        }
        cmcMod = (nr - 1) % 4;
        if (cmcMod === 0) {
            expectedCmc = "ab";
        } else if (cmcMod === 1) {
            expectedCmc = "bc";
        } else if (cmcMod === 2) {
            expectedCmc = "cd";
        } else {
            expectedCmc = "de";
        }

        assert.equal(expectedContestName, contest.contestName, "Invalid contestName" + errMsg);
        assert.equal(expectedCatalog, contest.catalog, "Invalid catalog" + errMsg);
        assert.equal(expectedType, contest.type, "Invalid type" + errMsg);
        assert.equal(expectedCmc, contest.cmc, "Invalid cmc" + errMsg);
        if (type === "UPCOMING") {
            assert.equal(0, contest.numberOfSubmissions, "Invalid numberOfSubmissions" + errMsg);
            assert.equal(0, contest.numberOfRatedRegistrants, "Invalid numberOfRatedRegistrants" + errMsg);
            assert.equal(0, contest.numberOfUnratedRegistrants, "Invalid numberOfUnratedRegistrants" + errMsg);
        } else {
            assert.equal(1, contest.numberOfSubmissions, "Invalid numberOfSubmissions" + errMsg);
            assert.equal(1, contest.numberOfRatedRegistrants, "Invalid numberOfRatedRegistrants" + errMsg);
            assert.equal(1, contest.numberOfUnratedRegistrants, "Invalid numberOfUnratedRegistrants" + errMsg);
        }
        assert.equal(510, contest.digitalRunPoints, "Invalid digitalRunPoints" + errMsg);
        assert.equal(200 + (nr - 1) * 2, contest.reliabilityBonus, "Invalid reliabilityBonus" + errMsg);
        assert.ok(contest.contestId, "Invalid contestId" + errMsg);
        assert.ok(contest.projectId, "Invalid projectId" + errMsg);
        assert.ok(new Date(contest.registrationEndDate).toString() !== "InvalidDate",
            "Invalid registrationEndDate" + errMsg);
        assert.ok(new Date(contest.submissionEndDate).toString() !== "InvalidDate",
            "Invalid submissionEndDate" + errMsg);
        assert.ok(contest.prize, "Invalid prize" + errMsg);
        assert.ok(contest.prize.length, "Invalid prize.length" + errMsg);
        assert.equal(2, contest.prize.length, "Invalid prize.length" + errMsg);
        assert.ok(!contest.description, "Invalid description" + errMsg);
    }

    /**
     * Assert response from given url.
     * It always expect 50 records
     * @param {String} type - the contest type: "ACTIVE", "OPEN", "PAST", "UPCOMING"
     * @param {Function<err>} done the callback
     */
    function assertCollection(type, done) {
        request(API_ENDPOINT)
            .get('/v2/' +  'develop' + '/challenges?listType=' + type)
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .expect(200)
            .end(function (err, res) {
                assert.ifError(err);
                var body = res.body, i, hasDatails = type === "OPEN" || type === "ACTIVE";
                assert.equal(body.total, 50);
                assert.equal(body.pageIndex, 1);
                assert.equal(body.pageSize, 50);
                assert.ok(body.data);
                assert.equal(body.data.length, 50);
                if (hasDatails) {
                    assertContest(body.data[0], 1, type, true);
                    for (i = 1; i < 50; i = i + 1) {
                        assertContest(body.data[i], i, type, false);
                    }
                } else {
                    for (i = 0; i < 50; i = i + 1) {
                        assertContest(body.data[i], i + 1, type, false);
                    }
                }
                done();
            });
    }

    /**
     * Assert cmc value in response from given url.
     * @param {String} type - the contest type: "ACTIVE", "OPEN", "PAST", "UPCOMING"
     * @param {Number} size - the count of expected elements
     * @param {String} cmc - the cmc to assert
     * @param {Function<err>} done the callback
     */
    function assertCMC(type, size, cmc, done) {
        request(API_ENDPOINT)
            .get('/v2/' + 'develop' + '/challenges?listType=' + type + "&cmc=" + cmc)
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .expect(200)
            .end(function (err, res) {
                assert.ifError(err);
                var body = res.body, i;
                assert.equal(body.total, size);
                assert.ok(body.data);
                assert.equal(body.data.length, size);

                for (i = 0; i < size; i = i + 1) {
                    assert.equal(body.data[i].cmc, cmc);
                }
                done();
            });
    }

    /**
     * Assert contests details are not found
     * @param {Number} contestId - the contest id
     * @param {Function<err>} done the callback
     */
    function assertContestDetailsNotFound(contestId, done) {
        request(API_ENDPOINT)
            .get('/v2/develop/challenges/' + contestId)
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .expect(404)
            .end(done);
    }

    /**
     * Tests for Software contest detail
     */
    describe('-- Software Contest Detail API --', function () {
        var SQL_DIR = __dirname + '/sqls/softwareContestDetail/';

        function clearDb(done) {
            testHelper.runSqlFile(SQL_DIR + "tcs_catalog__delete.sql", DATABASE_NAME, done);
        }

        before(function (done) {
            async.waterfall([
                clearDb,
                function (cb) {
                    testHelper.runSqlFile(SQL_DIR + "tcs_catalog__insert.sql", DATABASE_NAME, cb);
                }
            ], done);
        });

        after(function (done) {
            clearDb(done);
        });

        /**
         * develop/challenges/30400000
         */
        it('should return PAST software details', function (done) {
            request(API_ENDPOINT)
                .get('/v2/develop/challenges/' + '30400000')
                .set('Accept', 'application/json')
                .expect('Content-Type', /json/)
                .expect(200)
                .end(function (err, res) {
                    if (err) {
                        done(err);
                    }
                    var expected = require('./test_files/expected_software_contest_detail.json');
                    delete res.body.serverInformation;
                    delete res.body.requestorInformation;
                    // The time in test data is not constant.
                    delete res.body.postingDate;
                    delete res.body.registrationEndDate;
                    delete res.body.checkpointSubmissionEndDate;
                    delete res.body.appealsEndDate;
                    delete res.body.finalFixEndDate;
                    delete res.body.submissionEndDate;
                    delete res.body.currentPhaseEndDate;
                    delete res.body.currentPhaseRemainingTime;
                    delete res.body.registrants[0].registrationDate;
                    delete res.body.submissions[0].submissionDate;
                    assert.deepEqual(res.body, expected, 'Invalid response');
                    done();
                });
        });


        /**
         * develop/challenges/31210000
         * develop/challenges/31200000
         * develop/challenges/31220000
         * develop/challenges/31300000
         * develop/challenges/31310000
         * develop/challenges/31320002
         */

        it('should return 404 while access PRIVATE contest 31200000', function (done) {
            assertContestDetailsNotFound(31200000, done);
        });

        it('should return 404 while access PRIVATE contest 31220000', function (done) {
            assertContestDetailsNotFound(31220000, done);
        });

        it('should return 404 while access PRIVATE contest 31300000', function (done) {
            assertContestDetailsNotFound(31300000, done);
        });

        it('should return 404 while access PRIVATE contest 31310000', function (done) {
            assertContestDetailsNotFound(31310000, done);
        });

        it('should return 404 while access PRIVATE contest 31320002', function (done) {
            assertContestDetailsNotFound(31320002, done);
        });
    });

    /**
     * Tests for software contests
     */
    describe('-- Software Contests API --', function () {

        /**
         * Clear database
         * @param {Function<err>} done the callback
         */
//        function clearDb(done) {
//            testHelper.runSqlFile(__dirname + "/sqls/contests/clean.sql", DATABASE_NAME, done);
//        }
//
//        /**
//         * This function is run before all tests.
//         * Generate tests data.
//         * @param {Function<err>} done the callback
//         */
//        before(function (done) {
//            async.waterfall([
//                clearDb,
//                function (cb) {
//                    testHelper.runSqlFile(__dirname + "/sqls/contests/init_data.sql", DATABASE_NAME, cb);
//                },
//                function (cb) {
//                    var files = [], prefix = __dirname + "/sqls/contests/data", generatePath;
////                shortcut for testHelper.generatePartPaths
//                    generatePath = function (name, count) {
//                        return testHelper.generatePartPaths(prefix + "/" + name, "sql", count);
//                    };
//                    files = files
//                        .concat(generatePath("software-active-contests", 4))
//                        .concat(generatePath("software-past-contests", 4))
//                        .concat(generatePath("software-upcoming-contests", 4))
//                        .concat(generatePath("software-active-private", 1))
//                        .concat(generatePath("software-past-private", 1))
//                        .concat(generatePath("software-upcoming-private", 1))
//                    testHelper.runSqlFiles(files, DATABASE_NAME, cb);
//                }
//            ], done);
//
//        });
//
//        /**
//         * This function is run after all tests.
//         * Clean up all data.
//         * @param {Function<err>} done the callback
//         */
//        after(function (done) {
//            clearDb(done);
//        });
//
//        /**
//         * Test develop/challenges?listType=active
//         */
//        it('should return 50 ACTIVE contests', function (done) {
//            assertCollection("ACTIVE", done);
//        });
//
//        /**
//         * Test develop/challenges?listType=open
//         */
//        it('should return 50 OPEN contests', function (done) {
//            assertCollection("OPEN",  done);
//        });
//
//        /**
//         * Test develop/challenges?listType=past
//         */
//        it('should return 50 PAST contests', function (done) {
//            assertCollection("PAST", done);
//        });
//
//        /**
//         * Test develop/challenges?listType=upcoming
//         */
//        it('should return 50 UPCOMING contests', function (done) {
//            assertCollection("UPCOMING", done);
//        });
//
//
//        /**
//         * Test develop/challenges?listType=active&cmc=ab
//         */
//        it('should return 14 ACTIVE contests with cmc=ab', function (done) {
//            assertCMC("ACTIVE", 14, "ab", done);
//        });
//
//        /**
//         * Test develop/challenges?listType=open&cmc=ab
//         */
//        it('should return 14 OPEN contests with cmc=ab', function (done) {
//            assertCMC("OPEN", 14, "ab", done);
//        });
//
//        /**
//         * Test develop/challenges?listType=past&cmc=ab
//         */
//        it('should return 13 PAST contests with cmc=ab', function (done) {
//            assertCMC("PAST", 13, "ab", done);
//        });
//
//        /**
//         * Test develop/challenges?listType=upcoming&cmc=ab
//         */
//        it('should return 13 UPCOMING contests with cmc=ab', function (done) {
//            assertCMC("UPCOMING", 13, "ab", done);
//        });
    });

    describe("-- Studio Contests Detail API --", function () {

        var SQL_DIR = __dirname + "/sqls/contestsStudio/";

        /**
         * Clear database
         * @param {Function<err>} done the callback
         */
        function clearDb(done) {
            async.waterfall([
                function (cb) {
                    testHelper.runSqlFile(SQL_DIR + "tcs_catalog__clean", "tcs_catalog", cb);
                },
                function (cb) {
                    testHelper.runSqlFile(SQL_DIR + "tcs_dw__clean", "tcs_dw", cb);
                }
            ], done);
        }

        before(function (done) {
            async.waterfall([
                clearDb,
                function (cb) {
                    testHelper.runSqlFile(SQL_DIR + "tcs_catalog__insert_test_data", "tcs_catalog", cb);
                },
                function (cb) {
                    testHelper.runSqlFile(SQL_DIR + "tcs_dw__insert_test_data", "tcs_dw", cb);
                }
            ], done);
        });

        after(function (done) {
            clearDb(done);
        });

        /**
         * Create request to search contests API and assert 400 http code
         * @param {String} contestId - the contest id
         * @param {Function} done - the callback function
         */
        function assert400(contestId, done) {
            request(API_ENDPOINT)
                .get('/v2/design/challenges/' + contestId)
                .set('Accept', 'application/json')
                .expect('Content-Type', /json/)
                .expect(400)
                .end(done);
        }

        /**
         * /v2/design/challenges/10041
         */
        it("should return contest details", function (done) {
            request(API_ENDPOINT)
                .get('/v2/design/challenges/10041')
                .set('Accept', 'application/json')
                .expect('Content-Type', /json/)
                .expect(200)
                .end(function (err, res) {
                    var body = res.body;
                    assert.lengthOf(body.submissions, 1, "invalid submissions count");
                    assert.lengthOf(body.checkpoints, 1, "invalid checkpoints count");
                    assert.lengthOf(body.winners, 1, "invalid winners count");
                    //submissionTime is not constant value
                    assert.ok(body.submissions[0].submissionTime);
                    assert.ok(body.checkpoints[0].submissionTime);
                    assert.ok(body.winners[0].submissionTime);
                    delete body.submissions[0].submissionTime;
                    delete body.checkpoints[0].submissionTime;
                    delete body.winners[0].submissionTime;
                    delete body.currentPhaseEndDate;
                    testHelper.assertResponse(err,
                        res,
                        "test_files/exptected_studio_contest_details.json",
                        done);
                });
        });


        /**
         * /v2/design/challenges/xyz
         */
        it("should return 400 error if contestId is not number", function (done) {
            assert400("xyz", done);
        });

        /**
         * /v2/design/challenges/0
         */
        it("should return 400 error if contestId is 0", function (done) {
            assert400("0", done);
        });

        /**
         * /v2/design/challenges/-1
         */
        it("should return 400 error if contestId is -1", function (done) {
            assert400("-1", done);
        });

        /**
         * /v2/design/challenges/1.23
         */
        it("should return 400 error if contestId is 1.23", function (done) {
            assert400("1.23", done);
        });

        /**
         * /v2/design/challenges/10000000000000000
         */
        it("should return 400 error if contestId is too big number", function (done) {
            assert400("10000000000000000", done);
        });
    });

});
