{
  "name": "slick",
  "homepage": "https://github.com/kamicane/slick",
  "version": "1.10.4",
  "main": "./index.js",
  "description": "Standalone CSS Selector Finder and Parser.",
  "keywords": [
    "dom",
    "css",
    "selector",
    "finder",
    "parser"
  ],
  "author": {
    "name": "Valerio Proietti",
    "email": "@kamicane",
    "url": "http://mad4milk.net"
  },
  "contributors": [
    {
      "name": "Fabio Miranda Costa",
      "email": "@fabiomcosta"
    },
    {
      "name": "Thomas Aylott",
      "email": "@SubtleGradient"
    }
  ],
  "bugs": {
    "url": "https://github.com/kamicane/slick/issues"
  },
  "license": "MIT (http://mootools.net/license.txt)",
  "repository": {
    "type": "git",
    "url": "git://github.com/kamicane/slick.git"
  },
  "dependencies": {},
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "# Slick\n\nSlick is a standalone selector engine that is totally slick.\nSlick is split in 2 components: the Finder and the Parser. The Finder's job is to find nodes on a webpage, the Parser's job is to create a javascript object representation of any css selector.\n\nSlick allows you to:\n\n * Create your own custom pseudo-classes\n * Use the Parser by itself.\n * Find nodes in XML documents.\n\n ---\n\n## The Finder\n\nFind nodes in the DOM\n\n### `search` context for selector\n\nSearch this context for any nodes that match this selector.\n\nExpects:\n* selector: String or SelectorObject\n* (**optional**) context: document or node or array of documents or nodes\n* (**optional**) append: Array or Object with a push method\n\nReturns: append argument or Array of 0 or more nodes\n\n\tslick.search(\"#foo > bar.baz\") → [<bar>, <bar>, <bar>]\n\tslick.search(\"li > a\", [<ol>, <ul>]) → [<a>, <a>, <a>]\n\tslick.search(\"#foo > bar.baz\", document, []) → [<bar>, <bar>, <bar>]\n\n### `find` first in context with selector or null\n\nFind the first node in document that matches selector or null if none are found.\n\nExpects:\n* selector: String or SelectorObject\n* (**optional**) context: document or node or array of documents or nodes\n\nReturns: Element or null\n\n\tslick.find(\"#foo > bar.baz\") → <bar>\n\tslick.find(\"#does-not-exist\", node) → null\n\n### node `matches` selector?\n\nDoes this node match this selector?\n\nExpects:\n* node\n* node, String or SelectorObject\n\nReturns: true or false\n\n\tslick.matches(<div class=rocks>, \"div.rocks\") → true\n\tslick.matches(<div class=lame>, \"div.rocks\") → false\n\tslick.matches(<div class=lame>, <div class=rocks>) → false\n\n### context `contains` node?\n\nDoes this context contain this node? Is the context a parent of this node?\n\nExpects:\n* context: document or node\n* node: node\n\nReturns: true or false\n\n\tslick.contains(<ul>, <li>) → true\n\tslick.contains(<body>, <html>) → false\n\n---\n\n## The Parser\n\nParse a CSS selector string into a JavaScript object\n\n### `parse` selector into object\n\nParse a CSS Selector String into a Selector Object.\n\nExpects: String\n\nReturns: SelectorObject\n\n\tslick.parse(\"#foo > bar.baz\") → SelectorObject\n\n\n### format\n\n### `#foo > bar.baz`\n\n\t[[\n\t\t{ \"combinator\":\" \", \"tag\":\"*\", \"id\":\"foo\" },\n\t\t{ \"combinator\":\">\", \"tag\":\"bar\", \"classList\": [\"baz\"], \"classes\": [{\"value\":\"baz\", \"match\": RegExp }]}\n\t]]\n\n### `h1, h2, ul > li, .things`\n\n\t[\n\t\t[{ \"combinator\":\" \", \"tag\": \"h1\" }],\n\t\t[{ \"combinator\":\" \", \"tag\": \"h2\" }],\n\t\t[{ \"combinator\":\" \", \"tag\": \"ul\" }, { \"combinator\": \">\", \"tag\": \"li\" }],\n\t\t[{ \"combinator\":\" \", \"tag\": \"*\", \"classList\": [\"things\"], \"classes\": [{\"value\": \"things\", \"match\": RegExp }] }]\n\t]\n",
  "readmeFilename": "README.md",
  "_id": "slick@1.10.4",
  "dist": {
    "shasum": "a2ed7002632a1d11618f429a3abab6caeb3afa8c"
  },
  "_from": "slick@~1.10.0",
  "_resolved": "https://registry.npmjs.org/slick/-/slick-1.10.4.tgz"
}
