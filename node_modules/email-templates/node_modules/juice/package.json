{
  "name": "juice",
  "version": "0.3.3",
  "description": "Inlines css into html source",
  "bin": {
    "juice": "./bin/juice"
  },
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "contributors": [
    {
      "name": "Guillermo Rauch",
      "email": "guillermo@learnboost.com"
    },
    {
      "name": "Arian Stolwijk",
      "email": "arian@aryweb.nl"
    },
    {
      "name": "PaweÅ‚ Marzec",
      "email": "rork@cojestgrane.pl"
    },
    {
      "name": "Andrew Kelley",
      "email": "superjoe30@gmail.com"
    }
  ],
  "engines": {
    "node": ">=0.8.0"
  },
  "dependencies": {
    "cssom": "~0.2.5",
    "jsdom": "~0.5.4",
    "batch": "~0.3.2",
    "superagent": "~0.14.0",
    "commander": "~1.1.1",
    "slick": "~1.10.0"
  },
  "devDependencies": {
    "should": "~1.2.2",
    "expresso": "~0.9.2",
    "mocha": "~1.8.2"
  },
  "readme": "[![Build Status](https://travis-ci.org/LearnBoost/juice.png?branch=master)](https://travis-ci.org/LearnBoost/juice)\n[![Dependency Status](https://david-dm.org/LearnBoost/juice.png)](https://david-dm.org/LearnBoost/juice)\n# Juice ![](http://i.imgur.com/jN8Ht.gif)\n\nGiven HTML, juice will inline your CSS properties into the `style`\nattribute.\n\n## How to use\n\n```js\nvar juice = require('juice');\njuice(\"/path/to/file.html\", function(err, html) {\n  console.log(html);\n});\n```\n\n`/path/to/file.html`:\n```html\n<html>\n<head>\n  <style>\n    p { color: red; }\n  </style>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p>Test</p>\n</body>\n</html>\n```\n\n`style.css`\n```css\np {\n  text-decoration: underline;\n}\n```\n\nOutput:\n```html\n<html>\n<head>\n</head>\n<body>\n  <p style=\"color: red; text-decoration: underline;\">Test</p>\n</body>\n</html>\n```\n\n## What is this useful for ?\n\n- HTML emails. For a comprehensive list of supported selectors see\n[here](http://www.campaignmonitor.com/css/)\n- Embedding HTML in 3rd-party websites.\n\n## Projects using juice\n\n* [node-email-templates][1] - Node.js module for rendering beautiful emails with [ejs][2] templates and email-friendly inline CSS using [juice][3].\n* [swig-email-templates][4] - Uses [swig][5], which gives you [template inheritance][6], and\n  can generate a [dummy context][7] from a template.\n\n[1]: https://github.com/niftylettuce/node-email-templates\n[2]: https://github.com/visionmedia/ejs\n[3]: https://github.com/LearnBoost/juice\n[4]: https://github.com/superjoe30/swig-email-templates\n[5]: https://github.com/paularmstrong/swig\n[6]: https://docs.djangoproject.com/en/dev/topics/templates/#template-inheritance\n[7]: https://github.com/superjoe30/swig-dummy-context\n\n## Documentation\n\n### juice(filePath, [options], callback)\n\n * `filePath` - html file\n * `options` - (optional) object containing these properties:\n   - `extraCss` - extra css to apply to the file. Defaults to `\"\"`.\n   - `applyStyleTags` - whether to inline styles in `<style></style>`\n     Defaults to `true`.\n   - `applyLinkTags` - whether to resolve `<link rel=\"stylesheet\">` tags\n     and inline the resulting styles. Defaults to `true`.\n   - `removeStyleTags` - whether to remove the original `<style></style>`\n     tags after (possibly) inlining the css from them. Defaults to `true`.\n   - `removeLinkTags` - whether to remove the original `<link rel=\"stylesheet\">`\n     tags after (possibly) inlining the css from them. Defaults to `true`.\n   - `url` - how to resolve hrefs. Defaults to using `filePath`. If you want\n     to override, be sure your `url` has the protocol at the beginning, e.g.\n     `http://` or `file://`.\n * `callback(err, html)`\n   - `err` - `Error` object or `null`.\n   - `html` - contains the html from `filePath`, with potentially `<style>` and\n     `<link rel=\"stylesheet\">` tags removed, and css inlined.\n\n### juice.juiceContent(html, options, callback)\n\n * `html` - raw html content\n * `options` - same options as calling `juice`, except now `url` is required.\n * `callback(err, html)` - same as calling `juice`\n\n### juice.juiceDocument(document, options, callback)\n\nOperates on a jsdom instance. Be sure to use the same jsdom version that juice\nuses. Also be sure to clean up after you are done. You may have to\ncall `document.parentWindow.close()` to free up memory.\n\n * `document` - a jsdom instance\n * `options` - see `juice.juiceContent`\n * `callback(err)`\n\n### juice.inlineContent(html, css)\n\nThis takes html and css and returns new html with the provided css inlined.\nIt does not look at `<style>` or `<link rel=\"stylesheet\">` elements at all.\n\n### juice.inlineDocument(document, css)\n\nGiven a jsdom instance and css, this modifies the jsdom instance so that the\nprovided css is inlined. It does not look at `<style>` or\n`<link rel=\"stylesheet\">` elements at all.\n\n### juice.ignoredPseudos\n\nArray of ignored pseudo-selectors such as 'hover' and 'active'.\n\n## Credits\n\n(The MIT License)\n\nCopyright (c) 2011 Guillermo Rauch &lt;guillermo@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n### 3rd-party\n\n- Uses the excellent [JSDom](http://github.com/tmpvar/jsdom) for the underlying DOM\nrepresentation.\n- Uses [cssom](https://github.com/NV/CSSOM) to parse out CSS selectors and\n[Slick](http://github.com/subtleGradient/slick) to tokenize them.\n- Icon by [UnheardSounds](http://unheardsounds.deviantart.com/gallery/26536908#/d2ngozi)\n",
  "readmeFilename": "README.md",
  "_id": "juice@0.3.3",
  "_from": "juice@~0.3.2"
}
