# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := nodejavabridge_bindings
### Rules for action "verifyDeps":
quiet_cmd_binding_gyp_nodejavabridge_bindings_target_verifyDeps = ACTION Verify Deps $@
cmd_binding_gyp_nodejavabridge_bindings_target_verifyDeps = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; mkdir -p ./build; 

build/depsVerified: obj := $(abs_obj)
build/depsVerified: builddir := $(abs_builddir)
build/depsVerified: TOOLSET := $(TOOLSET)
build/depsVerified: /usr/lib/jvm/java-6-openjdk-amd64/jre/lib/amd64/server/libjvm.so /usr/lib/jvm/java-6-openjdk-amd64/include/jni.h /usr/lib/jvm/java-6-openjdk-amd64/include/linux/jni_md.h FORCE_DO_CMD
	$(call do_cmd,binding_gyp_nodejavabridge_bindings_target_verifyDeps)

all_deps += build/depsVerified
action_binding_gyp_nodejavabridge_bindings_target_verifyDeps_outputs := build/depsVerified


DEFS_Debug := \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION' \
	'-DDEBUG' \
	'-D_DEBUG'

# Flags passed to all source files.
CFLAGS_Debug := \
	-fPIC \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-pthread \
	-m64 \
	-O3 \
	-g \
	-O0

# Flags passed to only C files.
CFLAGS_C_Debug :=

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-fno-rtti \
	-fno-exceptions

INCS_Debug := \
	-I/home/ben/.node-gyp/0.10.21/src \
	-I/home/ben/.node-gyp/0.10.21/deps/uv/include \
	-I/home/ben/.node-gyp/0.10.21/deps/v8/include \
	-I/usr/lib/jvm/java-6-openjdk-amd64/include \
	-I/usr/lib/jvm/java-6-openjdk-amd64/include/linux

DEFS_Release := \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION'

# Flags passed to all source files.
CFLAGS_Release := \
	-fPIC \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-pthread \
	-m64 \
	-O2 \
	-fno-strict-aliasing \
	-fno-tree-vrp

# Flags passed to only C files.
CFLAGS_C_Release :=

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-fno-rtti \
	-fno-exceptions

INCS_Release := \
	-I/home/ben/.node-gyp/0.10.21/src \
	-I/home/ben/.node-gyp/0.10.21/deps/uv/include \
	-I/home/ben/.node-gyp/0.10.21/deps/v8/include \
	-I/usr/lib/jvm/java-6-openjdk-amd64/include \
	-I/usr/lib/jvm/java-6-openjdk-amd64/include/linux

OBJS := \
	$(obj).target/$(TARGET)/src/java.o \
	$(obj).target/$(TARGET)/src/javaObject.o \
	$(obj).target/$(TARGET)/src/javaScope.o \
	$(obj).target/$(TARGET)/src/methodCallBaton.o \
	$(obj).target/$(TARGET)/src/nodeJavaBridge.o \
	$(obj).target/$(TARGET)/src/utils.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# Make sure our actions/rules run before any of us.
$(OBJS): | $(action_binding_gyp_nodejavabridge_bindings_target_verifyDeps_outputs)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
# Build our special outputs first.
$(obj).target/nodejavabridge_bindings.node: | $(action_binding_gyp_nodejavabridge_bindings_target_verifyDeps_outputs)

# Preserve order dependency of special output on deps.
$(action_binding_gyp_nodejavabridge_bindings_target_verifyDeps_outputs): | 

LDFLAGS_Debug := \
	-pthread \
	-rdynamic \
	-m64

LDFLAGS_Release := \
	-pthread \
	-rdynamic \
	-m64

LIBS := \
	-L/usr/lib/jvm/java-6-openjdk-amd64/jre/lib/amd64/server/ \
	-Wl,-rpath,/usr/lib/jvm/java-6-openjdk-amd64/jre/lib/amd64/server/ \
	-ljvm

$(obj).target/nodejavabridge_bindings.node: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(obj).target/nodejavabridge_bindings.node: LIBS := $(LIBS)
$(obj).target/nodejavabridge_bindings.node: TOOLSET := $(TOOLSET)
$(obj).target/nodejavabridge_bindings.node: $(OBJS) FORCE_DO_CMD
	$(call do_cmd,solink_module)

all_deps += $(obj).target/nodejavabridge_bindings.node
# Add target alias
.PHONY: nodejavabridge_bindings
nodejavabridge_bindings: $(builddir)/nodejavabridge_bindings.node

# Copy this to the executable output path.
$(builddir)/nodejavabridge_bindings.node: TOOLSET := $(TOOLSET)
$(builddir)/nodejavabridge_bindings.node: $(obj).target/nodejavabridge_bindings.node FORCE_DO_CMD
	$(call do_cmd,copy)

all_deps += $(builddir)/nodejavabridge_bindings.node
# Short alias for building this executable.
.PHONY: nodejavabridge_bindings.node
nodejavabridge_bindings.node: $(obj).target/nodejavabridge_bindings.node $(builddir)/nodejavabridge_bindings.node

# Add executable to "all" target.
.PHONY: all
all: $(builddir)/nodejavabridge_bindings.node

