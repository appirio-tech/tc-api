{
  "name": "java",
  "description": "Bridge API to connect with existing Java APIs.",
  "author": {
    "name": "Joe Ferner",
    "email": "joe.ferner@nearinfinity.com"
  },
  "keywords": [
    "java",
    "jvm",
    "bridge"
  ],
  "version": "0.2.9",
  "engines": {
    "node": ">=0.6.0"
  },
  "maintainers": [
    {
      "name": "Jeff Kunkle",
      "email": "jeff.kunkle@nearinfinity.com"
    },
    {
      "name": "Joe Ferner",
      "email": "joe.ferner@nearinfinity.com"
    }
  ],
  "bugs": {
    "url": "https://github.com/nearinfinity/node-java/issues"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/nearinfinity/node-java.git"
  },
  "dependencies": {},
  "devDependencies": {
    "nodeunit": "~0.6.4",
    "memwatch": "~0.2.0",
    "async": "~0.1.22"
  },
  "scripts": {
    "test": "nodeunit test",
    "install": "node-gyp rebuild"
  },
  "main": "./index.js",
  "gypfile": true,
  "readme": "# java\n\nBridge API to connect with existing Java APIs.\n\n[Google Groups Discussion Forum](https://groups.google.com/forum/#!forum/node-java)\n\n## Installation Linux/Windows\n\n```bash\n$ export JAVA_HOME=/usr/local/share/jdk1.6.0_30\n$ npm install java\n```\n\nNotes:\n* node-gyp requires python 2.x not python 3.x. See https://github.com/TooTallNate/node-gyp/issues/155 for more details.\n* If you see an error such as \"No rule to make target '/opt/jdk1.7.0_09/jre/lib/amd64/server/libjvm.so', needed by 'build/depsVerified'.  Stop.\"\n      this means that your JAVA_HOME is not set correctly and you need to verify the location of libjvm.so or jvm.lib.\n* If you see an error such as \"Error: The specified module could not be found. \n      xxxxxx\\node_modules\\java\\build\\Release\\nodejavabridge_bindings.node\".\n      Ensure the directory where jvm.dll exists is in your PATH. (e.g. C:\\Program Files (x86)\\Java\\jdk1.6.0_18\\jre\\bin\\client).\n      This path cannot have quotes.\n\n\n## Installation Mac\n\n```bash\n$ npm install java\n```\n\n_Mavericks Users: If you are having problems finding 'jni.h' please see [Issue #86](https://github.com/nearinfinity/node-java/issues/86)_\n\n## Installation ARM (Raspberry Pi)\n\n```bash\nGYP_DEFINES=\"armv7=0\" CCFLAGS='-march=armv6' CXXFLAGS='-march=armv6' npm install java\n```\n\n## Manual compile (Using node-gyp)\n\n```bash\n./compile-java-code.sh\nnode-gyp configure build\nnpm test\n```\n\n_NOTE: You will need node-gyp installed using \"npm install -g node-gyp\"_\n\n## Quick Examples\n\n```javascript\nvar java = require(\"java\");\njava.classpath.push(\"commons-lang3-3.1.jar\");\njava.classpath.push(\"commons-io.jar\");\n\nvar list = java.newInstanceSync(\"java.util.ArrayList\");\n\njava.newInstance(\"java.util.ArrayList\", function(err, list) {\n  list.addSync(\"item1\");\n  list.addSync(\"item2\");\n});\n\nvar ArrayList = java.import('java.util.ArrayList');\nvar list = new ArrayList();\nlist.addSync('item1');\n```\n\n### Create a char array\n\n```javascript\nvar charArray = java.newArray(\"char\", \"hello world\\n\".split(''));\n```\n\n### Create a byte array\n\n```javascript\nvar byteArray = java.newArray(\n  \"byte\",\n  \"hello world\\n\"\n    .split('')\n    .map(function(c) { return java.newByte(str.charCodeAt(c)); });\n```\n\n### Using java.lang.Long and long\n\nJavaScript only supports 32-bit integers. Because of this java longs must be treated specially.\nWhen getting a long result the value may be truncated. If you need the original value there is\na property off of the result called \"longValue\" which contains the un-truncated value as a string.\nIf you are calling a method that takes a long you must create it using [java.newInstance](#javaNewInstance).\n\n```javascript\nvar javaLong = java.newInstanceSync(\"java.lang.Long\", 5);\nconsole.log('Possibly truncated long value: ' + javaLong);\nconsole.log('Original long value (as a string): ' + javaLong.longValue);\njava.callStaticMethodSync(\"Test\", \"staticMethodThatTakesALong\", javaLong);\n```\n\n### Exceptions\n\nExceptions from calling methods either caught using JavaScript try/catch block or passed\nto a callback as the first parameter may have a property named \"cause\" which has a reference\nto the Java Exception object which caused the error.\n\n```javascript\ntry {\n  java.methodThatThrowsExceptionSync();\n} catch(ex) {\n  console.log(ex.cause.getMessageSync());\n}\n```\n\n# Release Notes\n\n### v0.2.0\n\n* java.lang.Long and long primitives are handled better. See\n  \\([Issue #37](https://github.com/nearinfinity/node-java/issues/37)\\) and\n  \\([Issue #40](https://github.com/nearinfinity/node-java/issues/40)\\).\n\n# Index\n\n## java\n * [classpath](#javaClasspath)\n * [options](#javaOptions)\n * [import](#javaImport)\n * [newInstance](#javaNewInstance)\n * [instanceOf](#javaInstanceOf)\n * [callStaticMethod](#javaCallStaticMethod)\n * [getStaticFieldValue](#javaGetStaticFieldValue)\n * [setStaticFieldValue](#javaSetStaticFieldValue)\n * [newArray](#javaNewArray)\n * [newByte](#javaNewByte)\n * [newShort](#javaNewShort)\n * [newLong](#javaNewLong)\n * [newChar](#javaNewChar)\n * [newDouble](#javaNewDouble)\n * [newFloat](#javaNewFloat)\n * [newProxy](#javaNewProxy)\n\n## java objects\n * [Call Method](#javaObjectCallMethod)\n * [Get/Set Field](#javaObjectGetSetField)\n\n# API Documentation\n\n<a name=\"java\"/>\n## java\n\n<a name=\"javaClasspath\" />\n**java.classpath**\n\nArray of paths or jars to pass to the creation of the JVM.\n\nAll items must be added to the classpath before calling any other node-java methods.\n\n__Example__\n\n    java.classpath.push('commons.io.jar');\n\n<a name=\"javaOptions\" />\n**java.options**\n\nArray of options to pass to the creation of the JVM.\n\nAll items must be added to the options before calling any other node-java methods.\n\n__Example__\n\n    java.options.push('-Djava.awt.headless=true');\n    java.options.push('-Xmx1024m');\n\n<a name=\"javaImport\" />\n**java.import(className)**\n\nLoads the class given by className such that it acts and feels like a javascript object.\n\n__Arguments__\n\n * className - The name of the class to create. For subclasses seperate using a '$' (eg. com.nearinfinty.MyClass$SubClass)\n\n__Example__\n\n    var Test = java.import('Test');\n    Test.someStaticMethodSync(5);\n    console.log(Test.someStaticField);\n\n    var test = new Test();\n    list.instanceMethodSync('item1');\n\n<a name=\"javaNewInstance\" />\n**java.newInstance(className, [args...], callback)**\n\n**java.newInstanceSync(className, [args...]) : result**\n\nCreates an instance of the specified class. If you are using the sync method an exception will be throw if an error occures,\notherwise it will be the first argument in the callback.\n\n__Arguments__\n\n * className - The name of the class to create. For subclasses seperate using a '$' (eg. com.nearinfinty.MyClass$SubClass)\n * callback(err, item) - Callback to be called when the class is created.\n\n__Example__\n\n    var list = java.newInstanceSync(\"java.util.ArrayList\");\n\n    java.newInstance(\"java.util.ArrayList\", function(err, list) {\n      if(err) { console.error(err); return; }\n      // new list\n    });\n\n<a name=\"javaInstanceOf\" />\n**java.instanceOf(javaObject, className)**\n\nDetermines of a javaObject is an instance of a class.\n\n__Arguments__\n\n * javaObject - Instance of a java object returned from a method or from newInstance.\n * className - A string class name.\n\n__Example__\n\n    var obj = java.newInstanceSync(\"my.package.SubClass\");\n\n    if(java.instanceOf(obj, \"my.package.SuperClass\")) {\n      console.log(\"obj is an instance of SuperClass\");\n    }\n\n<a name=\"javaCallStaticMethod\" />\n**java.callStaticMethod(className, methodName, [args...], callback)**\n\n**java.callStaticMethodSync(className, methodName, [args...]) : result**\n\nCalls a static method on the specified class. If you are using the sync method an exception will be throw if an error occures,\notherwise it will be the first argument in the callback.\n\n__Arguments__\n\n * className - The name of the class to call the method on. For subclasses seperate using a '$' (eg. com.nearinfinty.MyClass$SubClass)\n * methodName - The name of the method to call.\n * callback(err, item) - Callback to be called when the class is created.\n\n__Example__\n\n    var result = java.callStaticMethodSync(\"com.nearinfinty.MyClass\", \"doSomething\", 42, \"test\");\n\n    java.callStaticMethod(\"com.nearinfinty.MyClass\", \"doSomething\", 42, \"test\", function(err, results) {\n      if(err) { console.error(err); return; }\n      // results from doSomething\n    });\n\n<a name=\"javaGetStaticFieldValue\" />\n**java.getStaticFieldValue(className, fieldName)**\n\nGets a static field value from the specified class.\n\n__Arguments__\n\n * className - The name of the class to get the value from. For subclasses seperate using a '$' (eg. com.nearinfinty.MyClass$SubClass)\n * fieldName - The name of the field to get the value from.\n\n__Example__\n\n    var data = java.getStaticFieldValue(\"com.nearinfinty.MyClass\", \"data\");\n\n<a name=\"javaSetStaticFieldValue\" />\n**java.setStaticFieldValue(className, fieldName, newValue)**\n\nSets a static field value on the specified class.\n\n__Arguments__\n\n * className - The name of the class to set the value on. For subclasses seperate using a '$' (eg. com.nearinfinty.MyClass$SubClass)\n * fieldName - The name of the field to set the value on.\n * newValue - The new value to assign to the field.\n\n__Example__\n\n    java.getStaticFieldValue(\"com.nearinfinty.MyClass\", \"data\", \"Hello World\");\n\n<a name=\"javaNewArray\" />\n**java.newArray(className, values[])**\n\nCreates a new java array of type class.\n\n__Arguments__\n\n * className - The name of the type of array elements. For subclasses seperate using a '$' (eg. com.nearinfinty.MyClass$SubClass)\n * values - A javascript array of values to assign to the java array.\n\n__Example__\n\n    var newArray = java.newArray(\"java.lang.String\", [\"item1\", \"item2\", \"item3\"]);\n\n<a name=\"javaNewByte\" />\n**java.newByte(val)**\n\nCreates a new java byte. This is needed because javascript does not have the concept of a byte.\n\n__Arguments__\n\n * val - The value of the java byte.\n\n__Example__\n\n    var b = java.newByte(12);\n\n<a name=\"javaNewShort\" />\n**java.newShort(val)**\n\nCreates a new java short. This is needed because javascript does not have the concept of a short.\n\n__Arguments__\n\n * val - The value of the java short.\n\n__Example__\n\n    var s = java.newShort(12);\n\n<a name=\"javaNewLong\" />\n**java.newLong(val)**\n\nCreates a new java long. This is needed because javascript does not have the concept of a long.\n\n__Arguments__\n\n * val - The value of the java long.\n\n__Example__\n\n    var s = java.newLong(12);\n\n<a name=\"javaNewChar\" />\n**java.newChar(val)**\n\nCreates a new java char. This is needed because javascript does not have the concept of a char.\n\n__Arguments__\n\n * val - The value of the java char.\n\n__Example__\n\n    var ch = java.newChar('a');\n\n<a name=\"javaNewDouble\" />\n**java.newDouble(val)**\n\nCreates a new java double. This is needed to force javascript's number to a double to call some methods.\n\n__Arguments__\n\n * val - The value of the java double.\n\n__Example__\n\n    var d = java.newDouble(3.14);\n\n<a name=\"javaNewFloat\" />\n**java.newFloat(val)**\n\nCreates a new java float. This is needed to force javascript's number to a float to call some methods.\n\n__Arguments__\n\n * val - The value of the java float.\n\n__Example__\n\n    var f = java.newFloat(3.14);\n\n<a name=\"javaNewProxy\" />\n**java.newProxy(interfaceName, functions)**\n\nCreates a new java Proxy for the given interface. Functions passed in will run on the v8 main thread and not a new thread.\n\nThe returned object has two methods ref() and unref() which you can use to maintain references to prevent premature\ngarbage collection. You must call these methods to ensure the proxy stays around.\n\n__Arguments__\n\n * interfaceName - The name of the interface to proxy. For subclasses seperate using a '$' (eg. com.nearinfinty.MyClass$SubClass)\n * functions - A hash of functions matching the function in the interface.\n\n__Example__\n\n    var myProxy = java.newProxy('java.lang.Runnable', {\n      run: function () {\n        // This is actually run on the v8 thread and not the new java thread\n        console.log(\"hello from thread\");\n      }\n    });\n\n    var thread = java.newInstanceSync(\"java.lang.Thread\", myProxy);\n    thread.start();\n\n<a name=\"javaObject\"/>\n## java object\n\n<a name=\"javaObjectCallMethod\" />\n**obj._methodName_([args...], callback)**\n\n**obj._methodNameSync_([args...]) : result**\n\nOnce you have a java object either by creating a new instance or as a result of a method call you can then call methods on that object.\nAll public, non-static methods are exposed in synchronous and asynchronous flavors.\n\n__Arguments__\n\n * args - The arguments to pass to the method.\n * callback(err, item) - Callback to be called when the method has completed.\n\n__Example__\n\n    var list = java.newInstanceSync(\"java.util.ArrayList\");\n    list.addSync(\"item1\");\n    list.add(\"item2\", function(err, result) {\n      if(err) { console.error(err); return; }\n    });\n\n<a name=\"javaObjectGetSetField\" />\n**obj._fieldName_ = val**\n\n**val = obj._fieldName_**\n\nOnce you have a java object either by creating a new instance or as a result of a method call you can get instance\nfield values.\n\n__Example__\n\n    var list = java.newInstanceSync(\"com.nearinfinty.MyClass\");\n    list.data = \"test\";\n    var data = list.data;\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "java@0.2.9",
  "_from": "java@~0.2.9"
}
