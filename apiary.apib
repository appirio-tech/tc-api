FORMAT: 1A
HOST: http://api.topcoder.com/v2

# TopCoder API
Programmatically access TopCoder challenges and members.

# Group Authorization
Authorization APIs

## Create JWT Token [/auth]
### Create JWT Token [POST]
+ Parameters
    + username (required, string, `heffan`) ... The username
    + password (required, string, `password`) ... The password

+ Response 200 (application/json)

        {
             "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3NtYS5hdXRoMC5jb20vIiwic3ViIjoiYWR8"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Refresh JWT Token [/reauth]
### Refresh JWT Token [POST]
+ Parameters
    + token (required, string, `eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3NtYS5hdXRoMC5jb20vIiwic3ViIjoiYWR8`) ... The old JWT token

+ Response 200 (application/json)

        {
             "token": "DyJCdeAiOiH7V1QiLCJhbGciOiJI5zI1NiJ9.eyJpc3MiOiJodHRrezovL3NtYS5uyXRoMC5jb20vIiwic3ViIoo4XSO2"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Validate SSO Cookie [/validation/sso]
### Validate SSO Cookie [GET]
+ Parameters
    + Cookie (required, string, `tcsso=132456|4a6acc4d5327773989a7e8c23b04e8cd1c3da79a1256590973ed731ffa0f24a2`) ... The sso cookie

+ Response 200 (application/json)

        {
             "userId": 132456
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

# Group Reports
Report APIs

## Challenge Costs [/reports/costs/{startDate}/{endDate}?clientid={clientId}&billingId={billingId}&projectId={projectId}&challengeId={challengeId}]
### Challenge Costs [GET]

+ Parameters
    + startDate (required, string, `2013-07-01`) ... Start Date
    + endDate (required, string, `2013-12-01`) ... End Date
    + clientId (optional, number, `4310`) ... Client Id
    + billingId (optional, number, `2310`) ... Billing Id
    + projectId (optional, number, `6707`) ... Project Id
    + challengeId (optional, number, `30000001`) ... Challenge Id

+ Response 200 (application/json)

        {
             "history":
             [
                {
                    "paymentDate": "2013-09-12",
                    "clientName": "Topcoder",
                    "clientId": 1,
                    "billingName": "Topcoder2013",
                    "projectName": "CS-TC API",
                    "challengeName": "challenge 1",
                    "challengeId": 30030010,
                    "challengeType": "development",
                    "challengeStatus": "completed",
                    "launchDate": "2013-08-10",
                    "completionDate": "2013-08-25",
                    "paymentType": "contest fee",
                    "amount": 5000.0
                },
                {
                    "paymentDate": "2013-09-15",
                    "clientName": "Topcoder",
                    "clientId": 1,
                    "billingName": "Topcoder2013",
                    "projectName": "CS-TC API",
                    "challengeName": "challenge 2",
                    "challengeId": 30030012,
                    "challengeType": "development",
                    "challengeStatus": "completed",
                    "launchDate": "2013-08-12",
                    "completionDate": "2013-08-27",
                    "paymentType": "contest fee",
                    "amount": 5000.0
                }
             ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Client Challenge Costs [/reports/client/costs/?startDate={startDate}&endDate={endDate}&clientid={clientId}&sfdcAccountId={sfdcAccountId}&customerNumber={customerNumer}]
### Client Challenge Costs [GET]

+ Parameters
    + startDate (required, string, `2013-07-01`) ... Start Date
    + endDate (required, string, `2013-12-01`) ... End Date
    + clientId (optional, number, `4310`) ... Client Id
    + sfdcAccountId (optional, string, `4310`) ... SFDC Account Id
    + customerNumber (optional, string, `4310`) ... Customer Number

+ Response 200 (application/json)

        {
             "history":
             [
                {
                    "customerName": "Topcoder",
                    "customerId": 1,
                    "projectName": "CS-TC API",
                    "projectId": 1234,
                    "challengeName": "challenge 1",
                    "challengeId": 30030010,
                    "challengeType": "development",
                    "challengeStatus": "completed",
                    "postingDate": "2013-08-10",
                    "completionDate": "2013-08-25",
                    "challengeFulfillment": 75,
                    "challengeMemberCost": 5000.0,
                    "challengeFee": 2500.0,
                    "challengeTotalCost": 7500.0,
                    "challengeDuration": 13.47
                },
                {
                    "customerName": "Topcoder2",
                    "customerId": 2,
                    "projectName": "NodeJS API",
                    "projectId": 1235,
                    "challengeName": "challenge 2",
                    "challengeId": 30030011,
                    "challengeType": "development",
                    "challengeStatus": "completed",
                    "postingDate": "2013-08-11",
                    "completionDate": "2013-08-26",
                    "challengeFulfillment": 80,
                    "challengeMemberCost": 5000.0,
                    "challengeFee": 2500.0,
                    "challengeTotalCost": 7500.0,
                    "challengeDuration": 13.78
                }
             ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Client Active Challenge Costs [/reports/client/activeCosts/?clientid={clientId}&sfdcAccountId={cmc}&customerNumber={customerNumber}]
### Client Active Challenge Costs [GET]

+ Parameters
    + clientId (optional, number, `4310`) ... Client Id
    + sfdcAccountId (optional, string, `4310`) ... CMC account ID
    + customerNumber (optional, string, `4310`) ... Customer number

+ Response 200 (application/json)

{
    "active": [
        {
            "customerName": "Client 9000001",
            "customerNumber": "900000100",
            "customerId": 9000001,
            "billingAccountId": 9000001,
            "billingAccountName": "Client 9000001 Billing Account 1",
            "projectName": "Client 9000001 Billing Account 1 Project 2",
            "challengeName": "Logo Design Contest 2",
            "challengeId": 9000002,
            "challengeType": "Logo Design",
            "challengeStatus": "Active",
            "postingDate": "2014-03-27",
            "completionDate": "2014-03-29",
            "challengeMemberCost": 0,
            "challengeFee": 375,
            "challengeTotalCost": 375,
            "challengeDuration": 1.8,
            "lastModificationDate": "2014-03-29",
            "registrationEndDate": "2014-03-29",
            "submissionEndDate": "2014-04-03",
            "checkpointEndDate": "2014-03-30",
            "currentPhase": "Checkpoint Screening",
            "firstPrize": 1700,
            "totalPrize": 1870,
            "checkpointPrize": 170,
            "registrantsCount": 2,
            "submissionsCount": 0,
            "checkpointSubmissionsCount": 2,
            "challengeScheduledEndDate": "2014-04-08",
            "reliability": 4
        },
        {
            "customerName": "Client 9000001",
            "customerNumber": "900000100",
            "customerId": 9000001,
            "billingAccountId": 9000002,
            "billingAccountName": "Client 9000001 Billing Account 2",
            "projectName": "Client 9000001 Billing Account 2 Project 1",
            "challengeName": "Conceptualization Contest 3",
            "challengeId": 9000003,
            "challengeType": "Conceptualization",
            "challengeStatus": "Active",
            "postingDate": "2014-03-25",
            "completionDate": "2014-03-29",
            "challengeMemberCost": 0,
            "challengeFee": 6001,
            "challengeTotalCost": 6001,
            "challengeDuration": 4.3,
            "lastModificationDate": "2014-03-29",
            "registrationEndDate": "2014-03-27",
            "submissionEndDate": "2014-03-30",
            "checkpointEndDate": "2014-03-28",
            "currentPhase": "Submission",
            "firstPrize": 1000,
            "totalPrize": 1088,
            "checkpointPrize": 88,
            "registrantsCount": 3,
            "submissionsCount": 0,
            "checkpointSubmissionsCount": 3,
            "challengeScheduledEndDate": "2014-04-10",
            "reliability": 227
        }
    ]
}
+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"The request is understood, but it has been refused or access is not allowed."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"Client not found"
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Challenge Analyze [/reports/analyze?projectId={projectId}&openRegistrationDateFrom={openRegistrationDateFrom}&openRegistrationDateTo={openRegistrationDateTo}&challengeType={challengeType}&challengeName={challengeName}&prizeLower={prizeLower}&prizeUpper={prizeUpper}]
### Challenge Analyze [GET]

+ Parameters
    + projectId (optional, string, `1245`) ... The project id.
    + openRegistrationDateFrom (optional, string, `2014-04-01`) ... The open registration date from.
    + openRegistrationDateTo (optional, string, `2014-04-05`) ... The open registration date to.
    + challengeType (optional, string, `Wireframes`) ... The challenge type.
    + challengeName (optional, string, `TC-API`) ... The challenge name.
    + prizeLower (optional, number, `500`) ... The prize lower bound
    + prizeUpper (optional, number, `1800`) ... The prize upper bound.

+ Response 200 (application/json)

        {
             "results":
             [
                {
                    "challengeName": "TC-API Analzye API",
                    "projectName": "TC-API",
                    "challengeType": "Assembly",
                    "client": "Topcoder",
                    "copilot": "iRabbit",
                    "csm": [
                        "nlouie"
                    ]
                    "architect": "none",
                    "pm": [
                        "nlouie",
                        "Shannon"
                    ]
                    "challengeStatus": "Active",
                    "currentPhase": "Registration",
                    "numberOfRegistrants": 15,
                    "numberOfUnregistered": 5,
                    "estimatedNumberOfSubmissions": 3,
                    "currentNumberOfSubmissions": 1,
                    "openRegistrationDate": "2014-04-01",
                    "forumPosts": "11/25",
                    "numberOfUnansweredThread": 3,
                    "1stPlacePrize": "1600/1400.0",
                    "2ndPlacePrize": "750/800.0",
                    "numberOfDaysLive": "13.5/0.5",
                    "rating": "3/5/10",
                    "numberOfRepost": 0
                }
             ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"openRegistrationDateFrom is not a valid date."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Authorized information needed."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"You don't have access to this api."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Track Statistics [/reports/{track}?startDate={startDate}&endDate={endDate}]
### Track Statistics [GET]

+ Parameters
    + track (required, string, `design`) ... Track Name. Only allow "Design", "Develop" and "Data"
    + startDate (optional, string, `2013-01-01`) ... timespan start date
    + endDate (optional, string, `2014-01-01`) ... timespan end date

+ Response 200 (application/json)

        {
            "numberOfRunningChallenges": 10,
            "totalPrizeOfRunningChallenges": 13500,
            "totalPrizeInGivenTime": 120000,
            "numberOfChallengesInGivenTime": 100,
            "numberOfRegisteredUsers": 90,
            "numberOfActiveUsers": 50
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"startDate is not a valid date."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"endDate is not a valid date."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"startDate should be earlier than endDate or at same date."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"track should be an element of develop,design,data."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

# Group Platform
Platform APIs

## Activity Summary [/platform/activitySummary]
### Get Activity Summary [GET]

+ Response 200 (application/json)

        {
            "activeContestsCount": 50,
            "activeMembersCount": 500000,
            "activeProjectsCount": 30,
            "completedProjectsCount": 500,
            "prizePurse": "$100000"
        }

## Active Billing Accounts [/platform/activeBillingAccounts]
### Active Billing Accounts [GET]

+ Response 200 (application/json)

        {
            "activeBillingAccounts": [
                {
                    "clientName": "client1",
                    "clientCustomerNumber": "customer1",
                    "clientId": 70014096,
                    "billingAccountId": 70016343,
                    "billingAccountName": "Liquid",
                    "subscriptionNumber": "s",
                    "projectStartDate": "2009-01-01T00:00:00.000Z",
                    "projectEndDate": "2099-01-01T00:00:00.000Z",
                    "poNumber": "TC0000377"
                },
                {
                    ""clientName": "client2",
                    "clientCustomerNumber": "customer2",
                    "clientId": 70014096,
                    "billingAccountId": 70016347,
                    "billingAccountName": "CIO projects",
                    "subscriptionNumber": "d",
                    "projectStartDate": "2009-01-01T00:00:00.000Z",
                    "projectEndDate": "2099-01-01T00:00:00.000Z",
                    "poNumber": "TC0000381"
                }
            ]
        }

## Customer [/platform/customer]
### Create Customer [POST]
+ Parameters
    + name (required, string, `custABCD`) ... The customer name
    + customerNumber (required, string, `custABCDNum`) ... The customer number

+ Response 200 (application/json)

        {
             "clientId": "1000021"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Authentication credentials were missing or incorrect."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"The request is understood, but it has been refused or access is not allowed."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }



## Billing [/platform/billing]
### Create Billing [POST]
+ Parameters
    + subscriptionNumber (required, string, `snABCD`) ... The subscription number of the project to create
    + customerNumber (required, string, `cnDEFG`) ... The customer number of the client with which to associate the project
    + startDate (optional, string, `cnDEFG`) ... The billing account start date
    + endDate (optional, string, `cnDEFG`) ... The billing account end date
    + billingAccountId (optional, number, `1234`) ... The billing account id
    + active (optional, number, `1`) ... billing account active status (1 - active, 0 - inactive)

+ Response 200 (application/json)

        {
             "billingAccountId": "1000021"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Authentication credentials were missing or incorrect."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"The request is understood, but it has been refused or access is not allowed."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Billing Account Permission [/platform/billings/{billingAccountId}/users]
### Update Billing Account Permission [POST]
+ Request (application/json)


    + Headers

            Authorization : Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZHwxMzI0NTYiLCJleHAiOjEzOTI4MTc4ODQsImF1ZCI6InRvcGNvZGVyIiwiaWF0IjoxMzkyNzU3ODg0fQ.7X2IKkiyyI1ExSM5GNpdhJ8fGGK5-oAjzccX6YL_BKY

    [users]["users1,users2"]

+ Parameters
    + billingAccountId (required, number, `300001`) ... The billing account id that account to update
    + users (required, string, `heffan,shannon`) ... The users to attach to billing account

+ Response 200 (application/json)

        {
            "success": [
                "twight"
            ],
            "failed": [
                "noOne"
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"billingAccountId should be number."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"billingAccountId should be positive."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"billingAccountId should be Integer."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"billingAccountId should be less or equal to 2147483647."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The billingAccountId is not exist in Topcoder system."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"All these users are not in topcoder system."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"You need to login for this api."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"You don't have enough authority to access this api."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Leaderboard [/platform/leaderboard]
### Get Leaderboard [GET]
+ Parameters
    + type (required, string, `referral`) ... The leaderboard type
    + utmMedium (optional, string, `""`, `Appirio`, `__ALL__`) ... The referral type

+ Response 200 (application/json)

{
    "entries": 9,
    "description": "The leaderbaord returns all  members that have referred at least one new member in the last 6 months.",
    "scoreType": "points",
    "scoreLabel": "referrals",
    "result": [
        {
            "handle": "Referral9",
            "score": 9,
            "photo": "http://community.topcoder.com/i/m/Image9.jpg",
            "memberSince": "2014-07-21T00:57:05.000+0200",
            "country": "United States",
            "ratingType": "Red"
        },
        {
            "handle": "Referral8",
            "score": 8,
            "photo": "http://community.topcoder.com/i/m/Image8.jpg",
            "memberSince": "2014-07-21T00:57:05.000+0200",
            "country": "United Kingdom",
            "ratingType": "Yellow"
        },
        {
            "handle": "Referral6",
            "score": 6,
            "photo": "http://community.topcoder.com/i/m/Image6.jpg",
            "memberSince": "2014-07-21T00:57:05.000+0200",
            "country": "United States Minor Outlying Islands",
            "ratingType": "Yellow"
        },
        {
            "handle": "Referral2",
            "score": 1,
            "memberSince": "2014-07-21T00:57:05.000+0200",
            "country": "United Kingdom",
            "ratingType": "Black"
        },
        {
            "handle": "Referral7",
            "score": 7,
            "photo": "http://community.topcoder.com/i/m/Image7.jpg",
            "memberSince": "2014-07-21T00:57:05.000+0200",
            "country": "United States",
            "ratingType": "Red"
        },
        {
            "handle": "Referral10",
            "score": 10,
            "photo": "http://community.topcoder.com/i/m/Image10.jpg",
            "memberSince": "2014-07-21T00:57:05.000+0200",
            "country": "United Arab Emirates",
            "ratingType": "Red"
        },
        {
            "handle": "Referral5",
            "score": 5,
            "photo": "http://community.topcoder.com/i/m/Image5.jpg",
            "memberSince": "2014-07-21T00:57:05.000+0200",
            "country": "United States",
            "ratingType": "Red"
        },
        {
            "handle": "Referral4",
            "score": 4,
            "photo": "http://community.topcoder.com/i/m/Image4.jpg",
            "memberSince": "2014-07-21T00:57:05.000+0200",
            "country": "United Arab Emirates",
            "ratingType": "Yellow"
        },
        {
            "handle": "Referral3",
            "score": 2,
            "memberSince": "2014-07-21T00:57:05.000+0200",
            "country": "United States",
            "ratingType": "Red"
        }
    ]
}

+ Response 200 (application/json)

        {
            "error": "Error: type is a required parameter for this action"
        }

+ Response 400 (application/json)

        {
            "error": {
                "name": "Bad Request",
                "value": 400,
                "description": "The request was invalid. An accompanying message will explain why.",
                "details": "type should be an element of referral."
            }
        }


+ Response 400 (application/json)

        {
            "error": {
                "name": "Bad Request",
                "value": 400,
                "description": "The request was invalid. An accompanying message will explain why.",
                "details": "utmMedium should be an element of __all__,appirio."
            }
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Get Challenge Detail [/challenges/{challengeId}]
### Get Challenge Detail [GET]

+ Parameters
    + challengeId (required, number, `30000000`) ... The challenge id.

+ Response 200 (application/json)

        {
          "challengeType": "Assembly Competition",
          "type": "develop",
          "challengeName": "Module Assembly - TopCoder NodeJS API Tests Improvement and Normalization",
          "challengeId": 30036437,
          "projectId": 6757,
          "forumId": "19553",
          "detailedRequirements": "<h2 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Project Overview</span></h2>\n\n<p>TopCoder and the TopCoder community have worked hard to get the platform to its currently level of maturity, but we&#39;re far from done. It&#39;s time to take the platform to the next level. TopCoder is going to start taking some steps to open up the platform API to the outside and community developers so they could incorporate it in their websites, applications or build their own applications (web, mobile or desktop).</p>\n\n<p>The ultimate goal is to open up and build an &quot;API&quot; that is targeting all different type of audiences - Software and Studio Competitors, SRM/MM competitors, Copilots, Admins and TopCoder partners - each audience will have different interests and usages of the API, so it will be a huge project and we need to make sure that we are in the right direction from the beginning.</p>\n\n<p>Currently, we have run several contests to build the APIs and write tests for testing the APIs.&nbsp; All the tests can be found at https://github.com/cloudspokes/tc-api/tree/master/test</p>\n\n<p>Through these contests, we have found several problems for the tests part as following</p>\n\n<ol>\n\t<li>The tests are not properly named, we&#39;d like to follow the way like &#39;test.[api name].js&#39;, like <span class=\"css-truncate css-truncate-target\"><a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/blob/master/test/register_member.js\" id=\"72636476fe496c69e8cc1d0569ffd550-ab6d2363c6933e23ee66bb7b92f4d07841ea286b\" title=\"register_member.js\">register_member.js</a> should be renamed to <u>test.register_member.js</u>.</span></li>\n\t<li>Some of the tests have to presetup the database manually, Some of the tests automically setup and clear the related database tables wisely.</li>\n\t<li>The tests can be passed if run separately, but failed when running togather.</li>\n</ol>\n\n<p>For this contest, we&#39;d like to improve and standarize the way to write tests, so it will be good for further addon and CI integration.</p>\n\n<h2 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Competition Task Overview</span></h2>\n\n<p><span style=\"color:#FF0000;\"><span style=\"font-size: 12px;\"><img align=\"absmiddle\" alt=\"\" border=\"0\" height=\"16\" src=\"http://apps.topcoder.com/wiki/images/icons/emoticons/warning.gif\" width=\"16\" /> <strong>Please raise questions as quick as you can, I am familiar with related database and code base, I can provide as much support as I can.</strong></span></span></p>\n\n<p><span style=\"color:#FF0000;\"><span style=\"font-size: 12px;\"><img align=\"absmiddle\" alt=\"\" border=\"0\" height=\"16\" src=\"http://apps.topcoder.com/wiki/images/icons/emoticons/warning.gif\" width=\"16\" /></span><strong>The updated code must still deploy and work on heroku - any submission which can&#39;t be deployed on heroku successfully will be failed in screening phase - primary reviewer must check this.</strong></span></p>\n\n<p>The implementation will base on the node.js version of TC platform API - <span class=\"nobr\"><a href=\"https://github.com/cloudspokes/tc-api\" rel=\"nofollow\">https://github.com/cloudspokes/tc-api</a>.</span> <strong>Please follow the existing actionhero pattern for your development.</strong></p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Clean State for Running Tests</span></h3>\n\n<p>Currently, some tests requires presetup the database, some tests automically setup and clear the related database tables.</p>\n\n<p>We&#39;d like to follow the approach to setup and clear the related database tables before and after running the tests.</p>\n\n<p>Currently, <span class=\"css-truncate css-truncate-target\"><a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/blob/master/test/register_member.js\" id=\"72636476fe496c69e8cc1d0569ffd550-ab6d2363c6933e23ee66bb7b92f4d07841ea286b\" title=\"register_member.js\">register_member.js</a> used similar approach to setup the data before running tests. We&#39;d like to extra similar logic as utility methods, which can be used to execute a batch of sqls (for example, inside one file) or single sql against one database (Currently we can not do with multiple databases, due to the limitation of nodejs informix module).</span></p>\n\n<p>With this utility methods we can easily do setup and teardown databases.</p>\n\n<p><u>before, after, before each, after each hooks</u></p>\n\n<p>Utilize <code>before()</code>, <code>after()</code>, <code>beforeEach()</code>, <code>afterEach()</code>&nbsp; to setup the tests more wise. For detail information, please check http://visionmedia.github.io/mocha/</p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Test Directory Restructure and Normalization</span></h3>\n\n<p>We&#39;d like to normalize the directory structure inside <a href=\"https://github.com/cloudspokes/tc-api/blob/master/test\">test</a> directory. Currently, it already gives good starting point, but we&#39;d like revise it as we are making the above changes. Here is the general rules to following</p>\n\n<ol>\n\t<li>All tests should be named like test.[api name].js, so normally, for each api, there should be separated test js files.</li>\n\t<li>All tests from contest winner, should be put directly under test directory.</li>\n\t<li>All reviewers tests should be put under corresponding directory under test directory, like <span class=\"css-truncate css-truncate-target\"><a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/accuracy\" id=\"5d6db9a1dc722586187fc2db530f8388-a107215d06565a781a851de5573da8b935851c3f\" title=\"accuracy\">accuracy</a>, <a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/failure\" id=\"3ee28fe1a60c95b89d29317f122c7021-420d711966add1044306cfaba7036b73d50f95e2\" title=\"failure\">failure</a>, <a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/security\" id=\"e91e6348157868de9dd8b25c81aebfb9-8d796d458ceb76eb46407f9164ed17343d529bf6\" title=\"security\">security</a></span> directory.</li>\n\t<li>All sql files used for tests presetup and teardown should be put under <u>sqls</u> directory, sqls files for accuray, failture, security tests, will be in different directory, directly under the <span class=\"css-truncate css-truncate-target\"><a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/accuracy\" id=\"5d6db9a1dc722586187fc2db530f8388-a107215d06565a781a851de5573da8b935851c3f\" title=\"accuracy\">accuracy</a>, <a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/failure\" id=\"3ee28fe1a60c95b89d29317f122c7021-420d711966add1044306cfaba7036b73d50f95e2\" title=\"failure\">failure</a>, <a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/security\" id=\"e91e6348157868de9dd8b25c81aebfb9-8d796d458ceb76eb46407f9164ed17343d529bf6\" title=\"security\">security</a></span> directory, like accuracy/sqls, failure/sqls etc.</li>\n\t<li>All other test related files will be still put under <u>test_files</u> directory.</li>\n</ol>\n\n<p><span style=\"color:#FF0000;\">If you have better idea and improvement to make the test directory well orginized, please suggest. This can be considered as improvement, reviewers and PMs will consider that.</span></p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Scope </span></h3>\n\n<p>All tests under test directory are in scope. If it tests didn&#39;t pass orignally, you should be responsible to fix that.</p>\n\n<p>The ultimate goal is we can run all tests or single test successfully. like</p>\n\n<p>Run a single test:&nbsp; <u>./node_modules/.bin/mocha ./test/test.tops.js</u></p>\n\n<p>Run all tests: <u>./node_modules/.bin/mocha ./test</u></p>\n\n<p>Following steps&nbsp; to run the tests.</p>\n\n<ol>\n\t<li>setup environment varibales: . deploy/development.sh</li>\n\t<li>start the local server: npm start</li>\n\t<li>run the tests: as above commands.</li>\n</ol>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Tests Creation Guide</span></h3>\n\n<p>Beside the above requirements for current tests normalization and improvement, we&#39;d like you to write a general guide which can be followed to further test creation. It just need to be easy to follow.</p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Testing</span></h3>\n\n<p><span style=\"font-size:12px;\">The API Framework supports tests. </span>Use <a href=\"https://github.com/visionmedia/supertest\">supertest</a> with <a href=\"http://visionmedia.github.io/mocha/\">mocha</a>. Don&#39;t install mocha globally.</p>\n\n<p><span style=\"color:#FF0000;\">you must use mocha BDD style (which is the default), within that, you can optionally use chai.</span></p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Code Format</span></h3>\n\n<p>All code must pass <a href=\"http://www.jslint.com/\">jslint</a>. You may use &quot;nomen: true&quot;.</p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Winner Only</span></h3>\n\n<p>Winner will create pull request against the main github repo in final fix phase and merge the code.</p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color:#FF0000;\">Virutal Machines (VMs)</span></h3>\n\n<p>VM specific information is found here: <span class=\"nobr\"><a href=\"http://www.topcoder.com/wiki/display/docs/VM+Image+2.5\" rel=\"nofollow\">http://www.topcoder.com/wiki/display/docs/VM+Image+2.5</a></span></p>\n\n<p>Upon registration as a submitter or reviewer you will need to request a VM based on the TopCoder systems image. The VM will be active through aggregation review, after which it will be terminated except for the winner&#39;s and the reviewers&#39;. To request your image, please post in contest forum.</p>\n\n<p>Before requesting your VM, you need to ensure that you have an SSH key created and in your member profile. Instructions to do so are here: <span class=\"nobr\"><a href=\"http://www.topcoder.com/wiki/display/projects/Generate+SSH+Key\" rel=\"nofollow\">http://www.topcoder.com/wiki/display/projects/Generate+SSH+Key</a></span>, and instructions to connect afterwards are here: <span class=\"nobr\"><a href=\"http://www.topcoder.com/wiki/display/projects/Connect+Using+SSH+Key\" rel=\"nofollow\">http://www.topcoder.com/wiki/display/projects/Connect+Using+SSH+Key</a></span>.</p>\n\n<p>Please realize that VMs are currently issued manually. We make every attempt to issue the VM as soon as it is requested, however, there may be delays of up to 12 hours depending on time of day when you request. We encourage everyone to request a VM as soon as possible to minimize any such delays.</p>\n\n<h2 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Technology Overview</span></h2>\n\n<ul style=\"font-family: Arial, Helvetica, Verdana, sans-serif; font-size: 12px; line-height: 16px;\">\n\t<li>JavaScript</li>\n\t<li><span class=\"nobr\"><a href=\"http://nodejs.org/\" rel=\"nofollow\">Node.js 0.10.x</a></span></li>\n\t<li><a href=\"https://github.com/evantahler/actionHero\">actionhero.js framework</a></li>\n\t<li><a href=\"https://github.com/visionmedia/supertest\">supertest</a></li>\n\t<li><a href=\"http://visionmedia.github.io/mocha/\">mocha</a></li>\n</ul>\n\n<h2 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Documentation Provided</span></h2>\n\n<p>Please check the deployment guide in codebase for reference.</p>\n",
          "finalSubmissionGuidelines": "<p><strong><span style=\"color:#FF0000;\"><span style=\"line-height: 1.6em;\">Submission Deliverables</span></span></strong></p>\n\n<p><span style=\"font-size:12px;\">A complete list of deliverables can be viewed in the TopCoder Assembly competition Tutorial at: </span><a href=\"http://apps.topcoder.com/wiki/display/tc/Assembly+Competition+Tutorials\">http://apps.topcoder.com/wiki/display/tc/Assembly+Competition+Tutorials</a></p>\n\n<p><span style=\"font-size:12px;\">Below is an overview of the deliverables:</span></p>\n\n<ul>\n\t<li>Source Code.</li>\n\t<li>Deployment guide to configure and verify the application.</li>\n\t<li>General Test Creation Guide</li>\n</ul>\n\n<p><strong><span style=\"color:#FF0000;\"><span style=\"line-height: 1.6em;\">Final Submission </span></span></strong></p>\n\n<p><span style=\"font-size:12px;\">For each member, the final submission should be uploaded to the Online Review Tool.</span></p>\n",
          "screeningScorecardId": "30000412",
          "reviewScorecardId": "30001470",
          "cmcTaskId": "",
          "numberOfCheckpointsPrizes": 0,
          "topCheckPointPrize": "",
          "postingDate": "2013-12-02T09:00:05.000Z",
          "registrationEndDate": "2013-12-04T09:00:21.000Z",
          "checkpointSubmissionEndDate": "-000001-11-30T00:00:00.000Z",
          "submissionEndDate": "2013-12-06T21:20:56.000Z",
          "appealsEndDate": "2013-12-09T07:05:33.000Z",
          "finalFixEndDate": "2013-12-10T08:33:19.000Z",
          "digitalRunPoints": 360,
          "reliabilityBonus": 160,
          "challengeCommunity": "develop",
          "directUrl": "https://www.topcoder.com/direct/contest/detail.action?projectId=30036437",
          "technology": [
            "Java",
            "MySQL"
          ],
          "prize": [
            800,
            400
          ],
          "generalCheckpointFeedback": "This is general feedback from all competitors.",
          "Documents": [
            {
               "documentName": "document 1",
               "url": "http://community.topcoder.com/tc?module=DownloadDocument&docid=30400000"
            },
            {
                "documentName": "document 2",
                "url": "http://community.topcoder.com/tc?module=DownloadDocument&docid=30400001"
            },
            {
                "documentName": "document 3",
                "url": "http://community.topcoder.com/tc?module=DownloadDocument&docid=30400002"
            }
          ],
          "numberOfRegistrants": 18,
          "numberOfSubmissions": 2,
          "platforms": [
              "AWS",
              "Cloud Foundry"
          ],
         "event": {
             "id": 3437,
             "description": "TCO"
         }
        }

+ Response 200 (application/json)

        {
            "challengeType": "First2Finish",
            "type": "develop",
            "challengeName": "this is a F2F challenge",
            "challengeId": 30500000,
            "projectId": 30400001,
            "screeningScorecardId": "3",
            "reviewScorecardId": "1",
            "cmcTaskId": "ab",
            "numberOfCheckpointsPrizes": 0,
            "topCheckPointPrize": "",
            "currentStatus": "Active",
            "digitalRunPoints": 510,
            "reliabilityBonus": 200,
            "challengeCommunity": "develop",
            "directUrl": "https://www.topcoder.com/direct/contest/detail.action?projectId=30500000",
            "technology": ["Java", "MySQL"],
            "prize": [
            1000
            ],
            "Documents": [
            {
                "documentName": "document 1",
                "url": "http://community.topcoder.com/tc?module=DownloadDocument&docid=30500000"
            },
            {
                "documentName": "document 2",
                "url": "http://community.topcoder.com/tc?module=DownloadDocument&docid=30500001"
            }
            ],
            "numberOfSubmissions": 1,
            "numberOfRegistrants": 1,
            "platforms": [
                "AWS",
                "Cloud Foundry"
            ],
            "event": {
                "id": 3437,
                "description": "TCO"
            }
        }
+ Response 200 (application/json)

        {
            "challengeType": "Copilot Posting",
            "type": "develop",
            "challengeName": "this is a Copilot post challenge",
            "challengeId": 32500000,
            "projectId": 30400001,
            "detailedRequirements": "detailed requirement content",
            "finalSubmissionGuidelines": "final submission guideline content",
            "cmcTaskId": "ab",
            "numberOfCheckpointsPrizes": 0,
            "topCheckPointPrize": "",
            "copilotDetailedRequirements": "copilot private_description_text",
            "currentStatus": "Active",
            "digitalRunPoints": 510,
            "reliabilityBonus": 200,
            "challengeCommunity": "develop",
            "directUrl": "https://www.topcoder.com/direct/contest/detail.action?projectId=32500000",
            "technology": ["Java", "MySQL"],
            "prize": [
                1000
            ],
            "numberOfRegistrants": 1,
            "Documents": [
                {
                    "documentName": "document 1",
                    "url": "http://community.topcoder.com/tc?module=DownloadDocument&docid=30500000"
                },
                {
                    "documentName": "document 3",
                    "url": "http://community.topcoder.com/tc?module=DownloadDocument&docid=32500000"
                },
                {
                    "documentName": "document 4",
                    "url": "http://community.topcoder.com/tc?module=DownloadDocument&docid=32500001"
                },
                {
                    "documentName": "document 2",
                    "url": "http://community.topcoder.com/tc?module=DownloadDocument&docid=30500001"
                }
            ],
            "numberOfSubmissions": 1,
            "platforms": [
                "AWS",
                "Cloud Foundry"
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Get Challenge Registrants [/challenges/registrants/{challengeId}]
### Get Challenge Registrants [GET]

+ Parameters
    + challengeId (required, number, `30000000`) ... The challenge id.

+ Response 200 (application/json)

        {
          "registrants": [
            {
              "handle": "Luca",
              "reliability": "0%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-02T09:09:08.000Z"
            },
            {
              "handle": "freegod",
              "reliability": "40%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-02T09:27:46.000Z"
            },
            {
              "handle": "Ghost_141",
              "reliability": "53%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-02T09:31:53.000Z"
            },
            {
              "handle": "Gando19850304",
              "reliability": "0%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-02T09:56:15.000Z"
            },
            {
              "handle": "saarixx",
              "reliability": "0%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-02T10:19:36.000Z"
            },
            {
              "handle": "moulyg",
              "reliability": "30%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-02T10:21:05.000Z"
            },
            {
              "handle": "DanLazar",
              "reliability": "13%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-02T12:09:28.000Z"
            },
            {
              "handle": "Schpotsky",
              "reliability": "100%",
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-02T12:27:50.000Z"
            },
            {
              "handle": "Fantoccini",
              "reliability": "0%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-02T19:21:55.000Z"
            },
            {
              "handle": "Standlove",
              "reliability": "0%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-02T19:50:41.000Z"
            },
            {
              "handle": "brain_cn",
              "reliability": "0%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-02T21:41:37.000Z"
            },
            {
              "handle": "phead",
              "reliability": "0%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-02T21:44:32.000Z"
            },
            {
              "handle": "alfiya_Zi",
              "reliability": "0%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-03T00:49:54.000Z"
            },
            {
              "handle": "sunbinbrother",
              "reliability": "0%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-03T02:13:48.000Z"
            },
            {
              "handle": "muzehyun",
              "reliability": "0%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-03T03:15:31.000Z"
            },
            {
              "handle": "KeSyren",
              "reliability": "13%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-03T05:39:21.000Z"
            },
            {
              "handle": "Sky_",
              "reliability": "100%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-03T06:18:30.000Z"
            },
            {
              "handle": "woodjhon",
              "reliability": "6%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-03T07:19:29.000Z"
            }
          ]
        }

+ Response 200 (application/json)

        {
            "registrants": [
            {
                "handle": "heffan",
                "reliability": "100%",
                "rating": 1800,
                "colorStyle": "color: #DDCC00"
            }
            ]
        }
+ Response 200 (application/json)

        {
            "registrants": [
                {
                    "handle": "heffan",
                    "reliability": "100%"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Get Challenge Submissions [/challenges/submissions/{challengeId}]
### Get Challenge Submissions [GET]

+ Parameters
    + challengeId (required, number, `30000000`) ... The challenge id.

+ Response 200 (application/json)

        {
          "submissions": [
            {
              "handle": "Sky_",
              "placement": 1,
              "screeningScore": 100,
              "initialScore": 98.98,
              "finalScore": 99.95,
              "points": 360,
              "submissionStatus": "Active",
              "submissionDate": "2013-12-06T08:12:59.000Z"
            },
            {
              "handle": "Sky_",
              "placement": "",
              "screeningScore": null,
              "initialScore": null,
              "finalScore": null,
              "points": 0,
              "submissionStatus": "Deleted",
              "submissionDate": "2013-12-05T12:22:07.000Z"
            }
          ]
        }

+ Response 200 (application/json)

        {
            "submissions": [
            {
                "handle": "heffan",
                "placement": 1,
                "screeningScore": 100,
                "initialScore": 80,
                "finalScore": 90,
                "points": 510,
                "submissionStatus": "Active"
            }
            ]
        }
+ Response 200 (application/json)

        {
            "submissions": [
                {
                    "handle": "heffan",
                    "placement": 1,
                    "screeningScore": 100,
                    "initialScore": 80,
                    "finalScore": 90,
                    "points": 510,
                    "submissionStatus": "Active"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Get Challenge Phases [/challenges/phases/{challengeId}]
### Get Challenge Phases [GET]

+ Parameters
    + challengeId (required, number, `30000000`) ... The challenge id.

+ Response 200 (application/json)

        {
          "currentPhaseEndDate": "-000001-11-30T00:00:00.000Z",
          "currentStatus": "Completed",
          "currentPhaseName": "",
          "currentPhaseRemainingTime": 0,
          "phases": [
            {
                "type": "Registration",
                "status": "Open",
                "scheduledStartTime": "2013-12-05T12:22:07.000Z",
                "actualStartTime": "2013-12-05T12:22:07.000Z",
                "scheduledEndTime": "2013-12-05T12:22:07.000Z",
                "actualEndTime": null
            },
            {
                "type": "Submission",
                "status": "Scheduled",
                "scheduledStartTime": "2013-12-05T12:22:07.000Z",
                "actualStartTime": null,
                "scheduledEndTime": "2013-12-05T12:22:07.000Z",
                "actualEndTime": null
            }
           ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }


# Group User Profile
Register a new user.

## Users [/users]
+ Model (application/json)

        {
            "firstname" : "John",
            "lastname" : "Doe",
            "handle" : "uniqueLogin",
            "country" : "UK",
            "email" : "name@domain.com",
            "password" : "HashedPassword",
            "regSource": "http://registration.source.domain.com",
            "utm_source": "a",
            "utm_medium": "b",
            "utm_campaign": "c"
        }

### Create a new user [POST]
+ Request (application/json)

    [Users][]

+ Response 200 (application/json)

        {
            "name":"OK",
            "value":"200",
            "description":"This message will contain the new user id."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 422 (application/json)

        {
            "name":"Unprocessable Entity",
            "value":"422",
            "description":"This message will explain why the POST data was not accepted."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

### Create a new user via social login [POST]
+ Request (application/json)

        {
            "firstname" : "John",
            "lastname" : "Doe",
            "handle" : "uniqueLogin",
            "country" : "UK",
            "email" : "name@domain.com",
            "socialProvider" : "google",
            "socialUserId": "3003300",
            "socialUserName" : "JohnsGoogleName",
            "socialEmail" : "john@gmail.com",
            "socialEmailVerified" : "true",
            "regSource": "TC API"
        }

+ Response 200 (application/json)

        {
            "name":"OK",
            "value":"200",
            "description":"This message will contain the new user id."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 422 (application/json)

        {
            "name":"Unprocessable Entity",
            "value":"422",
            "description":"This message will explain why the POST data was not accepted."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Public Profile [/users/{handle}]
### Public Profile [GET]

+ Parameters
    + handle (required, string, `iRabbit`) ... Member Handle

+ Response 200 (application/json)

        {
             "handle": "hohosky",
             "country": "China",
             "memberSince": "09.28.2005 15:47 EDT",
             "overallEarning": 0,
             "quote": "Focus is a matter of deciding what things you're not going to do.",
             "ratingsSummary": [
                  {
                   "name": "Development",
                   "rating": 1906,
                   "colorStyle": "color: #DDCC00"
                  },
                  {
                   "name": "Design",
                   "rating": 1516,
                   "colorStyle": "color: #DDCC00"
                  },
                  {
                   "name": "Specification",
                   "rating": 1747,
                   "colorStyle": "color: #DDCC00"
                  }
             ],
             "photoLink": "/i/m/hohosky_big.jpg",
             "isCopilot": {
                  "value": true,
                  "software": false,
                  "studio": false
             },
             "isPM": false,
            "Achievements":
            [
                {
                  "date": "03.17.2013 00:00 EDT",
                  "description": "First Forum Post"
                 },
                 {
                  "date": "02.19.2013 00:00 EST",
                  "description": "One Hundred Forum Posts"
                 },
                 {
                  "date": "10.03.2012 00:00 EDT",
                  "description": "First Passing Submission"
                 },
                 {
                  "date": "09.28.2012 00:00 EDT",
                  "description": "First Successful Challenge"
                 },
                 {
                  "date": "09.28.2012 00:00 EDT",
                  "description": "Five Rated Algorithm Competitions"
                 },
                 {
                  "date": "09.28.2012 00:00 EDT",
                  "description": "Five Successful Challenges"
                 },
                 {
                  "date": "09.28.2012 00:00 EDT",
                  "description": "SRM Winner Div 2"
                 },
                 {
                  "date": "09.28.2012 00:00 EDT",
                  "description": "Solved Hard Div1 Problem in SRM"
                 },
                 {
                  "date": "09.28.2012 00:00 EDT",
                  "description": "First Rated Algorithm Competition"
                 },
                 {
                  "date": "09.28.2012 00:00 EDT",
                  "description": "Solved Hard Div2 Problem in SRM"
                 },
                 {
                  "date": "09.28.2012 00:00 EDT",
                  "description": "First SRM Room Win (Any Division)"
                 },
                 {
                  "date": "09.28.2012 00:00 EDT",
                  "description": "Ten Solved Algorithm Problems"
                 },
                 {
                  "date": "09.28.2012 00:00 EDT",
                  "description": "First Solved Algorithm Problem"
                 },
                 {
                  "date": "09.17.2012 00:00 EDT",
                  "description": "Five Hundred Forum Posts"
                 },
                 {
                  "date": "08.27.2012 00:00 EDT",
                  "description": "First Win"
                 },
                 {
                  "date": "08.27.2012 00:00 EDT",
                  "description": "First Placement"
                 },
                 {
                  "date": "08.20.2012 00:00 EDT",
                  "description": "TopCoder Reviewer"
                 },
                 {
                  "date": "04.10.2012 00:00 EDT",
                  "description": "2012 TopCoder Open Mod Dash Champion"
                 },
                 {
                  "date": "04.07.2012 00:00 EDT",
                  "description": "One Thousand Forum Posts"
                 },
                 {
                  "date": "09.28.2011 00:00 EDT",
                  "description": "2011 TopCoder Open Mod Dash Finalists"
                 },
                 {
                  "date": "10.14.2010 00:00 EDT",
                  "description": "2010 TopCoder Open Mod Dash Finalist"
                 },
                 {
                  "date": "10.21.2005 00:00 EDT",
                  "description": "Twenty Five Placements"
                 }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
            "details:":"User is not activated."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
            "details:":"User does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## My Profile [/user/profile]
### My Profile [GET]
+ Request

    + Headers

            Authorization : Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZHwxMzI0NTYiLCJleHAiOjEzOTI4MTc4ODQsImF1ZCI6InRvcGNvZGVyIiwiaWF0IjoxMzkyNzU3ODg0fQ.7X2IKkiyyI1ExSM5GNpdhJ8fGGK5-oAjzccX6YL_BKY

+ Response 200 (application/json)

        {
             "handle": "hohosky",
             "country": "China",
             "memberSince": "09.28.2005 15:47 EDT",
             "overallEarning": 0,
             "quote": "Focus is a matter of deciding what things you're not going to do.",
             "ratingsSummary": [
                  {
                   "name": "Development",
                   "rating": 1906,
                   "colorStyle": "color: #DDCC00"
                  },
                  {
                   "name": "Design",
                   "rating": 1516,
                   "colorStyle": "color: #DDCC00"
                  },
                  {
                   "name": "Specification",
                   "rating": 1747,
                   "colorStyle": "color: #DDCC00"
                  }
             ],
             "photoLink": "/i/m/hohosky_big.jpg",
             "isCopilot": {
                  "value": true,
                  "software": false,
                  "studio": false
             },
             "isPM": false,
            "Achievements":
            [
                {
                  "date": "03.17.2013 00:00 EDT",
                  "description": "First Forum Post"
                 },
                 {
                  "date": "02.19.2013 00:00 EST",
                  "description": "One Hundred Forum Posts"
                 },
                 {
                  "date": "10.03.2012 00:00 EDT",
                  "description": "First Passing Submission"
                 },
                 {
                  "date": "09.28.2012 00:00 EDT",
                  "description": "First Successful Challenge"
                 },
                 {
                  "date": "09.28.2012 00:00 EDT",
                  "description": "Five Rated Algorithm Competitions"
                 },
                 {
                  "date": "09.28.2012 00:00 EDT",
                  "description": "Five Successful Challenges"
                 },
                 {
                  "date": "09.28.2012 00:00 EDT",
                  "description": "SRM Winner Div 2"
                 },
                 {
                  "date": "09.28.2012 00:00 EDT",
                  "description": "Solved Hard Div1 Problem in SRM"
                 },
                 {
                  "date": "09.28.2012 00:00 EDT",
                  "description": "First Rated Algorithm Competition"
                 },
                 {
                  "date": "09.28.2012 00:00 EDT",
                  "description": "Solved Hard Div2 Problem in SRM"
                 },
                 {
                  "date": "09.28.2012 00:00 EDT",
                  "description": "First SRM Room Win (Any Division)"
                 },
                 {
                  "date": "09.28.2012 00:00 EDT",
                  "description": "Ten Solved Algorithm Problems"
                 },
                 {
                  "date": "09.28.2012 00:00 EDT",
                  "description": "First Solved Algorithm Problem"
                 },
                 {
                  "date": "09.17.2012 00:00 EDT",
                  "description": "Five Hundred Forum Posts"
                 },
                 {
                  "date": "08.27.2012 00:00 EDT",
                  "description": "First Win"
                 },
                 {
                  "date": "08.27.2012 00:00 EDT",
                  "description": "First Placement"
                 },
                 {
                  "date": "08.20.2012 00:00 EDT",
                  "description": "TopCoder Reviewer"
                 },
                 {
                  "date": "04.10.2012 00:00 EDT",
                  "description": "2012 TopCoder Open Mod Dash Champion"
                 },
                 {
                  "date": "04.07.2012 00:00 EDT",
                  "description": "One Thousand Forum Posts"
                 },
                 {
                  "date": "09.28.2011 00:00 EDT",
                  "description": "2011 TopCoder Open Mod Dash Finalists"
                 },
                 {
                  "date": "10.14.2010 00:00 EDT",
                  "description": "2010 TopCoder Open Mod Dash Finalist"
                 },
                 {
                  "date": "10.21.2005 00:00 EDT",
                  "description": "Twenty Five Placements"
                 }
            ],
            "emails": [
            {
                "email": "foo@fooonyou.com",
                "type": "Primary",
                "status": "Active"
            }
            ],
            "name": "firstdok lastdok",
            "address": "address1, city, Maine, 04043, United States",
            "age": "25 - 34",
            "gender": "Male",
            "shirt_size": "Medium",
            "privacy": {
                "showMySchool": "Yes",
                "showMyEarnings": "No",
                "receiveMessages": "Yes",
                "messageBlackList": ["handleA", "handleB"]
             },
             "emailNotification": {
                "competitionAnnouncements": {
                    "algorithmCompetitions": "No",
                    "softwareDevelopmentOpportunities": "Yes",
                    "topCoderStudioCompetitions": "No"
                },
                "others": {
                    "employmentOpportunities": "Yes",
                    "topCoderNewsAndEvents": "Yes",
                    "topCoderDesignStudioNewsletter": "No"
                }
             },
             "demographic": {
                "nonEnglishName": "name1",
                "jobTitle": "Lorem ipsum",
                "company": "company1",
                "country": "Indonesia",
                "representedCountry": "Indonesia",
                "phone": "555555",
                "timeZone": "US/Central",
                "age": "18 - 25",
                "gender": "Male",
                "ethnicBackground": "Asian or Pacific Islander",
                "primaryInterest": "Creative Competition",
                "shirtSize": "Small",
                "collegeMajor": "Computer Science",
                "collegeMajorDescription": "Software Design",
                "degreeProgram": "Bachelors",
                "graduationDate": "21/02/2011",
                "clubsOrOrganizations": "None",
                "school": "Harvard University",
                "gpa": 3.5,
                "gpaScale": 5,
                "isStudent": "Yes",
                "isProfessional": "No"
             }
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
            "details:":"User is not activated."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"This message will explain why the request is invalid or cannot be served."
            "details:":"Authentication credential was missing."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## My Profile [/user/profile]
### My Profile [POST]
+ Request

    + Headers

            Authorization : Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZHwxMzI0NTYiLCJleHAiOjEzOTI4MTc4ODQsImF1ZCI6InRvcGNvZGVyIiwiaWF0IjoxMzkyNzU3ODg0fQ.7X2IKkiyyI1ExSM5GNpdhJ8fGGK5-oAjzccX6YL_BKY

+ Response 200 (application/json)

        {
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
            "details:":"User is not activated."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"This message will explain why the request is invalid or cannot be served."
            "details:":"Authentication credential was missing."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }
        
## Search My Challenges [/user/challenges?type={type}&pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}&communityId={communityId}&submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}&challengeType={challengeType}&platforms={platforms}&technologies={technologies}&prizeLowerBound={prizeLowerBound}&prizeUpperBound={prizeUpperBound}]
### Search My Challenges [GET]

+ Parameters
    + type (required, string, `develop`) ... type (design or develop)
    + pageIndex (optional, number, `1`) ... The paging number, 1-based, -1 if no paging. It can be null.
    + pageSize (optional, number, `50`) ... The max number of the results, should be set if pageIndex is set.
    + sortColumn (optional, string, `challengeName`) ... The column name to sort, can be null.
    + sortOrder (optional, string, `asc`) ... The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'.
    + communityId (optional, number, `1`) ... The community id.
    + submissionEndFrom (optional, string, `2014-03-01`) ... submission end date from value.
    + submissionEndTo (optional, string, `2014-03-15`) ... submission end date to value.
    + challengeType (optional, string, `assembly') ... challenge type
    + platforms (optional, string, `google,heroku`) ... platforms filter
    + technologies (optional, string, `java,javascript`) ... technologies filter
    + prizeLowerBound (optional, number, `1000`) ... prize lowerbound
    + prizeUpperBound (optional, number, `1200`) ... prize upperbound

+ Response 200 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 3,
            "data": [
                {
                    "challengeType": "Web Design",
                    "challengeName": "Cornell - Responsive Storyboard Economics Department Site Redesign Contest",
                    "challengeId": 30036096,
                    "projectId": 6789,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "platforms": [ "Heroku", "NodeJS"],
                    "technologies": [ "JavaScript", "Node.js" ],
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationStartDate": "10.27.2013 10:10 EDT",
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "currentPhaseEndDate": "10.31.2013 10:10 EDT",
                    "currentPhaseRemainingTime": 500,
                    "currentStatus": "Active",
                    "currentPhaseName": "Submission",
                    "challengeCommunity": "Develop",
                    "firstPlaceprize": 1250,
                    "totalPrize": 1800,
                    "totalCheckpointPrize": 400,
                    "reliabilityBonus": 0,
                    "digitalRunPoints": 500,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "postingDate": "10.31.2013 10:10 EDT",
                    "roles": ["Submitter", "Reviewer"]
                },
                {
                    "challengeType": "UI Prototype Competition",
                    "challengeName": "Corningstone App UI Prototype 2",
                    "challengeId": 30036099,
                    "projectId": 6484,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "platforms": [ "Heroku", "NodeJS"],
                    "technologies": [ "JavaScript", "Node.js" ],
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationStartDate": "10.27.2013 10:10 EDT",
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "currentPhaseEndDate": "10.31.2013 10:10 EDT",
                    "currentPhaseRemainingTime": 500,
                    "currentStatus": "Active",
                    "currentPhaseName": "Submission",
                    "challengeCommunity": "Develop",
                    "firstPlaceprize": 1250,
                    "totalPrize": 1800,
                    "totalCheckpointPrize": 400,
                    "reliabilityBonus": 660,
                    "digitalRunPoints": 990,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "postingDate": "10.31.2013 10:10 EDT",
                    "roles": ["Submitter", "Reviewer"]
                },
                {
                    "challengeType": "Content Creation",
                    "challengeName": "Crowdsourced Application Security Standards and Review",
                    "challengeId": 30036091,
                    "projectId": 6778,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "platforms": [ "Heroku", "NodeJS"],
                    "technologies": [ "JavaScript", "Node.js" ],
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationStartDate": "10.27.2013 10:10 EDT",
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "currentPhaseEndDate": "10.31.2013 10:10 EDT",
                    "currentPhaseRemainingTime": 500,
                    "currentStatus": "Active",
                    "currentPhaseName": "Submission",
                    "challengeCommunity": "Develop",
                    "firstPlaceprize": 1250,
                    "totalPrize": 1800,
                    "totalCheckpointPrize": 400,
                    "reliabilityBonus": 360,
                    "digitalRunPoints": 0,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "postingDate": "10.31.2013 10:10 EDT",
                    "roles": ["Submitter", "Reviewer"]
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 406 (application/json)

        {
            "name":"Not Acceptable",
            "value":"406",
            "description":"This message will explain why the Search parameters are invalid."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }        

## Validate Handle [/users/validate/{handle}]
### Validate Handle [GET]

+ Parameters
    + handle (required, string, `iRabbit`) ... Member Handle

+ Response 200 (application/json)

        {
            "valid":true
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The handle you entered is not valid"
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Validate Social [/users/validateSocial?socialProviderId={socialProviderId}&socialUserId={socialUserId}]
### Validate Handle [GET]

+ Parameters
    + socialProviderId (required, string, `1`) ... social provider id
    + socialUserId (required, string, `fb124764`) ... social user id

+ Response 200 (application/json)

        {
            "available":true
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description": "The request was invalid. An accompanying message will explain why."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Generate Reset Token  [/users/resetToken/?handle={handle}&email={email}]
### Generate Reset Token [GET]
- return "successful" flag set to true

+ Parameters
    + handle (optional, string, `iRabbit`) ... Member Handle or Social Login Username
    + email (optional, string, `test@test.com`) ... Member Email (mutually exclusive with handle parameter)

+ Response 200 (application/json)

        {
            "successful":"true"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"Either handle or email must be specified"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"Both handle and email are specified"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"You have already requested the reset token, please find it in your email inbox. If it's not there. Please contact support@topcoder.com."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"User does not exist"
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }


## Reset Password [/users/resetPassword/{handle}]
### Reset Password [POST]
+ Parameters
    + handle (required, string, `iRabbit`) ... Member Handle
    + token (required, string, `snABCD`) ... The reset password token
    + password (required, string, `cnDEFG`) ... The new password

+ Response 200 (application/json)

        {
             "description": "Your password has been reset!"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Authentication credentials were missing or incorrect."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"The request is understood, but it has been refused or access is not allowed."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Update Password [/users/password]
### Update Password [POST]

+ Parameters
    + oldPassword (required, string, `snABCD`) ... The old password
    + newPassword (required, string, `cnDEFG`) ... The new password

+ Response 200 (application/json)

        {
             "description": "Your password has been reset!"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Authentication credentials were missing or incorrect."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"The request is understood, but it has been refused or access is not allowed."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Activate User [/users/activate?code={code}]
### Activate User [GET]
+ Parameters
    + code (required, string, `BHWXAG3R`) ... The activation code

+ Response 200 (application/json)

        {
             "success": true
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"Empty activation code"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"Invalid activation code"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"User has been activated"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"Email has been activated"
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Upload Member Photo [/users/photo]
### Upload Member Photo [POST]

Request

+ Headers
    Authorization : Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZHwxMzI0NTYiLCJleHAiOjEzOTM3MDM1NzEsImF1ZCI6

+ Parameters
    + photo (required, file) ... The photo file.

+ Response 200 (application/json)

        {
             "message":"Success"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The photo has to be in following format: jpeg,png,bmp,jpg."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The photo has to be a file."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The photo should be less than 1Mb."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Authorization information needed."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

#Group Software Challenges

## Review Opportunities [/develop/reviewOpportunities/?pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}]
### Get Review Opportunities [GET]

+ Parameters
    + filter (optional, string, `type`) ... You can set multi key=value pair parameters to set the filter parameters. The filter parameter can only be following key: reviewType, challengeName, challengeType, reviewStartDate.type, reviewStartDate.firstDate, reviewStartDate.secondDate, reviewEndDate.type, reviewEndDate.firstDate, reviewEndDate.secondDate, reviewPaymentLowerBound, reviewPaymentUpperBound. For the reviewStartDate and reviewEndDate's type, it can only be(case sensitive) BEFORE, AFTER, ON, BETWEEN_DATES, BEFORE_CURRENT_DATE, AFTER_CURRENT_DATE. When the type is BETWEEN_DATES, the secondDate should be provided. The date value should follow this pattern YYYY-MM-DD.
    + value (optional, string, `Development`) ... Value of the filter key-value pair
    + pageIndex (optional, number, `1`) ... The page index of the returned resources. 1-based. It can be null. The default value will be 1
    + pageSize (optional, number, `50`) ... The page size of the returned resources. 1-based. It can be null. The default value will be 10.
    + sortColumn (optional, string, `challengeName`) ... The column name to sort, can be null.
    + sortOrder (optional, string, `asc`) ... The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'.

+ Response 200 (application/json)

        {
            "total": 21,
            "pageIndex": 1,
            "pageSize": 4,
            "data": [
                {
                    "primaryReviewerPayment": 18.00,
                    "secondaryReviewerPayment": 0,
                    "numberOfSubmissions": 1,
                    "reviewStart": "10.29.2013 21:13 EDT",
                    "reviewEnd": "10.31.2013 21:13 EDT",
                    "numberOfReviewPositionsAvailable": 1,
                    "challengeType": "First 2 Finish",
                    "reviewType": "Iterative Review",
                    "challengeName": "Simple UI Fixes - Ganttview JS App",
                    "challengeLink": "http://community.topcoder.com/tc?module=ProjectDetail&pj=30039333",
                    "detailLink": "http://community.topcoder.com/tc?module=ReviewAuctionDetails&aid=7064"
                },
                {
                    "primaryReviewerPayment": 346.00,
                    "secondaryReviewerPayment": 252.00,
                    "numberOfSubmissions": 3,
                    "reviewStart": "01.29.2014 16:05 EST",
                    "reviewEnd": "01.31.2014 16:05 EST",
                    "numberOfReviewPositionsAvailable": 1,
                    "challengeType": "Assembly Competition",
                    "reviewType": "Contest Review",
                    "challengeName": "Module Assembly - TopCoder NodeJS Open Bugs API",
                    "challengeLink": "http://community.topcoder.com/tc?module=ProjectDetail&pj=30039321",
                    "detailLink": "http://community.topcoder.com/tc?module=ReviewAuctionDetails&aid=7048"
                },
                {
                    "primaryReviewerPayment": 50.00,
                    "secondaryReviewerPayment": 0,
                    "numberOfSubmissions": 0,
                    "reviewStart": "01.24.2014 16:05 EST",
                    "reviewEnd": "01.24.2014 20:05 EST",
                    "numberOfReviewPositionsAvailable": 1,
                    "challengeType": "Assembly Competition",
                    "reviewType": "Spec Review",
                    "challengeName": "Module Assembly - TopCoder NodeJS Open Bugs API",
                    "challengeLink": "http://community.topcoder.com/tc?module=ProjectDetail&pj=30039321",
                    "detailLink": "http://community.topcoder.com/tc?module=ReviewAuctionDetails&aid=7048"
                },
                {
                    "primaryReviewerPayment": 0,
                    "secondaryReviewerPayment": 180.00,
                    "numberOfSubmissions": 1,
                    "reviewStart": "01.27.2014 21:10 EST",
                    "reviewEnd": "01.30.2014 21:10 EST",
                    "numberOfReviewPositionsAvailable": 3,
                    "challengeType": "Code",
                    "reviewType": "Contest Review",
                    "challengeName": "Build a DocuSign iOS Application using REST API",
                    "challengeLink": "http://community.topcoder.com/tc?module=ProjectDetail&pj=30039092",
                    "detailLink": "http://community.topcoder.com/tc?module=ReviewAuctionDetails&aid=6967"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 406 (application/json)

        {
            "name":"Not Acceptable",
            "value":"406",
            "description":"This message will explain why the Search parameters are invalid."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }


## Get Review Opportunity Detail [/develop/reviewOpportunities/{challengeId}]
### Get Review Opportunity Information [GET]

+ Request

            Authorization : Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZHwxMzI0NTYiLCJleHAiOjEzOTQwODA3MTEsImF1ZCI6InRvcGNvZGVyIiwiaWF0IjoxMzk0MDIwNzExfQ.xaaaElykyAq3woRRkcFQSUK0gvKnRCOhCD57x070GJ4

+ Parameters

    + challengeId (required, number, `30000000`) ... The challenge id.

+ Response 200 (application/json)

        {
            "challengeName": "PDS - Import and Persistence Update - Assembly Contest",
            "challengeType": "Assembly Competition",
            "challengeId": 30005520,
            "phases":
            [
                {
                    "type": "Submission",
                    "status": "Scheduled",
                    "scheduledStartTime": "2013-10-25T23:02:00.000Z",
                    "actualStartTime": null,
                    "scheduledEndTime": "2013-10-29T23:02:00.000Z",
                    "actualEndTime": null
                },
                {
                    "type": "Screening",
                    "status": "Scheduled",
                    "scheduledStartTime": "2013-10-29T23:02:00.000Z",
                    "actualStartTime": null,
                    "scheduledEndTime": "2013-10-30T23:02:00.000Z",
                    "actualEndTime": null
                }
            ],
            "positions":
            [
                {
                    "role": "Primary Reviewer",
                    "numPositions": 1,
                    "payment": 500
                },
                {
                    "role": "Secondary Reviewer",
                    "numPositions": 2,
                    "payment": 400
                }
            ],
            "applications":
            [
                {
                    "handle": "iRabbit",
                    "role": "Primary Reviewer",
                    "reviewerRating": 100.01,
                    "status": "Pending",
                    "applicationDate": "2013-10-25T23:02:00.000Z"
                },
                {
                    "handle": "iRabbit",
                    "role": "Secondary Reviewer",
                    "reviewerRating": 100.05,
                    "status": "Pending",
                    "applicationDate": "2013-10-25T23:02:00.000Z"
                }
            ]
        }


+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }


## Apply Develop Review Opportunity Detail [/develop/reviewOpportunities/{challengeId}/apply]
### Apply Develop Review Opportunity Information [POST]

+ Request

            Authorization : Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZHwxMzI0NTYiLCJleHAiOjEzOTQwODA3MTEsImF1ZCI6InRvcGNvZGVyIiwiaWF0IjoxMzk0MDIwNzExfQ.xaaaElykyAq3woRRkcFQSUK0gvKnRCOhCD57x070GJ4

+ Parameters

    + challengeId (required, number, `30000000`) ... The challenge id.
    + reviewApplicationRoleId (optional, number, `1`) ... The review application role id to apply.

+ Response 200 (application/json)

        {
            "message": "Your review application for this contest has been cancelled."
        }

+ Response 200 (application/json)

        {
            "message": "You have successfully applied to review this contest. The system will automatically select reviewers that best match the review positions for this contest on 03.26.2014 08:00. You will be notified by email what review role you were assigned to."
        }

+ Response 200 (application/json)

        {
            "message": "You have successfully applied to review this contest. The system will automatically decide whether you match the reviewer requirements for this contest now. You will be notified by email shortly."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"challengeId should be number."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"challengeId should be positive."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"challengeId should be Integer."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"challengeId should be less or equal to 2147483647."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"reviewApplicationRoleId should be an element of 1,2,3,4,5,6,7,8,9."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The challenge is not existed or don't have any review opportunities or review registration is not open."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"You can't apply the review application role that do not belong to this challenge."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"You are not a Review Board member."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"You are already assigned as reviewer for the contest."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"There are no open positions for this challenge."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"There is no open positions for selected review application role: Primary Reviewer."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"You should agree with all terms of use."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Anonymous user don't have permission to access this api."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"The user is not allowed to register this challenge review."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Apply Design Review Opportunity [/design/reviewOpportunities/:challengeId/apply]
### Apply Design Review Opportunity [POST]
+ Parameters
    + challengeId (required, string, `3001`) ... The challenge id
    + isSpecReview (required, boolean, `true` or false) ... The spec review flag

+ Response 200 (application/json)

        {
            "result": "Success"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"challengeId should be positive."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"challengeId should be less or equal to 2147483647."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The isSpecReview flag should be true or false."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The specified challenge doesn't exist."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The specified challenge is not a design challenge."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"Sorry, you are not a member of the review board."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The specified Screening review position is already taken."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Anonymous user don\'t have permission to access this api."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"You should agree with all terms of use."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }


## Challenge Reviewers Collection [/develop/reviewers/{contestType}]
### List reviewers of current challenge type [GET]

+ Parameters
    + contestType (required, string, `Assembly`) ... The type of the challenge. It can be 'Assembly', 'ComponentDevelopment', 'TestSuites', 'Reporting', 'ComponentDesign', 'Conceptualization', 'Specification', 'Architecture', 'UIPrototype', 'RIABuild', 'ContentCreation', 'TestScenarios', 'BugHunt'.

+ Response 200 (application/json)

        {
            "total": 4,
            "data": [
                {
                    "id": "23040226",
                    "handle": "AE-86",
                    "rating": "1212",
                    "photo": "1.gif"
                },
                {
                    "id": "23040228",
                    "handle": "AE-88",
                    "rating": "1920",
                    "photo": "2.gif"
                },
                {
                    "id": "23040258",
                    "handle": "AE-90",
                    "rating": "1386",
                    "photo": "3.gif"
                },
                {
                    "id": "13040058",
                    "handle": "XYZ",
                    "rating": "1776",
                    "photo": "4.gif"
                }
            ]
        }


+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }


## Software Member Statistics [/users/{handle}/statistics/develop?track={track}]
### Software Member Statistics [GET]

+ Parameters
    + handle (required, string, `iRabbit`) ... Member Handle
    + track (optional, string, `development`) ... The track name

+ Response 200 (application/json)

        {
            "handle": "iRabbit",
            "Tracks":
            {
                "Development":
                [
                    "rating": 1659,
                    "percentile": 50%,
                    "rank": 9999,
                    "countryRank": 9999,
                    "schoolRank": 9999,
                    "volatility": 280,
                    "competitions": 37,
                    "maximumRating": 1693,
                    "minimumRating": 1035,
                    "reviewerRating": 1035,
                    "inquiries": 37,
                    "submissions": 36,
                    "submissionRate": "97.30%",
                    "passedScreening": 36,
                    "screeningSuccessRate": "100.00%",
                    "passedReview": 36,
                    "reviewSuccessRate": "100.00%",
                    "appeals": 279,
                    "appealSuccessRate": "33.33%",
                    "maximumScore": 100.00,
                    "minimumScore": 86.04,
                    "averageScore": 95.64,
                    "averagePlacement": 3.19,
                    "wins": 21,
                    "winPercentage": "58.33%"
                ],
                "Assembly":
                [
                    "rating": 1659,
                    "percentile": 50%,
                    "rank": 9999,
                    "countryRank": 9999,
                    "schoolRank": 9999,
                    "volatility": 280,
                    "competitions": 37,
                    "maximumRating": 1693,
                    "minimumRating": 1035,
                    "reviewerRating": 1035,
                    "inquiries": 37,
                    "submissions": 36,
                    "submissionRate": "97.30%",
                    "passedScreening": 36,
                    "screeningSuccessRate": "100.00%",
                    "passedReview": 36,
                    "reviewSuccessRate": "100.00%",
                    "appeals": 279,
                    "appealSuccessRate": "33.33%",
                    "maximumScore": 100.00,
                    "minimumScore": 86.04,
                    "averageScore": 95.64,
                    "averagePlacement": 3.19,
                    "wins": 21,
                    "winPercentage": "58.33%"
                ]
            }
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Software Member Rating History and Distribution [/develop/statistics/{handle}/{challengeType}]
### Software Member Rating History and Distribution [GET]

+ Parameters
    + handle (required, string, `iRabbit`) ... Member Handle
    + challengeType (required, String, `Development`) ... Challenge Type

+ Response 200 (application/json)

        {
            "history":
            [
                {
                    challengeId : 12345,
                    challengeName : 'awesome component',
                    date: "2012.9.10",
                    rating: 1000
                },
                {
                    challengeId : 12346,
                    challengeName : 'awesome component',
                    date: "2012.10.10",
                    rating: 1100
                }
            ],
            "distribution":
            [
                {
                    range: "2000-2100",
                    number: 10
                },
                {
                    range: "2100-2200",
                    number: 5
                }
            ]

        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Challenge Types Collection [/develop/challengetypes]
### List all challenge types [GET]
+ Response 200 (application/json)

        [
            {
                "contestCategoryId": 2,
                "contestTypeId": 1,
                "name": "Development",
                "description": "Development"
            },
            {
                "contestCategoryId": 1,
                "contestTypeId": 1,
                "name": "Design",
                "description": "Design"
            }
        ]

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }


## Search Active Software Challenges [/challenges/active?pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}&communityId={communityId}&submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}&type={type}&platforms={platforms}&technologies={technologies}&prizeLowerBound={prizeLowerBound}&prizeUpperBound={prizeUpperBound}]
### Search Active Software Challenges [GET]

+ Parameters
    + pageIndex (optional, number, `1`) ... The paging number, 1-based, -1 if no paging. It can be null.
    + pageSize (optional, number, `50`) ... The max number of the results, should be set if pageIndex is set.
    + sortColumn (optional, string, `challengeName`) ... The column name to sort, can be null.
    + sortOrder (optional, string, `asc`) ... The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'.
    + communityId (optional, number, `1`) ... The community id.
    + submissionEndFrom (optional, string, `2014-03-01`) ... submission end date from value.
    + submissionEndTo (optional, string, `2014-03-15`) ... submission end date to value.
    + type (optional, string, `assembly') ... challenge type
    + platforms (optional, string, `google,heroku`) ... platforms filter
    + technologies (optional, string, `java,javascript`) ... technologies filter
    + prizeLowerBound (optional, number, `1000`) ... prize lowerbound
    + prizeUpperBound (optional, number, `1200`) ... prize upperbound

+ Response 200 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 3,
            "data": [
                {
                    "challengeType": "Web Design",
                    "challengeName": "Cornell - Responsive Storyboard Economics Department Site Redesign Contest",
                    "challengeId": 30036096,
                    "projectId": 6789,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "platforms": [ "Heroku", "NodeJS"],
                    "technologies": [ "JavaScript", "Node.js" ],
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationStartDate": "10.27.2013 10:10 EDT",
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "currentPhaseEndDate": "10.31.2013 10:10 EDT",
                    "currentPhaseRemainingTime": 500,
                    "currentStatus": "Active",
                    "currentPhaseName": "Submission",
                    "challengeCommunity": "Develop",
                    "firstPlaceprize": 1250,
                    "totalPrize": 1800,
                    "totalCheckpointPrize": 400,
                    "reliabilityBonus": 0,
                    "digitalRunPoints": 500,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "postingDate": "10.31.2013 10:10 EDT"
                },
                {
                    "challengeType": "UI Prototype Competition",
                    "challengeName": "Corningstone App UI Prototype 2",
                    "challengeId": 30036099,
                    "projectId": 6484,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "platforms": [ "Heroku", "NodeJS"],
                    "technologies": [ "JavaScript", "Node.js" ],
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationStartDate": "10.27.2013 10:10 EDT",
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "currentPhaseEndDate": "10.31.2013 10:10 EDT",
                    "currentPhaseRemainingTime": 500,
                    "currentStatus": "Active",
                    "currentPhaseName": "Submission",
                    "challengeCommunity": "Develop",
                    "firstPlaceprize": 1250,
                    "totalPrize": 1800,
                    "totalCheckpointPrize": 400,
                    "reliabilityBonus": 660,
                    "digitalRunPoints": 990,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "postingDate": "10.31.2013 10:10 EDT"
                },
                {
                    "challengeType": "Content Creation",
                    "challengeName": "Crowdsourced Application Security Standards and Review",
                    "challengeId": 30036091,
                    "projectId": 6778,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "platforms": [ "Heroku", "NodeJS"],
                    "technologies": [ "JavaScript", "Node.js" ],
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationStartDate": "10.27.2013 10:10 EDT",
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "currentPhaseEndDate": "10.31.2013 10:10 EDT",
                    "currentPhaseRemainingTime": 500,
                    "currentStatus": "Active",
                    "currentPhaseName": "Submission",
                    "challengeCommunity": "Develop",
                    "firstPlaceprize": 1250,
                    "totalPrize": 1800,
                    "totalCheckpointPrize": 400,
                    "reliabilityBonus": 360,
                    "digitalRunPoints": 0,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "postingDate": "10.31.2013 10:10 EDT"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 406 (application/json)

        {
            "name":"Not Acceptable",
            "value":"406",
            "description":"This message will explain why the Search parameters are invalid."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Search Open Software Challenges [/challenges/open?pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}&communityId={communityId}&submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}&type={type}&platforms={platforms}&technologies={technologies}&prizeLowerBound={prizeLowerBound}&prizeUpperBound={prizeUpperBound}]
### Search Open Software Challenges [GET]

+ Parameters
    + pageIndex (optional, number, `1`) ... The paging number, 1-based, -1 if no paging. It can be null.
    + pageSize (optional, number, `50`) ... The max number of the results, should be set if pageIndex is set.
    + sortColumn (optional, string, `challengeName`) ... The column name to sort, can be null.
    + sortOrder (optional, string, `asc`) ... The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'.
    + communityId (optional, number, `1`) ... The community id.
    + submissionEndFrom (optional, string, `2014-03-01`) ... submission end date from value.
    + submissionEndTo (optional, string, `2014-03-15`) ... submission end date to value.
    + type (optional, string, `assembly') ... challenge type
    + platforms (optional, string, `google,heroku`) ... platforms filter
    + technologies (optional, string, `java,javascript`) ... technologies filter
    + prizeLowerBound (optional, number, `1000`) ... prize lowerbound
    + prizeUpperBound (optional, number, `1200`) ... prize upperbound

+ Response 200 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 3,
            "data": [
                {
                    "challengeType": "Web Design",
                    "challengeName": "Cornell - Responsive Storyboard Economics Department Site Redesign Contest",
                    "challengeId": 30036096,
                    "projectId": 6789,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "platforms": [ "Heroku", "NodeJS"],
                    "technologies": [ "JavaScript", "Node.js" ],
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationStartDate": "10.27.2013 10:10 EDT",
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "currentPhaseEndDate": "10.31.2013 10:10 EDT",
                    "currentPhaseRemainingTime": 500,
                    "currentStatus": "Active",
                    "currentPhaseName": "Submission",
                    "challengeCommunity": "Develop",
                    "firstPlaceprize": 1250,
                    "totalPrize": 1800,
                    "totalCheckpointPrize": 400,
                    "reliabilityBonus": 0,
                    "digitalRunPoints": 500,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "postingDate": "10.31.2013 10:10 EDT"
                },
                {
                    "challengeType": "UI Prototype Competition",
                    "challengeName": "Corningstone App UI Prototype 2",
                    "challengeId": 30036099,
                    "projectId": 6484,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "platforms": [ "Heroku", "NodeJS"],
                    "technologies": [ "JavaScript", "Node.js" ],
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationStartDate": "10.27.2013 10:10 EDT",
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "currentPhaseEndDate": "10.31.2013 10:10 EDT",
                    "currentPhaseRemainingTime": 500,
                    "currentStatus": "Active",
                    "currentPhaseName": "Submission",
                    "challengeCommunity": "Develop",
                    "firstPlaceprize": 1250,
                    "totalPrize": 1800,
                    "totalCheckpointPrize": 400,
                    "reliabilityBonus": 660,
                    "digitalRunPoints": 990,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "postingDate": "10.31.2013 10:10 EDT"
                },
                {
                    "challengeType": "Content Creation",
                    "challengeName": "Crowdsourced Application Security Standards and Review",
                    "challengeId": 30036091,
                    "projectId": 6778,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "platforms": [ "Heroku", "NodeJS"],
                    "technologies": [ "JavaScript", "Node.js" ],
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationStartDate": "10.27.2013 10:10 EDT",
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "currentPhaseEndDate": "10.31.2013 10:10 EDT",
                    "currentPhaseRemainingTime": 500,
                    "currentStatus": "Active",
                    "currentPhaseName": "Submission",
                    "challengeCommunity": "Develop",
                    "firstPlaceprize": 1250,
                    "totalPrize": 1800,
                    "totalCheckpointPrize": 400,
                    "reliabilityBonus": 360,
                    "digitalRunPoints": 0,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "postingDate": "10.31.2013 10:10 EDT"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 406 (application/json)

        {
            "name":"Not Acceptable",
            "value":"406",
            "description":"This message will explain why the Search parameters are invalid."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Search Past Software Challenges [/challenges/past?pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}&communityId={communityId}&submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}&type={type}&platforms={platforms}&technologies={technologies}&prizeLowerBound={prizeLowerBound}&prizeUpperBound={prizeUpperBound}]
### Search Past Software Challenges [GET]

+ Parameters
    + pageIndex (optional, number, `1`) ... The paging number, 1-based, -1 if no paging. It can be null.
    + pageSize (optional, number, `50`) ... The max number of the results, should be set if pageIndex is set.
    + sortColumn (optional, string, `challengeName`) ... The column name to sort, can be null.
    + sortOrder (optional, string, `asc`) ... The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'.
    + communityId (optional, number, `1`) ... The community id.
    + submissionEndFrom (optional, string, `2014-03-01`) ... submission end date from value.
    + submissionEndTo (optional, string, `2014-03-15`) ... submission end date to value.
    + type (optional, string, `assembly') ... challenge type
    + platforms (optional, string, `google,heroku`) ... platforms filter
    + technologies (optional, string, `java,javascript`) ... technologies filter
    + prizeLowerBound (optional, number, `1000`) ... prize lowerbound
    + prizeUpperBound (optional, number, `1200`) ... prize upperbound

+ Response 200 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 3,
            "data": [
                {
                    "challengeType": "Web Design",
                    "challengeName": "Cornell - Responsive Storyboard Economics Department Site Redesign Contest",
                    "challengeId": 30036096,
                    "projectId": 6789,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "platforms": [ "Heroku", "NodeJS"],
                    "technologies": [ "JavaScript", "Node.js" ],
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationStartDate": "10.27.2013 10:10 EDT",
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "challengeCommunity": "Develop",
                    "firstPlaceprize": 1250,
                    "totalPrize": 1800,
                    "totalCheckpointPrize": 400,
                    "reliabilityBonus": 0,
                    "digitalRunPoints": 500,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "postingDate": "10.31.2013 10:10 EDT"
                },
                {
                    "challengeType": "UI Prototype Competition",
                    "challengeName": "Corningstone App UI Prototype 2",
                    "challengeId": 30036099,
                    "projectId": 6484,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "platforms": [ "Heroku", "NodeJS"],
                    "technologies": [ "JavaScript", "Node.js" ],
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationStartDate": "10.27.2013 10:10 EDT",
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "challengeCommunity": "Develop",
                    "firstPlaceprize": 1250,
                    "totalPrize": 1800,
                    "totalCheckpointPrize": 400,
                    "reliabilityBonus": 660,
                    "digitalRunPoints": 990,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "postingDate": "10.31.2013 10:10 EDT"
                },
                {
                    "challengeType": "Content Creation",
                    "challengeName": "Crowdsourced Application Security Standards and Review",
                    "challengeId": 30036091,
                    "projectId": 6778,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "platforms": [ "Heroku", "NodeJS"],
                    "technologies": [ "JavaScript", "Node.js" ],
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationStartDate": "10.27.2013 10:10 EDT",
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "challengeCommunity": "Develop",
                    "firstPlaceprize": 1250,
                    "totalPrize": 1800,
                    "totalCheckpointPrize": 400,
                    "reliabilityBonus": 360,
                    "digitalRunPoints": 0,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2
                    "postingDate": "10.31.2013 10:10 EDT"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 406 (application/json)

        {
            "name":"Not Acceptable",
            "value":"406",
            "description":"This message will explain why the Search parameters are invalid."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Search Upcoming Software Challenges [/challenges/upcoming?pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}&communityId={communityId}&submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}&type={type}&platforms={platforms}&technologies={technologies}&prizeLowerBound={prizeLowerBound}&prizeUpperBound={prizeUpperBound}]
### Search Upcoming Software Challenges [GET]

+ Parameters
    + pageIndex (optional, number, `1`) ... The paging number, 1-based, -1 if no paging. It can be null.
    + pageSize (optional, number, `50`) ... The max number of the results, should be set if pageIndex is set.
    + sortColumn (optional, string, `challengeName`) ... The column name to sort, can be null.
    + sortOrder (optional, string, `asc`) ... The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'.
    + communityId (optional, number, `1`) ... The community id.
    + submissionEndFrom (optional, string, `2014-03-01`) ... submission end date from value.
    + submissionEndTo (optional, string, `2014-03-15`) ... submission end date to value.
    + type (optional, string, `assembly') ... challenge type
    + platforms (optional, string, `google,heroku`) ... platforms filter
    + technologies (optional, string, `java,javascript`) ... technologies filter
    + prizeLowerBound (optional, number, `1000`) ... prize lowerbound
    + prizeUpperBound (optional, number, `1200`) ... prize upperbound

+ Response 200 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 3,
            "data": [
                {
                    "challengeType": "Web Design",
                    "challengeName": "Cornell - Responsive Storyboard Economics Department Site Redesign Contest",
                    "challengeId": 30036096,
                    "projectId": 6789,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "platforms": [ "Heroku", "NodeJS"],
                    "technologies": [ "JavaScript", "Node.js" ],
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "appealsEndDate": "10.31.2013 10:10 EDT",
                    "finalFixEndDate": "10.31.2013 10:10 EDT",
                    "challengeCommunity": "Develop",
                    "firstPlaceprize": 1250,
                    "totalPrize": 1800,
                    "totalCheckpointPrize": 400,
                    "reliabilityBonus": 0,
                    "digitalRunPoints": 500,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "postingDate": "10.31.2013 10:10 EDT"
                },
                {
                    "challengeType": "UI Prototype Competition",
                    "challengeName": "Corningstone App UI Prototype 2",
                    "challengeId": 30036099,
                    "projectId": 6484,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "platforms": [ "Heroku", "NodeJS"],
                    "technologies": [ "JavaScript", "Node.js" ],
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "appealsEndDate": "10.31.2013 10:10 EDT",
                    "finalFixEndDate": "10.31.2013 10:10 EDT",
                    "challengeCommunity": "Develop",
                    "firstPlaceprize": 1250,
                    "totalPrize": 1800,
                    "totalCheckpointPrize": 400,
                    "reliabilityBonus": 660,
                    "digitalRunPoints": 990,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "postingDate": "10.31.2013 10:10 EDT"
                },
                {
                    "challengeType": "Content Creation",
                    "challengeName": "Crowdsourced Application Security Standards and Review",
                    "challengeId": 30036091,
                    "projectId": 6778,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "platforms": [ "Heroku", "NodeJS"],
                    "technologies": [ "JavaScript", "Node.js" ],
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "appealsEndDate": "10.31.2013 10:10 EDT",
                    "finalFixEndDate": "10.31.2013 10:10 EDT",
                    "challengeCommunity": "Develop",
                    "firstPlaceprize": 1250,
                    "totalPrize": 1800,
                    "totalCheckpointPrize": 400,
                    "reliabilityBonus": 360,
                    "digitalRunPoints": 0,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "postingDate": "10.31.2013 10:10 EDT"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 406 (application/json)

        {
            "name":"Not Acceptable",
            "value":"406",
            "description":"This message will explain why the Search parameters are invalid."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Get Software Challenge Detail [/challenges/{challengeId}]
### Get Software Challenge Detail [GET]

+ Parameters
    + challengeId (required, number, `30000000`) ... The challenge id.

+ Response 200 (application/json)

        {
          "challengeType": "Assembly Competition",
          "challengeName": "Module Assembly - TopCoder NodeJS API Tests Improvement and Normalization",
          "challengeId": 30036437,
          "projectId": 6757,
          "forumId": "19553",
          "detailedRequirements": "<h2 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Project Overview</span></h2>\n\n<p>TopCoder and the TopCoder community have worked hard to get the platform to its currently level of maturity, but we&#39;re far from done. It&#39;s time to take the platform to the next level. TopCoder is going to start taking some steps to open up the platform API to the outside and community developers so they could incorporate it in their websites, applications or build their own applications (web, mobile or desktop).</p>\n\n<p>The ultimate goal is to open up and build an &quot;API&quot; that is targeting all different type of audiences - Software and Studio Competitors, SRM/MM competitors, Copilots, Admins and TopCoder partners - each audience will have different interests and usages of the API, so it will be a huge project and we need to make sure that we are in the right direction from the beginning.</p>\n\n<p>Currently, we have run several contests to build the APIs and write tests for testing the APIs.&nbsp; All the tests can be found at https://github.com/cloudspokes/tc-api/tree/master/test</p>\n\n<p>Through these contests, we have found several problems for the tests part as following</p>\n\n<ol>\n\t<li>The tests are not properly named, we&#39;d like to follow the way like &#39;test.[api name].js&#39;, like <span class=\"css-truncate css-truncate-target\"><a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/blob/master/test/register_member.js\" id=\"72636476fe496c69e8cc1d0569ffd550-ab6d2363c6933e23ee66bb7b92f4d07841ea286b\" title=\"register_member.js\">register_member.js</a> should be renamed to <u>test.register_member.js</u>.</span></li>\n\t<li>Some of the tests have to presetup the database manually, Some of the tests automically setup and clear the related database tables wisely.</li>\n\t<li>The tests can be passed if run separately, but failed when running togather.</li>\n</ol>\n\n<p>For this contest, we&#39;d like to improve and standarize the way to write tests, so it will be good for further addon and CI integration.</p>\n\n<h2 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Competition Task Overview</span></h2>\n\n<p><span style=\"color:#FF0000;\"><span style=\"font-size: 12px;\"><img align=\"absmiddle\" alt=\"\" border=\"0\" height=\"16\" src=\"http://apps.topcoder.com/wiki/images/icons/emoticons/warning.gif\" width=\"16\" /> <strong>Please raise questions as quick as you can, I am familiar with related database and code base, I can provide as much support as I can.</strong></span></span></p>\n\n<p><span style=\"color:#FF0000;\"><span style=\"font-size: 12px;\"><img align=\"absmiddle\" alt=\"\" border=\"0\" height=\"16\" src=\"http://apps.topcoder.com/wiki/images/icons/emoticons/warning.gif\" width=\"16\" /></span><strong>The updated code must still deploy and work on heroku - any submission which can&#39;t be deployed on heroku successfully will be failed in screening phase - primary reviewer must check this.</strong></span></p>\n\n<p>The implementation will base on the node.js version of TC platform API - <span class=\"nobr\"><a href=\"https://github.com/cloudspokes/tc-api\" rel=\"nofollow\">https://github.com/cloudspokes/tc-api</a>.</span> <strong>Please follow the existing actionhero pattern for your development.</strong></p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Clean State for Running Tests</span></h3>\n\n<p>Currently, some tests requires presetup the database, some tests automically setup and clear the related database tables.</p>\n\n<p>We&#39;d like to follow the approach to setup and clear the related database tables before and after running the tests.</p>\n\n<p>Currently, <span class=\"css-truncate css-truncate-target\"><a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/blob/master/test/register_member.js\" id=\"72636476fe496c69e8cc1d0569ffd550-ab6d2363c6933e23ee66bb7b92f4d07841ea286b\" title=\"register_member.js\">register_member.js</a> used similar approach to setup the data before running tests. We&#39;d like to extra similar logic as utility methods, which can be used to execute a batch of sqls (for example, inside one file) or single sql against one database (Currently we can not do with multiple databases, due to the limitation of nodejs informix module).</span></p>\n\n<p>With this utility methods we can easily do setup and teardown databases.</p>\n\n<p><u>before, after, before each, after each hooks</u></p>\n\n<p>Utilize <code>before()</code>, <code>after()</code>, <code>beforeEach()</code>, <code>afterEach()</code>&nbsp; to setup the tests more wise. For detail information, please check http://visionmedia.github.io/mocha/</p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Test Directory Restructure and Normalization</span></h3>\n\n<p>We&#39;d like to normalize the directory structure inside <a href=\"https://github.com/cloudspokes/tc-api/blob/master/test\">test</a> directory. Currently, it already gives good starting point, but we&#39;d like revise it as we are making the above changes. Here is the general rules to following</p>\n\n<ol>\n\t<li>All tests should be named like test.[api name].js, so normally, for each api, there should be separated test js files.</li>\n\t<li>All tests from contest winner, should be put directly under test directory.</li>\n\t<li>All reviewers tests should be put under corresponding directory under test directory, like <span class=\"css-truncate css-truncate-target\"><a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/accuracy\" id=\"5d6db9a1dc722586187fc2db530f8388-a107215d06565a781a851de5573da8b935851c3f\" title=\"accuracy\">accuracy</a>, <a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/failure\" id=\"3ee28fe1a60c95b89d29317f122c7021-420d711966add1044306cfaba7036b73d50f95e2\" title=\"failure\">failure</a>, <a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/security\" id=\"e91e6348157868de9dd8b25c81aebfb9-8d796d458ceb76eb46407f9164ed17343d529bf6\" title=\"security\">security</a></span> directory.</li>\n\t<li>All sql files used for tests presetup and teardown should be put under <u>sqls</u> directory, sqls files for accuray, failture, security tests, will be in different directory, directly under the <span class=\"css-truncate css-truncate-target\"><a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/accuracy\" id=\"5d6db9a1dc722586187fc2db530f8388-a107215d06565a781a851de5573da8b935851c3f\" title=\"accuracy\">accuracy</a>, <a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/failure\" id=\"3ee28fe1a60c95b89d29317f122c7021-420d711966add1044306cfaba7036b73d50f95e2\" title=\"failure\">failure</a>, <a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/security\" id=\"e91e6348157868de9dd8b25c81aebfb9-8d796d458ceb76eb46407f9164ed17343d529bf6\" title=\"security\">security</a></span> directory, like accuracy/sqls, failure/sqls etc.</li>\n\t<li>All other test related files will be still put under <u>test_files</u> directory.</li>\n</ol>\n\n<p><span style=\"color:#FF0000;\">If you have better idea and improvement to make the test directory well orginized, please suggest. This can be considered as improvement, reviewers and PMs will consider that.</span></p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Scope </span></h3>\n\n<p>All tests under test directory are in scope. If it tests didn&#39;t pass orignally, you should be responsible to fix that.</p>\n\n<p>The ultimate goal is we can run all tests or single test successfully. like</p>\n\n<p>Run a single test:&nbsp; <u>./node_modules/.bin/mocha ./test/test.tops.js</u></p>\n\n<p>Run all tests: <u>./node_modules/.bin/mocha ./test</u></p>\n\n<p>Following steps&nbsp; to run the tests.</p>\n\n<ol>\n\t<li>setup environment varibales: . deploy/development.sh</li>\n\t<li>start the local server: npm start</li>\n\t<li>run the tests: as above commands.</li>\n</ol>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Tests Creation Guide</span></h3>\n\n<p>Beside the above requirements for current tests normalization and improvement, we&#39;d like you to write a general guide which can be followed to further test creation. It just need to be easy to follow.</p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Testing</span></h3>\n\n<p><span style=\"font-size:12px;\">The API Framework supports tests. </span>Use <a href=\"https://github.com/visionmedia/supertest\">supertest</a> with <a href=\"http://visionmedia.github.io/mocha/\">mocha</a>. Don&#39;t install mocha globally.</p>\n\n<p><span style=\"color:#FF0000;\">you must use mocha BDD style (which is the default), within that, you can optionally use chai.</span></p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Code Format</span></h3>\n\n<p>All code must pass <a href=\"http://www.jslint.com/\">jslint</a>. You may use &quot;nomen: true&quot;.</p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Winner Only</span></h3>\n\n<p>Winner will create pull request against the main github repo in final fix phase and merge the code.</p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color:#FF0000;\">Virutal Machines (VMs)</span></h3>\n\n<p>VM specific information is found here: <span class=\"nobr\"><a href=\"http://www.topcoder.com/wiki/display/docs/VM+Image+2.5\" rel=\"nofollow\">http://www.topcoder.com/wiki/display/docs/VM+Image+2.5</a></span></p>\n\n<p>Upon registration as a submitter or reviewer you will need to request a VM based on the TopCoder systems image. The VM will be active through aggregation review, after which it will be terminated except for the winner&#39;s and the reviewers&#39;. To request your image, please post in contest forum.</p>\n\n<p>Before requesting your VM, you need to ensure that you have an SSH key created and in your member profile. Instructions to do so are here: <span class=\"nobr\"><a href=\"http://www.topcoder.com/wiki/display/projects/Generate+SSH+Key\" rel=\"nofollow\">http://www.topcoder.com/wiki/display/projects/Generate+SSH+Key</a></span>, and instructions to connect afterwards are here: <span class=\"nobr\"><a href=\"http://www.topcoder.com/wiki/display/projects/Connect+Using+SSH+Key\" rel=\"nofollow\">http://www.topcoder.com/wiki/display/projects/Connect+Using+SSH+Key</a></span>.</p>\n\n<p>Please realize that VMs are currently issued manually. We make every attempt to issue the VM as soon as it is requested, however, there may be delays of up to 12 hours depending on time of day when you request. We encourage everyone to request a VM as soon as possible to minimize any such delays.</p>\n\n<h2 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Technology Overview</span></h2>\n\n<ul style=\"font-family: Arial, Helvetica, Verdana, sans-serif; font-size: 12px; line-height: 16px;\">\n\t<li>JavaScript</li>\n\t<li><span class=\"nobr\"><a href=\"http://nodejs.org/\" rel=\"nofollow\">Node.js 0.10.x</a></span></li>\n\t<li><a href=\"https://github.com/evantahler/actionHero\">actionhero.js framework</a></li>\n\t<li><a href=\"https://github.com/visionmedia/supertest\">supertest</a></li>\n\t<li><a href=\"http://visionmedia.github.io/mocha/\">mocha</a></li>\n</ul>\n\n<h2 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Documentation Provided</span></h2>\n\n<p>Please check the deployment guide in codebase for reference.</p>\n",
          "finalSubmissionGuidelines": "<p><strong><span style=\"color:#FF0000;\"><span style=\"line-height: 1.6em;\">Submission Deliverables</span></span></strong></p>\n\n<p><span style=\"font-size:12px;\">A complete list of deliverables can be viewed in the TopCoder Assembly competition Tutorial at: </span><a href=\"http://apps.topcoder.com/wiki/display/tc/Assembly+Competition+Tutorials\">http://apps.topcoder.com/wiki/display/tc/Assembly+Competition+Tutorials</a></p>\n\n<p><span style=\"font-size:12px;\">Below is an overview of the deliverables:</span></p>\n\n<ul>\n\t<li>Source Code.</li>\n\t<li>Deployment guide to configure and verify the application.</li>\n\t<li>General Test Creation Guide</li>\n</ul>\n\n<p><strong><span style=\"color:#FF0000;\"><span style=\"line-height: 1.6em;\">Final Submission </span></span></strong></p>\n\n<p><span style=\"font-size:12px;\">For each member, the final submission should be uploaded to the Online Review Tool.</span></p>\n",
          "screeningScorecardId": "30000412",
          "reviewScorecardId": "30001470",
          "cmcTaskId": "",
          "numberOfCheckpointsPrizes": 0,
          "topCheckPointPrize": "",
          "postingDate": "2013-12-02T09:00:05.000Z",
          "registrationEndDate": "2013-12-04T09:00:21.000Z",
          "checkpointSubmissionEndDate": "-000001-11-30T00:00:00.000Z",
          "submissionEndDate": "2013-12-06T21:20:56.000Z",
          "appealsEndDate": "2013-12-09T07:05:33.000Z",
          "finalFixEndDate": "2013-12-10T08:33:19.000Z",
          "currentPhaseEndDate": "-000001-11-30T00:00:00.000Z",
          "currentStatus": "Completed",
          "currentPhaseName": "",
          "currentPhaseRemainingTime": 0,
          "digitalRunPoints": 360,
          "reliabilityBonus": 160,
          "challengeCommunity": "develop",
          "directUrl": "https://www.topcoder.com/direct/contest/detail.action?projectId=30036437",
          "technology": [
            "Java",
            "MySQL"
          ],
          "prize": [
            800,
            400
          ],
          "registrants": [
            {
              "handle": "Luca",
              "reliability": "0%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-02T09:09:08.000Z"
            },
            {
              "handle": "freegod",
              "reliability": "40%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-02T09:27:46.000Z"
            },
            {
              "handle": "Ghost_141",
              "reliability": "53%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-02T09:31:53.000Z"
            },
            {
              "handle": "Gando19850304",
              "reliability": "0%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-02T09:56:15.000Z"
            },
            {
              "handle": "saarixx",
              "reliability": "0%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-02T10:19:36.000Z"
            },
            {
              "handle": "moulyg",
              "reliability": "30%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-02T10:21:05.000Z"
            },
            {
              "handle": "DanLazar",
              "reliability": "13%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-02T12:09:28.000Z"
            },
            {
              "handle": "Schpotsky",
              "reliability": "100%",
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-02T12:27:50.000Z"
            },
            {
              "handle": "Fantoccini",
              "reliability": "0%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-02T19:21:55.000Z"
            },
            {
              "handle": "Standlove",
              "reliability": "0%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-02T19:50:41.000Z"
            },
            {
              "handle": "brain_cn",
              "reliability": "0%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-02T21:41:37.000Z"
            },
            {
              "handle": "phead",
              "reliability": "0%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-02T21:44:32.000Z"
            },
            {
              "handle": "alfiya_Zi",
              "reliability": "0%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-03T00:49:54.000Z"
            },
            {
              "handle": "sunbinbrother",
              "reliability": "0%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-03T02:13:48.000Z"
            },
            {
              "handle": "muzehyun",
              "reliability": "0%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-03T03:15:31.000Z"
            },
            {
              "handle": "KeSyren",
              "reliability": "13%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-03T05:39:21.000Z"
            },
            {
              "handle": "Sky_",
              "reliability": "100%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-03T06:18:30.000Z"
            },
            {
              "handle": "woodjhon",
              "reliability": "6%",
              "rating": 1234,
              "colorStyle": "color: #DDCC00",
              "registrationDate": "2013-12-03T07:19:29.000Z"
            }
          ],
          "generalCheckpointFeedback": "This is general feedback from all competitors.",
          "submissions": [
            {
              "handle": "Sky_",
              "placement": 1,
              "screeningScore": 100,
              "initialScore": 98.98,
              "finalScore": 99.95,
              "points": 360,
              "submissionStatus": "Active",
              "submissionDate": "2013-12-06T08:12:59.000Z"
            },
            {
              "handle": "Sky_",
              "placement": "",
              "screeningScore": null,
              "initialScore": null,
              "finalScore": null,
              "points": 0,
              "submissionStatus": "Deleted",
              "submissionDate": "2013-12-05T12:22:07.000Z"
            }
          ],
          "Documents": [
            {
               "documentName": "document 1",
               "url": "http://community.topcoder.com/tc?module=DownloadDocument&docid=30400000"
            },
            {
                "documentName": "document 2",
                "url": "http://community.topcoder.com/tc?module=DownloadDocument&docid=30400001"
            },
            {
                "documentName": "document 3",
                "url": "http://community.topcoder.com/tc?module=DownloadDocument&docid=30400002"
            }
          ],
          "numberOfRegistrants": 18,
          "numberOfSubmissions": 2,
          "platforms": [
              "AWS",
              "Cloud Foundry"
          ],
          "phases": [
            {
                "type": "Registration",
                "status": "Open",
                "scheduledStartTime": "2013-12-05T12:22:07.000Z",
                "actualStartTime": "2013-12-05T12:22:07.000Z",
                "scheduledEndTime": "2013-12-05T12:22:07.000Z",
                "actualEndTime": null
            },
            {
                "type": "Submission",
                "status": "Scheduled",
                "scheduledStartTime": "2013-12-05T12:22:07.000Z",
                "actualStartTime": null,
                "scheduledEndTime": "2013-12-05T12:22:07.000Z",
                "actualEndTime": null
            }
         ],
         "event": {
             "id": 3437,
             "description": "TCO"
         }
        }

+ Response 200 (application/json)

        {
            "challengeType": "First2Finish",
            "challengeName": "this is a F2F challenge",
            "challengeId": 30500000,
            "projectId": 30400001,
            "screeningScorecardId": "3",
            "reviewScorecardId": "1",
            "cmcTaskId": "ab",
            "numberOfCheckpointsPrizes": 0,
            "topCheckPointPrize": "",
            "currentStatus": "Active",
            "currentPhaseName": "Submission",
            "digitalRunPoints": 510,
            "reliabilityBonus": 200,
            "challengeCommunity": "develop",
            "directUrl": "https://www.topcoder.com/direct/contest/detail.action?projectId=30500000",
            "technology": ["Java", "MySQL"],
            "prize": [
            1000
            ],
            "registrants": [
            {
                "handle": "heffan",
                "reliability": "100%",
                "rating": 1800,
                "colorStyle": "color: #DDCC00"
            }
            ],
            "submissions": [
            {
                "handle": "heffan",
                "placement": 1,
                "screeningScore": 100,
                "initialScore": 80,
                "finalScore": 90,
                "points": 510,
                "submissionStatus": "Active"
            }
            ],
            "Documents": [
            {
                "documentName": "document 1",
                "url": "http://community.topcoder.com/tc?module=DownloadDocument&docid=30500000"
            },
            {
                "documentName": "document 2",
                "url": "http://community.topcoder.com/tc?module=DownloadDocument&docid=30500001"
            }
            ],
            "numberOfSubmissions": 1,
            "numberOfRegistrants": 1,
            "platforms": [
                "AWS",
                "Cloud Foundry"
            ],
            "phases": [
            {
                "type": "Registration",
                "status": "Closed",
                "scheduledStartTime": "2013-12-20T00:00:00.000Z",
                "actualStartTime": "2013-12-20T01:40:00.000Z",
                "scheduledEndTime": "2013-12-22T00:00:00.000Z",
                "actualendTime": "2013-12-22T00:00:00.000Z"
            },
            {
                "type": "Submission",
                "status": "Open",
                "scheduledStartTime": "2013-12-20T00:00:00.000Z",
                "actualStartTime": "2013-12-20T00:00:00.000Z",
                "scheduledEndTime": "2013-12-26T00:00:00.000Z"
            },
            {
                "type": "Iterative Review",
                "status": "Scheduled",
                "scheduledStartTime": "2013-12-26T12:00:00.000Z",
                "scheduledEndTime": "2014-01-01T12:00:00.000Z"
            }
            ],
            "event": {
                "id": 3437,
                "description": "TCO"
            }
        }
+ Response 200 (application/json)

        {
            "challengeType": "Copilot Posting",
            "challengeName": "this is a Copilot post challenge",
            "challengeId": 32500000,
            "projectId": 30400001,
            "detailedRequirements": "detailed requirement content",
            "finalSubmissionGuidelines": "final submission guideline content",
            "cmcTaskId": "ab",
            "numberOfCheckpointsPrizes": 0,
            "topCheckPointPrize": "",
            "copilotDetailedRequirements": "copilot private_description_text",
            "currentStatus": "Active",
            "currentPhaseName": "Submission",
            "digitalRunPoints": 510,
            "reliabilityBonus": 200,
            "challengeCommunity": "develop",
            "directUrl": "https://www.topcoder.com/direct/contest/detail.action?projectId=32500000",
            "technology": ["Java", "MySQL"],
            "prize": [
                1000
            ],
            "numberOfRegistrants": 1,
            "registrants": [
                {
                    "handle": "heffan",
                    "reliability": "100%"
                }
            ],
            "submissions": [
                {
                    "handle": "heffan",
                    "placement": 1,
                    "screeningScore": 100,
                    "initialScore": 80,
                    "finalScore": 90,
                    "points": 510,
                    "submissionStatus": "Active"
                }
            ],
            "Documents": [
                {
                    "documentName": "document 1",
                    "url": "http://community.topcoder.com/tc?module=DownloadDocument&docid=30500000"
                },
                {
                    "documentName": "document 3",
                    "url": "http://community.topcoder.com/tc?module=DownloadDocument&docid=32500000"
                },
                {
                    "documentName": "document 4",
                    "url": "http://community.topcoder.com/tc?module=DownloadDocument&docid=32500001"
                },
                {
                    "documentName": "document 2",
                    "url": "http://community.topcoder.com/tc?module=DownloadDocument&docid=30500001"
                }
            ],
            "numberOfSubmissions": 1,
            "platforms": [
                "AWS",
                "Cloud Foundry"
            ],
            "phases": [
             {
               "type": "Registration",
               "status": "Closed",
               "scheduledStartTime": "2013-12-20T00:00:00.000Z",
               "actualStartTime": "2013-12-20T01:40:00.000Z",
               "scheduledEndTime": "2013-12-22T00:00:00.000Z",
               "actualendTime": "2013-12-22T00:00:00.000Z"
             },
             {
               "type": "Submission",
               "status": "Open",
               "scheduledStartTime": "2013-12-20T00:00:00.000Z",
               "actualStartTime": "2013-12-20T00:00:00.000Z",
               "scheduledEndTime": "2013-12-26T00:00:00.000Z"
             }
           ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Get Software Challenge Result [/develop/challenges/result/{challengeId}]
### Get Software Challenge Result [GET]

+ Parameters
    + challengeId (required, number, `30000000`) ... The challenge id.

+ Response 200 (application/json)

        {
          "challengeType": "Assembly Competition",
          "challengeName": "Module Assembly - TopCoder NodeJS API Tests Improvement and Normalization",
          "challengeId": 30036437,
          "postingDate": "2013-12-02T09:00:05.000Z",
          "challengeEndDate": "2013-12-10T08:33:19.000Z",
          "challengeCommunity": "develop",
          "registrants": 2,
          "submissions": 2,
          "submissionsPercentage": 100.0,
          "submissionsPassedScreening": 100.0,
          "averageInitialScore": 75.93,
          "averageFinalScore": 75.93
          "results":
          [
            {
                "handle": "iRabbit",
                "registrationDate": "2013-12-03T09:00:05.000Z",
                "submissionDate": "2013-12-04T09:00:05.000Z",
                "placement": 1,
                "screeningScore": 100,
                "initialScore": 98.98,
                "finalScore": 99.95,
                "points": 360,
                "submissionDownloadLink": "https://software.topcoder.com/review/actions/DownloadContestSubmission.do?method=downloadContestSubmission&uid=123456"
            },
            {
                "handle": "heffan",
                "registrationDate": "2013-12-03T09:00:05.000Z",
                "submissionDate": "2013-12-05T09:00:05.000Z",
                "placement": 2,
                "screeningScore": 100,
                "initialScore": 97.98,
                "finalScore": 97.95,
                "points": 140,
                "submissionDownloadLink": "https://software.topcoder.com/review/actions/DownloadContestSubmission.do?method=downloadContestSubmission&uid=123457"
            }
          ],
          "finalFixes":
          [
            "https://software.topcoder.com/review/actions/DownloadContestSubmission.do?method=downloadContestSubmission&uid=123466",
            "https://software.topcoder.com/review/actions/DownloadContestSubmission.do?method=downloadContestSubmission&uid=123476",
            "https://software.topcoder.com/review/actions/DownloadContestSubmission.do?method=downloadContestSubmission&uid=123486"
          ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Get Software Challenge Checkpoint Detail [/develop/challenges/checkpoint/{challengeid}]
### Get Software Challenge Checkpoint Detail [GET]

+ Parameters
    + challengeid (required, number, `30000000`) ... The submission id.

+ Response 200 (application/json)

        {
          "checkpointResults": [
            {
                "id": 10134,
                "feedback": "nice design"
            },
            {
                "id": 10135,
                "feedback": "nice design"
            },
            {
                "id": 10136,
                "feedback": "nice design"
            },
            {
                "id": 10137,
                "feedback": "nice design"
            },
            {
                "id": 10138,
                "feedback": "nice design"
            }
          ],
          "general feedback": "good submissions"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Software Challenge Upload Submission [/develop/challenges/{challengeid}/submit]
### Upload a submission by using base64 encoding[POST]
+ Request (application/json)

+ Parameters
    + challengeid (required, number, `30000000`) ... The challenge id.
    + fileName (required, string, `abcd.zip`) ... The name of the file that is being uploaded
    + fileData (required, string, `SGVsbG8gV29ybGQ=`) ... The Base64 encoded content of the file being uploaded. The example value is 'Hello World' base64 encoded
    + type (optional, string, `checkpoint`) ... The type of submission. Can be 'final' or 'checkpoint'. If absent, 'final' is assumed.

+ Response 200 (application/json)

        {
            "submissionId": 10000164,
            "uploadId": 10000163
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Authentication credentials were missing or incorrect."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"The request is understood, but it has been refused or access is not allowed."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 413 (application/json)

        {
            "name":"Request Too Large",
            "value":"413",
            "description":"The request is understood, but is larger than the server is willing or able to process."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Software Challenge Upload Submission [/develop/challenges/{challengeid}/upload]
### Upload a submission by using direct file upload[POST]
+ Request (application/json)

+ Parameters
    + challengeid (required, number, `30000000`) ... The challenge id.
    + submissionFile (required, string, `abcd.zip`) ... The submission zip
    + type (optional, string, `checkpoint`) ... The type of submission. Can be 'final' or 'checkpoint'. If absent, 'final' is assumed.

+ Response 200 (application/json)

        {
            "submissionId": 10000164,
            "uploadId": 10000163
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Authentication credentials were missing or incorrect."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"The request is understood, but it has been refused or access is not allowed."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 413 (application/json)

        {
            "name":"Request Too Large",
            "value":"413",
            "description":"The request is understood, but is larger than the server is willing or able to process."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Design Challenge Upload Submission [/design/challenges/{challlengeId}/submit]
### Upload a submission [POST]
+ Request (application/json)

+ Parameters
    + challlengeId (required, integer, 545464) ... The challenge id
    + submissionFile (required, string, `abcd.zip`) ... The submission zip
    + sourceFile (required, string, `efgh.zip`) ... The source zip
    + previewFile (required, string, `hijk.png`) ... The preview image file
    + type (optional, string, `checkpoint`) ... The type of submission. Can be 'submission' or 'checkpoint'. If absent, 'submission' is assumed.
    + fonts (optional, string, `fs1||fs2||fs3`) ... Double pipe separated font sources
    + fontNames (optional, string, `fn1||fn2||fn3`) ... Double pipe separated font names
    + fontUrls (optional, string, `google.com||yahoo.com||grephouse.com`) ... Double pipe separated font urls
    + stockArtNames (optional, string, `sa1||sa2||sa3`) ... Double pipe separated stock art names
    + stockArtFileNumbers (optional, string, `fn1||fn2||fn3`) ... Double pipe separated stock art file numbers
    + stockArtUrls (optional, string, `google.com||yahoo.com||grephouse.com`) ... Double pipe separated font urls
    + rank (optional, integer, 2) ... The rank of a submission
    + comment (optional, string, `a comment`) ... optional comment

+ Response 200 (application/json)

        {
            "submissionId": 10000164,
            "uploadId": 10000163
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Authentication credentials were missing or incorrect."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"The request is understood, but it has been refused or access is not allowed."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Top Ranked Members [/develop/statistics/tops/{contestType}?pageIndex={pageIndex}&pageSize={pageSize}]
### Top Ranked Members [GET]

+ Parameters
    + contestType (required, string, `design`) ... Contest Type, support "design", "development", "conceptualization", "specification", "architecture", "assembly", "test_suites", "test_scenarios", "ui_prototype", "ria_build", "content_creation"
    + pageIndex (optional, number, `1`) ... The paging number, 1-based, -1 if no paging. It can be null. Default 1.
    + pageSize (optional, number, `50`) ... The max number of the results, should be set if pageIndex is set. Default 50.

+ Response 200 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 3,
            "data":
            [
                {
                    "rank": 1,
                    "handle": "Petr",
                    "userId": 123457899,
                    "color": "Red",
                    "rating": 3000
                },
                {
                    "rank": 2,
                    "handle": "ACRush",
                    "userId": 123457891,
                    "color": "Red",
                    "rating": 2500
                },
                {
                    "rank": 3,
                    "handle": "lympanda",
                    "userId": 123457892,
                    "color": "Yellow",
                    "rating": 2000
                }
            ]
        }


+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }


# Group Studio Challenges

## Search Active Studio Challenges [/challenges/active?pageSize={pageSize}&pageIndex={pageIndex}&sortColumn={sortColumn}&sortOrder={sortOrder}&communityId={communityId}&submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}]
### Search Active Studio Challenges [GET]

+ Parameters
    + pageIndex (optional, number, `1`) ... The paging number, 1-based, -1 if no paging. It can be null.
    + pageSize (optional, number, `50`) ... The max number of the results, should be set if pageIndex is set.
    + sortColumn (optional, string, `challengeName`) ... The column name to sort, can be null.
    + sortOrder (optional, string, `asc`) ... The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'.
    + communityId (optional, number, `1`) ... The community id.
    + submissionEndFrom (optional, string, `2014-03-01`) ... submission end date from value.
    + submissionEndTo (optional, string, `2014-03-15`) ... submission end date to value.

+ Response 200 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 2,
            "data":
            [
                {
                    "challengeType": "Web Design",
                    "challengeName": "Cornell - Responsive Storyboard Economics Department Site Redesign Contest",
                    "challengeId": 30036096,
                    "projectId": 6789,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationStartDate": "10.27.2013 10:10 EDT",
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "currentPhaseEndDate": "10.31.2013 10:10 EDT",
                    "currentPhaseRemainingTime": 500,
                    "currentStatus": "Active",
                    "currentPhaseName": "Submission",
                    "challengeCommunity": "Develop",
                    "firstPlaceprize": 1250,
                    "totalPrize": 1800,
                    "totalCheckpointPrize": 400,
                    "reliabilityBonus": 0,
                    "digitalRunPoints": 500,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "postingDate": "10.31.2013 10:10 EDT"
                },
                {
                    "challengeType": "Web Design",
                    "challengeName": "Cornell - Responsive Storyboard Economics Department Site Redesign Contest",
                    "challengeId": 30036096,
                    "projectId": 6789,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationStartDate": "10.27.2013 10:10 EDT",
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "currentPhaseEndDate": "10.31.2013 10:10 EDT",
                    "currentPhaseRemainingTime": 500,
                    "currentStatus": "Active",
                    "currentPhaseName": "Submission",
                    "challengeCommunity": "Develop",
                    "firstPlaceprize": 1250,
                    "totalPrize": 1800,
                    "totalCheckpointPrize": 400,
                    "reliabilityBonus": 0,
                    "digitalRunPoints": 500,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "topCheckPointPrize": 200,
                    "postingDate": "10.31.2013 10:10 EDT"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 406 (application/json)

        {
            "name":"Not Acceptable",
            "value":"406",
            "description":"This message will explain why the Search parameters are invalid."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Search Open Studio Challenges [/challenges/open?pageSize={pageSize}&pageIndex={pageIndex}&sortColumn={sortColumn}&sortOrder={sortOrder}&communityId={communityId}&submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}]
### Search Open Studio Challenges [GET]

+ Parameters
    + pageIndex (optional, number, `1`) ... The paging number, 1-based, -1 if no paging. It can be null.
    + pageSize (optional, number, `50`) ... The max number of the results, should be set if pageIndex is set.
    + sortColumn (optional, string, `challengeName`) ... The column name to sort, can be null.
    + sortOrder (optional, string, `asc`) ... The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'.
    + communityId (optional, number, `1`) ... The community id.
    + submissionEndFrom (optional, string, `2014-03-01`) ... submission end date from value.
    + submissionEndTo (optional, string, `2014-03-15`) ... submission end date to value.

+ Response 200 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 2,
            "data":
            [
                {
                    "challengeType": "Web Design",
                    "challengeName": "Cornell - Responsive Storyboard Economics Department Site Redesign Contest",
                    "challengeId": 30036096,
                    "projectId": 6789,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationStartDate": "10.27.2013 10:10 EDT",
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "currentPhaseEndDate": "10.31.2013 10:10 EDT",
                    "currentPhaseRemainingTime": 500,
                    "currentStatus": "Active",
                    "currentPhaseName": "Submission",
                    "challengeCommunity": "Develop",
                    "firstPlaceprize": 1250,
                    "totalPrize": 1800,
                    "totalCheckpointPrize": 400,
                    "reliabilityBonus": 0,
                    "digitalRunPoints": 500,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "postingDate": "10.31.2013 10:10 EDT"
                },
                {
                    "challengeType": "Web Design",
                    "challengeName": "Cornell - Responsive Storyboard Economics Department Site Redesign Contest",
                    "challengeId": 30036096,
                    "projectId": 6789,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationStartDate": "10.27.2013 10:10 EDT",
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "currentPhaseEndDate": "10.31.2013 10:10 EDT",
                    "currentPhaseRemainingTime": 500,
                    "currentStatus": "Active",
                    "currentPhaseName": "Submission",
                    "challengeCommunity": "Develop",
                    "firstPlaceprize": 1250,
                    "totalPrize": 1800,
                    "totalCheckpointPrize": 400,
                    "reliabilityBonus": 0,
                    "digitalRunPoints": 500,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "topCheckPointPrize": 200,
                    "postingDate": "10.31.2013 10:10 EDT"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 406 (application/json)

        {
            "name":"Not Acceptable",
            "value":"406",
            "description":"This message will explain why the Search parameters are invalid."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Search Past Studio Challenges [/challenges/past?pageSize={pageSize}&pageIndex={pageIndex}&sortColumn={sortColumn}&sortOrder={sortOrder}&communityId={communityId}&submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}]
### Search Past Studio Challenges [GET]

+ Parameters
    + pageIndex (optional, number, `1`) ... The paging number, 1-based, -1 if no paging. It can be null.
    + pageSize (optional, number, `50`) ... The max number of the results, should be set if pageIndex is set.
    + sortColumn (optional, string, `challengeName`) ... The column name to sort, can be null.
    + sortOrder (optional, string, `asc`) ... The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'.
    + communityId (optional, number, `1`) ... The community id.
    + submissionEndFrom (optional, string, `2014-03-01`) ... submission end date from value.
    + submissionEndTo (optional, string, `2014-03-15`) ... submission end date to value.

+ Response 200 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 2,
            "data":
            [
                {
                    "challengeType": "Web Design",
                    "challengeName": "Cornell - Responsive Storyboard Economics Department Site Redesign Contest",
                    "challengeId": 30036096,
                    "projectId": 6789,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationStartDate": "10.27.2013 10:10 EDT",
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "challengeCommunity": "Develop",
                    "firstPlaceprize": 1250,
                    "totalPrize": 1800,
                    "totalCheckpointPrize": 400,
                    "reliabilityBonus": 0,
                    "digitalRunPoints": 500,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "postingDate": "10.31.2013 10:10 EDT"
                },
                {
                    "challengeType": "Web Design",
                    "challengeName": "Cornell - Responsive Storyboard Economics Department Site Redesign Contest",
                    "challengeId": 30036096,
                    "projectId": 6789,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationStartDate": "10.27.2013 10:10 EDT",
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "challengeCommunity": "Develop",
                    "firstPlaceprize": 1250,
                    "totalPrize": 1800,
                    "totalCheckpointPrize": 400,
                    "reliabilityBonus": 0,
                    "digitalRunPoints": 500,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "topCheckPointPrize": 200,
                    "postingDate": "10.31.2013 10:10 EDT"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 406 (application/json)

        {
            "name":"Not Acceptable",
            "value":"406",
            "description":"This message will explain why the Search parameters are invalid."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Search Upcoming Studio Challenges [/challenges/upcoming?pageSize={pageSize}&pageIndex={pageIndex}&sortColumn={sortColumn}&sortOrder={sortOrder}&communityId={communityId}&submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}]
### Search Upcoming Studio Challenges [GET]

+ Parameters
    + pageIndex (optional, number, `1`) ... The paging number, 1-based, -1 if no paging. It can be null.
    + pageSize (optional, number, `50`) ... The max number of the results, should be set if pageIndex is set.
    + sortColumn (optional, string, `challengeName`) ... The column name to sort, can be null.
    + sortOrder (optional, string, `asc`) ... The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'.
    + communityId (optional, number, `1`) ... The community id.
    + submissionEndFrom (optional, string, `2014-03-01`) ... submission end date from value.
    + submissionEndTo (optional, string, `2014-03-15`) ... submission end date to value.

+ Response 200 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 2,
            "data":
            [
                {
                    "challengeType": "Web Design",
                    "challengeName": "Cornell - Responsive Storyboard Economics Department Site Redesign Contest",
                    "challengeId": 30036096,
                    "projectId": 6789,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationStartDate": "10.27.2013 10:10 EDT",
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "challengeCommunity": "Develop",
                    "firstPlaceprize": 1250,
                    "totalPrize": 1800,
                    "totalCheckpointPrize": 400,
                    "reliabilityBonus": 0,
                    "digitalRunPoints": 500,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "postingDate": "10.31.2013 10:10 EDT"
                },
                {
                    "challengeType": "Web Design",
                    "challengeName": "Cornell - Responsive Storyboard Economics Department Site Redesign Contest",
                    "challengeId": 30036096,
                    "projectId": 6789,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationStartDate": "10.27.2013 10:10 EDT",
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "challengeCommunity": "Develop",
                    "firstPlaceprize": 1250,
                    "totalPrize": 1800,
                    "totalCheckpointPrize": 400,
                    "reliabilityBonus": 0,
                    "digitalRunPoints": 500,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "topCheckPointPrize": 200,
                    "postingDate": "10.31.2013 10:10 EDT"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 406 (application/json)

        {
            "name":"Not Acceptable",
            "value":"406",
            "description":"This message will explain why the Search parameters are invalid."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Get Studio Challenge Detail [/challenges/{challengeId}]
### Get Studio Challenge Detail [GET]

+ Parameters
    + challengeId (required, number, `30000000`) ... The challenge id.

+ Response 200 (application/json)

        {
          "challengeType": "Web Design",
          "challengeName": "CS-TC Help Center Storyboard Design Contest",
          "challengeId": 30036283,
          "projectId": 6847,
          "forumId": "4076",
          "introduction": "This is the overview. It can contain HTML.",
          "round1Introduction": "Round 1 Intro",
          "round2Introduction": "Round 2 Intro",
          "roundOneDetails": "Description for round 1.",
          "roundTwoDetails": "Description for round 2.",
          "detailedRequirements": "<p><span style=\"font-family:arial,helvetica,sans-serif;\"><span style=\"font-size:12px;\">The main aim of this contest is to come up designs for the New CS-TC Help-Center, this<span style=\"color: rgb(33, 33, 33); line-height: 18px;\">&nbsp;large help-center which will cover help information for all sections which includes Design, Software, Data/Algorithms, Copilots/Reviewers, and </span></span></span><span style=\"font-size: 13px;\">TopCoder Universi</span><span style=\"font-size: 13px;\">ty</span><span style=\"font-family:arial,helvetica,sans-serif;\"><span style=\"font-size:12px;\"><span style=\"color: rgb(33, 33, 33); line-height: 18px;\">.&nbsp;</span><span style=\"color: rgb(33, 33, 33); line-height: 18px;\">The Help Center will have its own wordpress theme and wordpress &quot;site&quot;.</span><br />\n<br />\n<span style=\"color: rgb(33, 33, 33); line-height: 18px;\">We recently ran a few design contests to create new site design for the TopCoder-Cloudspokes Community, in this contest - you will reuse many of the design elements to help us build a consistent design.</span><br />\n<br />\n<span style=\"color:#FF0000;\"><span style=\"line-height: 18px;\"><strong>IMPORTANT!! Design Considerations:</strong></span></span><br />\n<span style=\"color: rgb(33, 33, 33); line-height: 18px;\">- Please</span><span style=\"color: rgb(33, 33, 33); line-height: 18px;\">&nbsp;use&nbsp;the global header and navigation at the top and a global footer at the bottom from the attached storyboards<br />\n- Follow the color scheme as shown in the attached designs.<br />\n- Create icons whereever necessary, follow the design aesthetics from the attached designs.<br />\n- Continue the FLAT&nbsp;design trend shown in the New Designs<br />\n- You may reuse any designs from the attached Storyboards.</span><br />\n<span style=\"color:#FF0000;\"><span style=\"line-height: 18px;\">- We are looking for your help in&nbsp;designing the desktop view (1024 x 768) and mobile view (320 x 480)</span></span></span></span></p>\n\n<p><span style=\"color:#0066cc;\"><strong>General Requirements:&nbsp;</strong></span><br />\nBelow are some of the areas, where we would like to&nbsp;see your&nbsp;creativity by coming&nbsp;up with an out of the box solutions&hellip;</p>\n\n<p><strong>Navigation:&nbsp;</strong><br />\n- It will show &quot;Sections &gt; Topics &gt; Sub-Topics&quot;, please see the attached excel file to get an idea on what a section, topic could be.<br />\n<span style=\"font-size: 13px;\">- We would like the navigation for this help-center to be in a sidebar like shown in the wireframe</span><br />\n- We need consistent icons for each of the section, they are&nbsp;&quot;Design, Development, Data/Algorithms, Copilots/Reviewers and TopCoder University&quot;<br />\n<span style=\"color:#FF0000;\">- Please reuse the icons for Design, Development and Data/Algorithms from the attached designs</span><br />\n- Design the icons for Copilots/Reviewers and TopCoder University.<br />\n- Based on the wireframe, we are planning to show a smaller version of these section icons in the left side&nbsp;collpased view i.e. when a section is selected and a medium size above the Topics/Sub-topics list with the name of the section.<br />\n- Create the hover and selected styles for all these navigation links (Section, Topics, Sub-topics).<br />\n- Probably we will need a scroll bar to be&nbsp;shown in the Topics/Sub-topics navigation like shown in the wireframe - as this list could be long.<br />\n- You also need to think on how these should be planned for a mobile view?</p>\n\n<p><strong>Breadcrumbs:</strong><br />\n- Please show breadcrumbs in your designs, follow the wireframes for this.<br />\n- Please create the hover and selected style for this</p>\n\n<p><strong>Search:</strong><br />\n- We will need a prominent location for the search bar like shown in the wireframe.<br />\n- Search bar will shown in all pages within the help-center.<br />\n- Design this search bar, create search icon&nbsp;if needed.<br />\n<span style=\"font-family: Arial, Helvetica, Verdana, sans-serif; line-height: 16px;\">- Please place the following words inside the search bar: &quot;Search Help Center&quot;.</span><br />\n- Also, show your designs for the auto-suggest drop-down. (i.e. as a user types the text, they need to see matching topics in a drop-down).<br />\n<br />\n<span style=\"line-height: 1.6em;\"><strong>Support:&nbsp;</strong></span><br />\n<span style=\"line-height: 1.6em;\">- We need an Email Support link shown on all pages, like shown in the wireframe<br />\n-&nbsp;</span><span style=\"font-family: Arial, Helvetica, Verdana, sans-serif; line-height: 16px;\">Please use the following words for the support email area: &quot;Email Support Team&quot;.</span><br />\n<span style=\"line-height: 1.6em;\">- Please come up with better designs for this.</span></p>\n\n<p><span style=\"font-family:arial,helvetica,sans-serif;\"><span style=\"font-size:12px;\"><span style=\"color:#0066cc;\"><span style=\"line-height: 18px;\"><strong>Page Requirements</strong></span></span><br />\n<span style=\"color:#000000;\"><span style=\"line-height: 18px;\">Below&nbsp;are the required pages from the wireframe...</span></span></span></span><br />\n<br />\n<strong>Help Center Home:</strong><br />\nThis is main page in the help-center, it will be a gateway for the user to proceed to other sections of the help-center<br />\n- This page will play a very important role in the help-center.&nbsp;<br />\n- Please reduce the height of the slideshow a bit.<br />\n<span style=\"color:#000000;\">- We will have the colored bars with the icon and name of the section at the bottom of the slideshow - clicking on these will show the corresponding slide.&nbsp;<br />\n- Colored bars shown at the bottom of the slideshow&nbsp;need to have a Hover and Active styles<br />\n- FAQs will be a static area&nbsp;shown on the right side.</span><br />\n- Click on the &quot;More&quot; in &#39;Member Tips&quot; shown at the bottom, please design the member tips view.<br />\n- Please follow the wireframe for contents to be shown in this page.<br />\n<br />\n<strong>Section:</strong><br />\n<span style=\"color: rgb(33, 33, 33); font-family: arial, helvetica, sans-serif; line-height: 18px;\">This New Help Center would contain mainly five sections to start with; they are Design, Development, Data/Algorithms, Copilots/Reviewers, and </span><span style=\"font-size: 13px;\">TopCoder Universi</span><span style=\"font-size: 13px;\">ty</span><span style=\"color: rgb(33, 33, 33); font-family: arial, helvetica, sans-serif; line-height: 18px;\">.</span><br />\n<span style=\"color: rgb(33, 33, 33); font-family: arial, helvetica, sans-serif; line-height: 19.1875px;\">- You can reach the section landing page simply by clicking on the any of the section shown in the left.</span><br />\n<span style=\"color: rgb(33, 33, 33); font-family: arial, helvetica, sans-serif; font-size: 13px; line-height: 19.1875px;\">- These sections would have their own landing page, follow the contents from the wireframe.</span><br />\n<span style=\"color: rgb(33, 33, 33); font-family: arial, helvetica, sans-serif; line-height: 19.1875px;\">- This page has a banner at the top, you may use a placeholder for it.<br />\n- This page shows contents in Grid and List view, please reuse the grid/list buttons from the attached designs.<br />\n- Please show your designs for grid and list views<br />\n<br />\n<strong>Topics:</strong><br />\n- Click on a &quot;Topic Name&quot; (example: In studio section, topics names are Competition Types, Tournaments etc..)&nbsp;from the left-side navigation to reach this page.<br />\n- This page shows Topic Summary at the top, since this will be consistent in all topic landing pages, please create a style to show the summary.<br />\n- Below the topic summary, we will list all the Sub-topics within that topic.<br />\n- Please remove the &quot;thumb image, username and date&quot; - its not required, just the sub-topic title and a few lines from it should be fine.<br />\n<br />\n<strong>Sub-Topics:</strong><br />\n- In the wireframe, from the topic landing page, click on any of the listed sub-topics to view the sub-topic page.</span><br />\n<span style=\"color: rgb(33, 33, 33); font-family: arial, helvetica, sans-serif; line-height: 18px;\">- These are the exact pages where a user would see the help information in the form of Articles, Videos, and Tutorials/Walkthroughs etc&hellip;<br />\n- Follow the wireframe for the contents<br />\n- These would contain &#39;Title&#39; and followed by &quot;Table of Contents&quot; at the top, these table of contents will mostly be used for the help contents in Software section - please come up with a design that highlishts these table of contents.<br />\n- At the bottom, we will have two columns 1)&nbsp;&quot;Related&quot; which will have a few links and 2) Resources - which will show few documents and a video thumbnail. How should these be shown?<br />\n<br />\n<strong>Search Results:</strong></span><br />\n<span style=\"color: rgb(33, 33, 33); font-family: arial, helvetica, sans-serif; line-height: 19.1875px;\">As mentioned earlier, a search bar is expected to be in all pages:<br />\n- Click on the magnifier icon in the search bar to see the results<br />\n- The top buttons shown in the search results are filters, how should these be shown in your designs?<br />\n- Follow the contents from the wireframe.</span></p>\n\n<p><span style=\"font-family:arial,helvetica,sans-serif;\"><span style=\"font-size:12px;\"><span style=\"color:#0066cc;\"><strong>Branding Guidelines</strong></span><br />\n- Please use the logo from the attached storyboard designs<br />\n- Please follow the colors from the attached designs.<br />\n- Please continue to use the Flat design concept&nbsp;</span></span></p>\n\n<p><span style=\"font-family:arial,helvetica,sans-serif;\"><span style=\"font-size:12px;\"><strong><span style=\"color:#0066cc;\">Target User</span></strong><br />\n<span style=\"color: rgb(33, 33, 33); line-height: 19.1875px;\">-Members, Copilots, Reviewers, Customers and CS-TC Admins</span></span></span></p>\n\n<p><span style=\"font-family:arial,helvetica,sans-serif;\"><span style=\"font-size:12px;\"><span style=\"color:#0066cc;\"><strong>Judging Criteria</strong></span><br />\n- How well you create your designs based on the wireframes.<br />\n- Cleanliness of your graphics and design.<br />\n- Design looks and User Experience.</span></span></p>\n\n<p><span style=\"font-family:arial,helvetica,sans-serif;\"><span style=\"font-size:12px;\"><span style=\"color:#0066cc;\"><strong>Submission &amp; Source Files</strong></span><br />\n<strong>Preview Image</strong><br />\nPlease create your preview image as one (1) 1024x1024px JPG or PNG file in RGB color mode at 72dpi and place a screenshot of your submission within it.</span></span></p>\n\n<p><span style=\"font-family:arial,helvetica,sans-serif;\"><span style=\"font-size:12px;\"><strong>Submission File</strong><br />\nSubmit JPG/PNG for your submission files.</span></span></p>\n\n<p><span style=\"font-family:arial,helvetica,sans-serif;\"><span style=\"font-size:12px;\"><strong>Source Files</strong><br />\nAll original source files of the submitted design. Files should be created in Adobe Photoshop and saved as layered PSD file.</span></span></p>\n\n<p><span style=\"font-family:arial,helvetica,sans-serif;\"><span style=\"font-size:12px;\"><strong>Final Fixes</strong><br />\nAs part of the final fixes phase you may be asked to modify your graphics (sizes or colors) or modify overall colors. We may ask you to update your design or graphics based on other winning placements.</span></span></p>\n",
          "screeningScorecardId": "30001363",
          "reviewScorecardId": "30001031",
          "cmcTaskId": "",
          "numberOfCheckpointsPrizes": 5,
          "topCheckPointPrize": "100",
          "postingDate": "2013-11-20T22:36:15.000Z",
          "registrationEndDate": "2013-11-27T06:54:05.000Z",
          "checkpointSubmissionEndDate": "2013-11-25T06:30:16.000Z",
          "submissionEndDate": "2013-11-27T06:54:09.000Z",
          "appealsEndDate": "2013-11-27T23:44:18.000Z",
          "finalFixEndDate": "2013-11-27T23:44:18.000Z",
          "submissionLimit": "3",
          "sourceFileTypes": [
            {
                "extension": "psd",
                "description": "Adobe Photoshop"
            },
            {
                "extension": "ai",
                "description": "Adobe Illustrator"
            }
          ],
          "submissionsViewable": "true",
          "downloads": [
            {
                "docId": 12345678,
                "name": "design_guide.pdf",
                "description": "Standard Design Guide"
            },
            {
                "docId": 87654321,
                "name": "sample.doc",
                "description": "Sample of what we want."
            }
          ],
          "currentPhaseEndDate": "-000001-11-30T00:00:00.000Z",
          "currentStatus": "Completed",
          "currentPhaseName": "",
          "currentPhaseRemainingTime": 0,
          "digitalRunPoints": 625,
          "challengeCommunity": "design",
          "directUrl": "https://www.topcoder.com/direct/contest/detail.action?projectId=30036283",
          "prize": [
            1500,
            500
          ],
          "generalCheckpointFeedback": "This is general feedback from all competitors.",
          "checkpoints": [
            {
              "submissionId": 162433,
              "submitter": "t3uku",
              "submissionTime": "2013-11-24T11:36:23.000Z",
              "feedback": "This is the checkpoint feedback.",
              "totalImages": 18
            },
            {
              "submissionId": 162470,
              "submitter": "CoralBlue",
              "submissionTime": "2013-11-25T06:24:16.000Z",
              "feedback": "This is the checkpoint feedback.",
              "totalImages": 18
            },
            {
              "submissionId": 162464,
              "submitter": "thinkcreeper",
              "submissionTime": "2013-11-25T02:36:01.000Z",
              "feedback": "This is the checkpoint feedback.",
              "totalImages": 18
            }
          ],
          "submissions": [
            {
              "submissionId": 162533,
              "submitter": "t3uku",
              "submissionTime": "2013-11-26T22:14:01.000Z",
              "totalImages": 18
            },
            {
              "submissionId": 162559,
              "submitter": "CoralBlue",
              "submissionTime": "2013-11-27T06:46:15.000Z",
              "totalImages": 18
            },
            {
              "submissionId": 162555,
              "submitter": "thinkcreeper",
              "submissionTime": "2013-11-27T05:11:19.000Z",
              "totalImages": 18
            }
          ],
          "winners": [
            {
              "submissionId": 162555,
              "submitter": "thinkcreeper",
              "submissionTime": "2013-11-27T05:11:19.000Z",
              "totalImages": 18,
              "placement": 1,
              "prize": "1500"
            },
            {
              "submissionId": 162111,
              "submitter": "iamtong",
              "submissionTime": "2013-11-26T05:11:19.000Z",
              "totalImages": 14,
              "placement": 2,
              "prize": "600"
            }
          ],
          "Documents": [
            {
                "documentName": "document 1",
                "url": "http://community.topcoder.com/tc?module=DownloadDocument&docid=30400000"
            },
            {
                "documentName": "document 2",
                "url": "http://community.topcoder.com/tc?module=DownloadDocument&docid=30400001"
            },
            {
                "documentName": "document 3",
                "url": "http://community.topcoder.com/tc?module=DownloadDocument&docid=30400002"
            }
          ],
          "phases": [
            {
                "type": "Registration",
                "status": "Open",
                "scheduledStartTime": "2013-12-05T12:22:07.000Z",
                "actualStartTime": "2013-12-05T12:22:07.000Z",
                "scheduledEndTime": "2013-12-05T12:22:07.000Z",
                "actualEndTime": null
            },
            {
                "type": "Submission",
                "status": "Scheduled",
                "scheduledStartTime": "2013-12-05T12:22:07.000Z",
                "actualStartTime": null,
                "scheduledEndTime": "2013-12-05T12:22:07.000Z",
                "actualEndTime": null
            }
          ],
          "event": {
              "id": 3437,
              "description": "TCO"
          }
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Get Studio Challenge Result [/design/challenges/result/{challengeId}]
### Get Studio Challenge Result [GET]

+ Parameters
    + challengeId (required, number, `30000000`) ... The challenge id.

+ Response 200 (application/json)

        {
          "challengeType": "Web Design",
          "challengeName": "CS-TC Help Center Storyboard Design Contest",
          "challengeId": 30036283,
          "postingDate": "2013-12-02T09:00:05.000Z",
          "contestEndDate": "2013-12-10T08:33:19.000Z",
          "challengeCommunity": "design",
          "registrants": 2,
          "submissions": 2,
          "submissionsPassedScreening": 100.0
          "results":
          [
            {
                "handle": "iamtong",
                "registrationDate": "2013-12-03T09:00:05.000Z",
                "submissionDate": "2013-12-04T09:00:05.000Z",
                "placement": 1,
                "points": 360,
                "submissionDownloadLink": "http://studio.topcoder.com/?module=DownloadSubmission&sbmid=123456",
                "previewDownloadLink": "https://studio.topcoder.com/?module=DownloadSubmission&sbmid=123456&sbt=small"
            },
            {
                "handle": "heffan",
                "registrationDate": "2013-12-03T09:00:05.000Z",
                "submissionDate": "2013-12-05T09:00:05.000Z",
                "placement": 2,
                "points": 140,
                "submissionDownloadLink": "http://studio.topcoder.com/?module=DownloadSubmission&sbmid=123457",
                "previewDownloadLink": "https://studio.topcoder.com/?module=DownloadSubmission&sbmid=123457&sbt=small"
            }
          ],
          "finalFixes":
          [
            "submissionDownloadLink": "http://studio.topcoder.com/?module=DownloadSubmission&sbmid=123458",
            "submissionDownloadLink": "http://studio.topcoder.com/?module=DownloadSubmission&sbmid=123459",
            "submissionDownloadLink": "http://studio.topcoder.com/?module=DownloadSubmission&sbmid=123460"
          ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Get Studio Challenge Checkpoint Detail [/design/challenges/checkpoint/{challengeid}]
### Get Studio Challenge Checkpoint Detail [GET]

+ Parameters
    + challengeid (required, number, `30000000`) ... The submission id.

+ Response 200 (application/json)

        {
          "numberOfSubmissions": 10,
          "numberOfPassedScreeningSubmissions": 9,
          "numberOfPassedScreeningUniqueSubmitters": 7,
          "numberOfUniqueSubmitters": 8,
          "checkpointResults": [
            {
                "id": 10134,
                "feedback": "nice design"
            },
            {
                "id": 10135,
                "feedback": "nice design"
            },
            {
                "id": 10136,
                "feedback": "nice design"
            },
            {
                "id": 10137,
                "feedback": "nice design"
            },
            {
                "id": 10138,
                "feedback": "nice design"
            }
          ],
          "general feedback": "good submissions"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

##Design Review Opportunities [/design/reviewOpportunities?pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}]
### Get Design Review Opportunities [GET]

+ Parameters
    + filter (optional, string, `type`) ... You can set multi key=value pair parameters to set the filter parameters. The filter parameter can only be following key: reviewType, challengeName, challengeType, reviewStartDate.type, reviewStartDate.firstDate, reviewStartDate.secondDate, reviewEndDate.type, reviewEndDate.firstDate, reviewEndDate.secondDate, reviewPaymentLowerBound, reviewPaymentUpperBound. For the reviewStartDate and reviewEndDate's type, it can only be(case sensitive) BEFORE, AFTER, ON, BETWEEN_DATES, BEFORE_CURRENT_DATE, AFTER_CURRENT_DATE. When the type is BETWEEN_DATES, the secondDate should be provided. The date value should follow this pattern YYYY-MM-DD.
    + value (optional, string, `Development`) ... Value of the filter key-value pair
    + pageIndex (optional, number, `1`) ... The page index of the returned resources. 1-based. It can be null. The default value will be 1
    + pageSize (optional, number, `50`) ... The page size of the returned resources. 1-based. It can be null. The default value will be 10.
    + sortColumn (optional, string, `challengeName`) ... The column name to sort, can be null.
    + sortOrder (optional, string, `asc`) ... The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'.

+ Response 200 (application/json)

        {
         "data": [
          {
            "challengeName": "Cornell - Responsive Storyboard Economics Department Site Redesign Contest",
            "challengeId": 30005520,
            "challengeType": "Design",
            "round1ScheduledStartDate": "11.01.2013 11:01 EDT",
            "round2ScheduledStartDate": "11.01.2013 11:01 EDT",
            "reviewerPayment": 442,
            "reviewer": "leben",
            "reviewType":"screening",
            "detailLink": "http://studio.topcoder.com/?module=SpecViewReviewTerms&ct=30005520"
          },
          {
            "challengeName": "Cornell - Responsive Storyboard",
            "challengeId": 30005521,
            "challengeType": "Design",
            "round1ScheduledStartDate": "11.01.2013 11:01 EDT",
            "round2ScheduledStartDate": "11.01.2013 11:01 EDT",
            "reviewerPayment": 442,
            "reviewer": "leben",
            "reviewType":"screening",
            "detailLink": "http://studio.topcoder.com/?module=SpecViewReviewTerms&ct=30005521"
          }
         ],
         "total": 2,
         "pageIndex": 1,
         "pageSize": 10
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Get Review Opportunity Detail [/design/reviewOpportunities/{id}]
### Get Review Opportunity Information [GET]

+ Parameters

    + id (required, number, `30000000`) ... The challenge id.

+ Response 200 (application/json)

        {
            "name": "PDS - Import and Persistence Update - Assembly Contest",
            "Phases":
            [
                {
                    "name": "Submission",
                    "start": "10.25.2013 23:02 EDT",
                    "end": "10.29.2013 23:02 EDT",
                    "duration": "143 hours"
                },
                {
                    "name": "Screening",
                    "start": "10.29.2013 23:02 EDT",
                    "end": "10.30.2013 23:02 EDT",
                    "duration": "24 hours"
                }
            ],
            "Positions":
            [
                {
                    "role": "Screener",
                    "positions": 1,
                    "payment": 500
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Studio Challenge Types Collection [/design/challengetypes]
### List all challenge types [GET]
+ Response 200 (application/json)

        [
            {
                "contestCategoryId": 1,
                "contestTypeId": 1,
                "name": "Logo Design",
                "description": "Logo competitions on Studio range from conceptualizing the primary identifying mark of a company to creating a product logo or service mark."
            },
            {
                "contestCategoryId": 1,
                "contestTypeId": 2,
                "name": "Print Design",
                "description": "Print competitions can range from a poster for a company event, to a tri-fold brochure promoting services."
            },
            {
                "contestCategoryId": 1,
                "contestTypeId": 3,
                "name": "Presentation Design",
                "description": "Presentation design contests organize marketing or sales material into a professional design."
            },
            {
                "contestCategoryId": 2,
                "contestTypeId": 1,
                "name": "Web and Application Design",
                "description": "Web and App design contests are called storyboards."
            },
            {
                "contestCategoryId": 2,
                "contestTypeId": 2,
                "name": "Banners/ Small Element Design",
                "description": "This category covers traditional web banners, along with promos that can be used both on web sites and email newsletters."
            },
            {
                "contestCategoryId": 2,
                "contestTypeId": 3,
                "name": "Icons",
                "description": "Icons are designed for web sites, print publications, applications, mobile apps, and anywhere else where icons may be used."
            },
            {
                "contestCategoryId": 3,
                "contestTypeId": 1,
                "name": "Wireframe",
                "description": "Wireframe Competitions are designed to take the requirement documents inputs from the Specification Contest (or directly from the client) and create a roadmap of the working application."
            },
            {
                "contestCategoryId": 3,
                "contestTypeId": 2,
                "name": "Idea Generation",
                "description": "This unique type of contest asks competitors to conceptualize an idea and present it in written format, often with drawings or other diagrams to help explain the idea."
            },
            {
                "contestCategoryId": 4,
                "contestTypeId": 1,
                "name": "UI Prototype",
                "description": "UI Prototype Competitions are designed to take the graphics (UI storyboards) and information architecture (IA wireframes) of a web site or application and create a demonstration of the working application."
            },
            {
                "contestCategoryId": 4,
                "contestTypeId": 2,
                "name": "RIA Build",
                "description": "Rich Internet Application (RIA) Build Competitions provide the build of small applications used both on the Internet and on the desktop."
            }
        ]

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Studio Member Statistics [/users/{handle}/statistics/design]
### Studio Member Statistics [GET]

+ Parameters
    + handle (required, string, `iRabbit`) ... Member Handle

+ Response 200 (application/json)

        {
            "handle": "iRabbit",
            "Tracks":
            {
                "Web Design":
                [
                    "numberOfSubmissions": 100,
                    "numberOfPassedScreeningSubmissions": 100,
                    "numberOfWinningSubmissions": 80,
                    "copilotCompletedContests": 100,
                    "copilotFailedContests": 100
                ],
                "Mobile Design":
                [
                    "numberOfSubmissions": 100,
                    "numberOfPassedScreeningSubmissions": 100,
                    "numberOfWinningSubmissions": 80,
                    "copilotCompletedContests": 100,
                    "copilotFailedContests": 100
                ]
            }
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Studio Member Recent Winning Submissions [/users/{handle}/statistics/design/recentWins?numberOfRecentWins={numberOfRecentWins}]
### Studio Member Recent Winning Submissions [GET]

+ Parameters
    + handle (required, string, `iRabbit`) ... Member Handle
    + numberOfRecentWins (optional, number, `7`) ... number of recent wins.The default value will be 7.

+ Response 200 (application/json)

        {
            size: 2,
            recentWinningSubmissions:
            [
                {
                    contestName: "TC - CS Storyboard Redesign Lorem Ipsum Dolor sit Amet 2",
                    rank: "1",
                    prize: 1300,
                    submissionDate: "2014-02-03T09:30:00.000Z",
                    viewable: true
                    preview: "https://studio.topcoder.com/?module=DownloadSubmission&sbmid=169728&sbt=small"
                },
                {
                    contestName: "TC Redesign Lorem Ipsum Dolor sit Amet 2",
                    rank: "M",
                    prize: 600,
                    submissionDate: "2014-01-22T10:12:00.000Z",
                    viewable: false
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Top Ranked Members [/design/statistics/tops/{challengeType}]
### Top Ranked Members [GET]

+ Parameters
    + challengeType (required, string, `Logo`) ... The type of the challenge

+ Response 200 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 3,
            "data":
            [
                {
                    "rank": 1,
                    "handle": "Petr",
                    "userId": 123457898,
                    "color": "Red",
                    "numberOfWinningSubmissions": 3000
                },
                {
                    "rank": 2,
                    "handle": "ACRush",
                    "userId": 123457899,
                    "color": "Red",
                    "numberOfWinningSubmissions": 2500
                },
                {
                    "rank": 3,
                    "handle": "lympanda",
                    "userId": 123457891,
                    "color": "Yellow",
                    "numberOfWinningSubmissions": 2000
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

# Group Data

## Platforms [/data/platforms]
### Platforms [GET]

+ Response 200 (application/json)

        {
            "count": 2,
            "platforms": [ "Heroku", "NodeJs" ]
        }

## Technologies [/data/technologies]
### Technologies [GET]

+ Response 200 (application/json)

        {
            "count": 2,
            "technologies": [ "JavaScript", "NodeJS" ]
        }

## Challenge Types Collection [/data/challengetypes]
### List all challenge types [GET]
+ Response 200 (application/json)

        [
            {
                "contestCategoryId": 1,
                "contestTypeId": 1,
                "name": "Single Round Match (SRM)",
                "description": "The Algorithm competitions are timed contests where all contestants compete online and are given the same problems to solve under the same time constraints."
            },
            {
                "contestCategoryId": 1,
                "contestTypeId": 2,
                "name": "Marathon Match",
                "description": "TopCoder holds several types of Marathon Match events, typically at least once per month."
            }
        ]

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Review Opportunities Collection [/data/reviewOpportunities]
### List all review opportunities [GET]
+ Response 200 (application/json)

        [
            "total": 2,
            "pageIndex": 1,
            "pageSize": 10,
            "data": [
             {
               "id": 10059,
               "reviewerPayment": 100,
               "numberOfSubmissions": 2,
               "opensOn": "10.11.2013 13:00 EDT",
               "reviewStart": "10.14.2013 13:06 EDT",
               "reviewEnd": "10.16.2013 13:06 EDT",
               "numberOfReviewPositionsAvailable": 3,
               "type": "Screening",
               "reviewType": "Contest Review",
               "contestName": "Algorithms contest 1"
             },
             {
               "id": 10160,
               "reviewerPayment": 100,
               "numberOfSubmissions": 0,
               "opensOn": "10.11.2013 13:00 EDT",
               "reviewStart": "10.14.2013 13:06 EDT",
               "reviewEnd": "10.16.2013 13:06 EDT",
               "numberOfReviewPositionsAvailable": 2,
               "type": "Screening",
               "reviewType": "Contest Review",
               "contestName": "Algorithms contest 2"
             }
        ]

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }



## Algorithm review opportunity details [/data/reviewopportunities/{id}]
### Get algorithm review opportunity details [GET]

+ Parameters
    + id (required, number, `10059`) ... The id of this review opportunity.

+ Response 200 (application/json)

        {
            "contestId": 3005067,
            "contestName": 'Algorithm 1',
            "timeline": [
                {
                    "phase": "Submission",
                    "start": "11.01.2013",
                    "end": "11.05.2013",
                    "duration": "95"
                },
                {
                    "phase": "Screening",
                    "start": "11.05.2013",
                    "end": "11.06.2013",
                    "duration": "24"
                },
                {
                    "phase": "Review",
                    "start": "11.06.2013",
                    "end": "11.08.2013",
                    "duration": "48"
                }
            ],
            "openPositions": [
                {
                    "role": "Secondary Reviewer",
                    "positions": "2",
                    "payment": "$216.22 *"
                }
            ],
            "reviewApplications": [
                {
                    "handle": "heffan",
                    "role": "Secondary Reviewer",
                    "status": "Pending",
                    "applicationDate": "11.01.2013 02:31 EDT"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }


## View Algorithm SRM Challenges [/data/srm/challenges?listType={listType}&pageSize={pageSize}&pageIndex={pageIndex}&sortColumn={sortColumn}&sortOrder={sortOrder}]
### View Algorithm SRM Challenges [GET]

+ Parameters
    + listType (optional, string, `Active`) ... The type of challenges to search. It can only be 'ACTIVE', 'OPEN', 'PAST' or 'UPCOMING'. If it's null, 'Active' will be used.
    + filter (optional, string, `type`) ... Key of the filter key-value pair
    + value (optional, string, `Development`) ... Value of the filter key-value pair
    + pageIndex (optional, number, `1`) ... The paging number, 1-based, -1 if no paging. It can be null.
    + pageSize (optional, number, `50`) ... The max number of the results, should be set if pageIndex is set.
    + sortColumn (optional, string, `contestName`) ... The column name to sort, can be null.
    + sortOrder (optional, string, `asc`) ... The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'.

+ Response 200 (application/json)

        {
                "total": 450,
                "pageIndex": 1,
                "pageSize": 2,
                "data": [
                {
                    "roundId": 15761,
                    "name": "SRM 595",
                    "startDate": "08.22.2013 13:30 EDT",
                    "totalCompetitors": 911,
                    "divICompetitors": 410,
                    "divIICompetitors": 501,
                    "divITotalSolutionsSubmitted": 486,
                    "divIAverageSolutionsSubmitted": 1.19,
                    "divIITotalSolutionsSubmitted": 486,
                    "divIIAverageSolutionsSubmitted": 1.19,
                    "divITotalSolutionsChallenged": 486,
                    "divIAverageSolutionsChallenged": 1.19,
                    "divIITotalSolutionsChallenged": 486,
                    "divIIAverageSolutionsChallenged": 1.19
                },
                {
                    "roundId": 15684,
                    "name": "SRM 594",
                    "startDate": "08.22.2013 13:30 EDT",
                    "totalCompetitors": 911,
                    "divICompetitors": 410,
                    "divIICompetitors": 501,
                    "divITotalSolutionsSubmitted": 486,
                    "divIAverageSolutionsSubmitted": 1.19,
                    "divIITotalSolutionsSubmitted": 486,
                    "divIIAverageSolutionsSubmitted": 1.19,
                    "divITotalSolutionsChallenged": 486,
                    "divIAverageSolutionsChallenged": 1.19,
                    "divIITotalSolutionsChallenged": 486,
                    "divIIAverageSolutionsChallenged": 1.19
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 406 (application/json)

        {
            "name":"Not Acceptable",
            "value":"406",
            "description":"This message will explain why the Search parameters are invalid."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## View Algorithm Marathon Challenges [/data/marathon/challenges?listType={listType}&pageSize={pageSize}&pageIndex={pageIndex}&sortColumn={sortColumn}&sortOrder={sortOrder}]
### View Algorithm Marathon Challenges [GET]

+ Parameters
    + listType (optional, string, `Active`) ... The type of challenges to search. It can only be 'ACTIVE', 'OPEN', 'PAST' or 'UPCOMING'. If it's null, 'Active' will be used.
    + filter (optional, string, `type`) ... Key of the filter key-value pair
    + value (optional, string, `Development`) ... Value of the filter key-value pair
    + pageIndex (optional, number, `1`) ... The paging number, 1-based, -1 if no paging. It can be null.
    + pageSize (optional, number, `50`) ... The max number of the results, should be set if pageIndex is set.
    + sortColumn (optional, string, `contestName`) ... The column name to sort, can be null.
    + sortOrder (optional, string, `asc`) ... The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'.

+ Response 200 (application/json)

        {
                "total": 450,
                "pageIndex": 1,
                "pageSize": 2,
                "data": [
                {
                    "roundId": 15761,
                    "fullName": "USAID and Humanity United",
                    "shortName": "Tech Challenge for Atrocity Prevention",
                    "startDate": "08.22.2013 13:30 EDT",
                    "endDate": "08.22.2013 13:30 EDT",
                    "winnerHandle": "nhzp339",
                    "winnerScore": 376.79
                },
                {
                    "roundId": 15684,
                    "fullName": "Marathon Match 81",
                    "shortName": "Marathon Match 81",
                    "startDate": "06.05.2013 12:43 EDT",
                    "endDate": "06.05.2013 12:43 EDT",
                    "winnerHandle": "ACRush",
                    "winnerScore": 999534.81
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 406 (application/json)

        {
            "name":"Not Acceptable",
            "value":"406",
            "description":"This message will explain why the Search parameters are invalid."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## View Past Data Science Challenges [/data/data-science/challenges/past?pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}&submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}]
### View Past Data Science Challenges [GET]

+ Parameters
    + pageIndex (optional, number, `1`) ... The paging number, 1-based, -1 if no paging. It can be null.
    + pageSize (optional, number, `50`) ... The max number of the results, should be set if pageIndex is set.
    + sortColumn (optional, string, `challengeName`) ... The column name to sort, can be null.
    + sortOrder (optional, string, `asc`) ... The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'.
    + submissionEndFrom (optional, string, `2014-03-01`) ... submission end date from value.
    + submissionEndTo (optional, string, `2014-03-15`) ... submission end date to value.

+ Response 200 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 3,
            "sortColumn": "challengeType",
            "sortOrder": "asc",
            "submissionEndFrom": "2001-01-01",
            "submissionEndTo": "2015-01-01",
            "data": [
                {
                    "challengeType": "Code",
                    "challengeName": "Science Data Java Processor",
                    "challengeId": 30036091,
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "registrationStartDate": "10.27.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "challengeCommunity": "Develop",
                    "postingDate": "10.31.2013 10:10 EDT"
                },
                {
                    "challengeType": "Marathon",
                    "challengeName": "Topcoder Marathon 1",
                    "challengeId": 30036096,
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "registrationStartDate": "10.27.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "challengeCommunity": "Data",
                    "postingDate": "10.31.2013 10:10 EDT"
                },
                {
                    "challengeType": "SRM",
                    "challengeName": "Topcoder SRM 1",
                    "challengeId": 30036099,
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "registrationStartDate": "10.27.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "challengeCommunity": "Data",
                    "postingDate": "10.31.2013 10:10 EDT"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"pageIndex should be equal to -1 or greater than 0"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"pageIndex should be number."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"pageIndex should be less or equal to 2147483647."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"pageSize should be positive."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"pageSize should be number."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"pageSize should be less or equal to 2147483647."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"sortColumn should be an element of challengetype,challengename,challengeid,numsubmissions,numregistrants,registrationstartdate,submissionenddate,challengecommunity,postingdate."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"sortOrder should be an element of asc,desc."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"Invalid submissionEndFrom. Expected format is YYYY-MM-DD"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"Invalid submissionEndTo. Expected format is YYYY-MM-DD"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"submissionEndFrom must be before submissionEndTo"
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## List Round for a Contest [/data/srm/rounds/{contestId}]
### List Round for a Contest [GET]

+ Parameters
    + contestId (required, integer) ... contest's id for listing

+ Response 200 (application/json)


        {
          "total": 5,
          "data": [
            {
              "id": 40001,
              "contest_id": 30001,
              "name": "Round 1",
              "status": "A",
              "registrationLimit": 32,
              "invitationalType": 0,
              "short_name": "short name 1",
              "type": {
                "id": 6,
                "desc": "Screening Tool Problem Sets"
              },
              "languages": [],
              "region": {
                "region_id": 1,
                "region_name": "Alpha"
              }
            },
            {
              "id": 40002,
              "contest_id": 30001,
              "name": "Round 2",
              "status": "A",
              "registrationLimit": 64,
              "invitationalType": 1,
              "short_name": "short name 2",
              "type": {
                "id": 7,
                "desc": "Team Single Round Match"
              },
              "languages": [],
              "region": {
                "region_id": 2,
                "region_name": "Beta"
              }
            },
            {
              "id": 40003,
              "contest_id": 30001,
              "name": "Round 3",
              "status": "A",
              "registrationLimit": 128,
              "invitationalType": 2,
              "short_name": "short name 3",
              "type": {
                "id": 8,
                "desc": "Team Tournament Round"
              },
              "languages": {
                     "roundId": 40006,
                     “languages” [
                         {
                           "id": 1,
                           "description": "Java"
                         },
                         {
                           "id": 3,
                           "description": "C++"
                         },
                         {
                           "id": 2,
                           "description": "XML"
                         }
                     ]
                 },
              "region": {
                "region_id": 3,
                "region_name": "Gamma"
              }
            },
            {
              "id": 40004,
              "contest_id": 30001,
              "name": "Round 4",
              "status": "A",
              "registrationLimit": 256,
              "invitationalType": 3,
              "short_name": "short name 4",
              "type": {
                "id": 9,
                "desc": "Team Practice Round"
              },
              "languages": [],
              "region": {
                "region_id": 4,
                "region_name": "Delta"
              }
            },
            {
              "id": 40005,
              "contest_id": 30001,
              "name": "Round 5",
              "status": "A",
              "registrationLimit": 512,
              "invitationalType": 4,
              "short_name": "short name 5",
              "type": {
                "id": 10,
                "desc": "Long Round"
              },
              "segments": {
                "registrationLength": 0,
                "codingLength": 450,
                "intermissionLength": 0,
                "challengeLength": 0
              },
              "languages": [],
              "region": {
                "region_id": 1,
                "region_name": "Alpha"
              }
            }
          ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Authentication credentials were missing or incorrect."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"The request is understood, but it has been refused or access is not allowed."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Create SRM Contest Round API [/data/srm/rounds/create]
### Create SRM Contest Round API [POST] (application/json)

+ Parameters
    + contest_id (required, integer) round's contest_id
    + id (required, integer) round's id
    + invitaitonalType (required, integer) round's invitaitonalType
    + registrationLimit (required, integer) round's registrationLimit
    + name (required, string) round's name
    + short_name (required, string) round's short_name
    + status (required, string) round's status
    * type (required, object) round's type, it's id should be set.
    * region (required, object) round's region, it's id should be set.
    * roomAssignment (required, object) round's roomAssginment, with field codersPerRoom(integer), type(integer), isByDivision, isByRegion, isFinal(boolean), p(Number).

+ Response 200 (application/json)

        {
            "message": "ok"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Authentication credentials were missing or incorrect."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"The request is understood, but it has been refused or access is not allowed."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Modify SRM Contest Round API [/data/srm/rounds/{oldRoundId}]
### Modify SRM Contest Round API [PUT] (application/json)

+ Parameters
    + contest_id (required, integer) round's contest_id
    + oldRoundId (required, integer) modifying round's id
    + id (required, integer) round's id
    + invitaitonalType (required, integer) round's invitaitonalType
    + registrationLimit (required, integer) round's registrationLimit
    + name (required, string) round's name
    + short_name (required, string) round's short_name
    + status (required, string) round's status
    * type (required, object) round's type, it's id should be set.
    * region (required, object) round's region, it's id should be set.
    * roomAssignment (required, object) round's roomAssginment, with field codersPerRoom(integer), type(integer), isByDivision, isByRegion, isFinal(boolean), p(Number).

+ Response 200 (application/json)

        {
            "message": "ok"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Authentication credentials were missing or incorrect."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"The request is understood, but it has been refused or access is not allowed."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Delete SRM Contest Round API [/data/srm/rounds/{roundId}]
### Delet SRM Contest Round API [DELETE]

+ Parameters
    + roundId (required, integer) deleting round's id

+ Response 200 (application/json)

        {
            "message": "ok"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Authentication credentials were missing or incorrect."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"The request is understood, but it has been refused or access is not allowed."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }


## Get Algorithm Marathon Challenge Detail [/data/marathon/challenges/{id}]
### Get Algorithm Marathon Detail [GET]

+ Parameters
    + id (required, number, `30000000`) ... The challenge id.

+ Response 200 (application/json)

        {
            "roundId": 15678,
            "fullName": "SensorFusion2",
            "shortName": "SensorFusion2",
            "description": "This is the full description.",
            "numberOfRegistrants": 295,
            "numberOfSubmissions": 215,
            "numberOfCompetitors": 32,
            "startDate": "05.22.2013 09:00 EDT",
            "endDate": "06.05.2013 09:00 EDT",
            "systemTestDate": "06.05.2013 09:00 EDT",
            "winnerHandle": "JacoCronje",
            "winnerScore": 403096.68,
            "currentProgress":
            {
                "groupType": "HOUR",
                "progressResources":
                [
                    {
                        "currentTopProvisionalScore": 0,
                        "currentNoOfSubmissions": 0,
                        "currentNoOfcompetitors": 0,
                        "currentNoOfRegistrants": 4,
                        "date": "05.22.2013 10:00 EDT",
                        "topUserHandle": ""
                    },
                    {
                        "currentTopProvisionalScore": 0,
                        "currentNoOfSubmissions": 0,
                        "currentNoOfcompetitors": 0,
                        "currentNoOfRegistrants": 9,
                        "date": "05.22.2013 11:00 EDT",
                        "topUserHandle": ""
                    }
                ]
            },
             "registrantsRatingSummary":
             [
                {
                    "color": "Blue",
                    "numberOfMembers": 18
                },
                {
                    "color": "Gray",
                    "numberOfMembers": 26
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 406 (application/json)

        {
            "name":"Not Acceptable",
            "value":"406",
            "description":"This message will explain why the Search parameters are invalid."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Get Algorithm SRM Detail [/data/srm/challenges/{id}]
### Get Algorithm SRM Detail [GET]

+ Parameters
    + id (required, number, `30000000`) ... The challenge id.

+ Response 200 (application/json)

        {
            "roundId": 15707,
            "name": "SRM 595",
            "leaders":
            {
                "divisionI":
                [
                    {
                        "handle": "Petr",
                        "score": 1531.29,
                        "placed": 1,
                        "room": 1
                    },
                    {
                        "handle": "ir5",
                        "score": 1530.29,
                        "placed": 2,
                        "room": 2
                    }
                ],
                "divisionII":
                [
                    {
                        "handle": "xyz111",
                        "score": 1531.29,
                        "placed": 1,
                        "room": 1
                    },
                    {
                        "handle": "jason_yu",
                        "score": 1530.29,
                        "placed": 2,
                        "room": 2
                    }
                ]
            },
            "problems":
            {
                "divisionI":
                [
                    {
                        "level": 1,
                        "problemName": "easy",
                        "submissions": 378,
                        "correct%": 82.01,
                        "averagePoints": 206.36
                    },
                    {
                        "level": 2,
                        "problemName": "easy",
                        "submissions": 378,
                        "correct%": 82.01,
                        "averagePoints": 206.36
                    },
                    {
                        "level": 3,
                        "problemName": "easy",
                        "submissions": 378,
                        "correct%": 82.01,
                        "averagePoints": 206.36
                    }
                ],
                "divisionII":
                [
                    {
                        "level": 1,
                        "problemName": "easy",
                        "submissions": 378,
                        "correct%": 82.01,
                        "averagePoints": 206.36
                    },
                    {
                        "level": 2,
                        "problemName": "easy",
                        "submissions": 378,
                        "correct%": 82.01,
                        "averagePoints": 206.36
                    },
                    {
                        "level": 3,
                        "problemName": "easy",
                        "submissions": 378,
                        "correct%": 82.01,
                        "averagePoints": 206.36
                    }
                ]
            }
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 406 (application/json)

        {
            "name":"Not Acceptable",
            "value":"406",
            "description":"This message will explain why the Search parameters are invalid."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Get Marathon Match Challenge Reg Info [/data/marathon/challenges/{roundId}/regInfo]
### Get Marathon Match Challenge Reg Info [GET]

+ Parameters
    + roundId (required, number, `30000000`) ... The challenge round id.

+ Request

    + Headers

            Authorization : Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZHwxMzI0NTYiLCJleHAiOjEzOTI4MTc4ODQsImF1ZCI6InRvcGNvZGVyIiwiaWF0IjoxMzkyNzU3ODg0fQ.7X2IKkiyyI1ExSM5GNpdhJ8fGGK5-oAjzccX6YL_BKY

+ Response 200 (application/json)

        {
            "term": {
                "contestName": "Marathon Match 90",
                "roundName": "Round 2001",
                "termsContent": "Marathon Match terms content"
            },
            "questions": [
                {
                    "id": 1000,
                    "style": "Multiple Choice",
                    "type": "Eligible",
                    "text": "question 1000",
                    "answers": [
                        {
                            "id": 1002,
                            "text": "answer text 1",
                            "sortOrder": 1,
                            "correct": true
                        },
                        {
                            "id": 1001,
                            "text": "answer text 2",
                            "sortOrder": 2,
                            "correct": false
                        },
                        {
                            "id": 1003,
                            "text": "answer text 3",
                            "sortOrder": 3,
                            "correct": false
                        }
                    ]
                },
                {
                    "id": 1001,
                    "style": "Short Answer",
                    "type": "Personal",
                    "text": "question 1001",
                    "answers": []
                },
                {
                    "id": 1002,
                    "style": "Single Choice",
                    "type": "Eligible",
                    "text": "question 1002",
                    "answers": [
                        {
                            "id": 1004,
                            "text": "answer text 4",
                            "sortOrder": -1,
                            "correct": false
                        },
                        {
                            "id": 1005,
                            "text": "answer text 5",
                            "sortOrder": 1,
                            "correct": true
                        }
                    ]
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
            "details:":"You are not eligible to participate in this competition."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
            "details:":"Round doesn't exist 30005520."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
            "details":"In order to participate in this competition, you must register for <font color=\"red\">Event 30005520</font>. Registration is available: <a href=\"www.topcoder.com\">here</a>. Please register at the provided URL first and then repeat registration at Marathon Match Active Contests page."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
            "details":"Registration is not currently open."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
            "details":"You are not eligible to participate in this competition. Please contact support@topcoder.com if you have any questions."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
            "details":"Sorry, this round is by invitation only."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
            "details":"Sorry, you can not register for this round, you must compete in the version of this round that you were invited to."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
            "details":"There are no more spots available for the round."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"This message will explain why the request is invalid or cannot be served."
            "details":"Authorization information needed or incorrect."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"This message will explain why the request is invalid or cannot be served."
            "details":"The user is forbidden to access this endpoint."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the request is invalid or cannot be served."
            "details":"Could not find specified round terms."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }


## Register Marathon Match Challenge [/data/marathon/challenges/{roundId}/register]
### Register Marathon Match Challenge [POST]

+ Parameters
    + roundId (required, number, `30000000`) ... The challenge round id.

+ Request

    + Headers

            Authorization : Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZHwxMzI0NTYiLCJleHAiOjEzOTI4MTc4ODQsImF1ZCI6InRvcGNvZGVyIiwiaWF0IjoxMzkyNzU3ODg0fQ.7X2IKkiyyI1ExSM5GNpdhJ8fGGK5-oAjzccX6YL_BKY

+ Response 200 (application/json)

        {
            success: true
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"You are not eligible to participate in this competition."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"Round doesn't exist 30005520."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"In order to participate in this competition, you must register for <font color=\"red\">Event 30005520</font>. Registration is available: <a href=\"www.topcoder.com\">here</a>. Please register at the provided URL first and then repeat registration at Marathon Match Active Contests page."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"You are not eligible to participate in this competition."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"You already registered for this challenge."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"Registration is not currently open."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"You are not eligible to participate in this competition. Please contact support@topcoder.com if you have any questions."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"Sorry, this round is by invitation only."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"Sorry, you can not register for this round, you must compete in the version of this round that you were invited to."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"There are no more spots available for the round."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Authorization information needed or incorrect."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"The user is forbidden to access this endpoint."
        }


+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }


+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }


## Algorithm Member Marathon Statistics [/users/{handle}/statistics/data/marathon]
### Algorithm Member Marathon Statistics [GET]

+ Parameters
    + handle (required, string, `iRabbit`) ... Member Handle

+ Response 200 (application/json)

        {
            "handle": "iRabbit",
            "rating": 1659,
            "percentile": 50%,
            "rank": 9999,
            "countryRank": 9999,
            "schoolRank": 9999,
            "volatility": 280,
            "maximumRating": 1693,
            "minimumRating": 1035,
            "defaultLanguage": "C++",
            "competitions": 29,
            "mostRecentEventName": "SRM 441",
            "mostRecentEventDate": "05.27.09",
            "bestRank": 21,
            "wins": 0,
            "topFiveFinishes": 0,
            "topTenFinishes": 0,
            "avgRank": 107.08,
            "avgNumSubmissions": 4,62,
            "competitions": 13,
            "history":
            [
                {
                    "challengeId" : 12345,
                    "challengeName" : 'awesome component',
                    "date": "2012.9.10",
                    "rating": 1000,
                    "placement": 3,
                    "percentile": 88.3
                },
                {
                    "challengeId" : 12346,
                    "challengeName" : 'awesome component',
                    "date": "2012.10.10",
                    "rating": 1100,
                    "placement": 1,
                    "percentile": 86.3
                }
            ],
            "distribution":
            [
                {
                    "range": "2000-2100",
                    "number": 10
                },
                {
                    "range": "2100-2200",
                    "number": 5
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }


+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Algorithm Member SRM Statistics [/users/{handle}/statistics/data/srm]
### Algorithm Member SRM Statistics [GET]

+ Parameters
    + handle (required, string, `iRabbit`) ... Member Handle

+ Response 200 (application/json)

        {
            "handle": "iRabbit",
            "rating": 1659,
            "percentile": 50%,
            "rank": 9999,
            "countryRank": 9999,
            "schoolRank": 9999,
            "volatility": 280,
            "maximumRating": 1693,
            "minimumRating": 1035,
            "defaultLanguage": "C++",
            "competitions": 29,
            "mostRecentEventName": "SRM 441",
            "mostRecentEventDate": "05.27.09",
            "Divisions":
            {
                "Division I":
                {
                    "Level One":
                    {
                        "submitted": 25,
                        "failedChallenge": 2,
                        "failedSys.Test": 4,
                        "success %": 76.00%
                    },
                    "Level Two":
                    {
                        "submitted": 25,
                        "failedChallenge": 2,
                        "failedSys.Test": 4,
                        "success%": 76.00%
                    },
                    "Level Three":
                    {
                        "submitted": 25,
                        "failedChallenge": 2,
                        "failedSys. Test": 4,
                        "success%": 76.00%
                    },
                    "Level Total":
                    {
                        "submitted": 25,
                        "failedChallenge": 2,
                        "failedSys.Test": 4,
                        "success%": 76.00%
                    }
                },
                "Division II":
                {
                    "Level One":
                    {
                        "submitted": 25,
                        "failedChallenge": 2,
                        "failedSys.Test": 4,
                        "success%": 76.00%
                    },
                    "Level Two":
                    {
                        "submitted": 25,
                        "failedChallenge": 2,
                        "failedSys.Test": 4,
                        "success%": 76.00%
                    },
                    "Level Three":
                    {
                        "submitted": 25,
                        "failedChallenge": 2,
                        "failedSys.Test": 4,
                        "success%": 76.00%
                    },
                    "Level Total":
                    {
                        "submitted": 25,
                        "failedChallenge": 2,
                        "failedSys.Test": 4,
                        "success%": 76.00%
                    }
                }
            },
            "Challenges":
            {
                "Levels":
                {
                    "Level One":
                    {
                        "failedChallenge": 0,
                        "challenges": 1,
                        "success%": 100%
                    },
                    "Level Two":
                    {
                        "failedChallenge": 0,
                        "challenges": 1,
                        "success%": 100%
                    },
                    "Level Three":
                    {
                        "failedChallenge": 0,
                        "challenges": 1,
                        "success%": 100%
                    },
                    "Total":
                    {
                        "failedChallenge": 0,
                        "challenges": 1,
                        "success%": 100%
                    }
                }
            },
            "History":
            [
                {
                    "challengeId" : 12345,
                    "challengeName" : 'awesome component',
                    "date": "2012.9.10",
                    "rating": 1000,
                    "placement": 3,
                    "percentile": 88.3
                },
                {
                    "challengeId" : 12346,
                    "challengeName" : 'awesome component',
                    "date": "2012.10.10",
                    "rating": 1100,
                    "placement": 1,
                    "percentile": 86.3
                }
            ],
            "Distribution":
            [
                {
                    "range": "2000-2100",
                    "number": 10
                },
                {
                    "range": "2100-2200",
                    "number": 5
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }


+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Top Ranked Marathon Members [/data/marathon/statistics/tops?rankType={rankType}]
### Top Ranked Marathon Members [GET]

+ Parameters
    + rankType (required, string, `Competitors`) ... Ranking Type, support "Competitors", "Schools" and "Countries." Currently only applicable to SRM challenge type.

+ Response 200 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 3,
            "data":
            [
                {
                    "rank": 1,
                    "name": "University of Tokyo",
                    "country": "Japan",
                    "memberCount": 73,
                    "rating": 3000
                },
                {
                    "rank": 2,
                    "name": "University of Washington",
                    "country": "USA",
                    "memberCount": 73,
                    "rating": 3000
                },
                {
                    "rank": 3,
                    "name": "Tsinghua University",
                    "country": "China",
                    "memberCount": 73,
                    "rating": 3000
                }
            ]
        }

+ Response 202 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 3,
            "data":
            [
                {
                    "rank": 1,
                    "name": "Japan",
                    "memberCount": 73,
                    "rating": 3000
                },
                {
                    "rank": 2,
                    "name": "USA",
                    "memberCount": 73,
                    "rating": 3000
                },
                {
                    "rank": 3,
                    "name": "China",
                    "memberCount": 73,
                    "rating": 3000
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Top Ranked SRM Members [/data/srm/statistics/tops?rankType={rankType}&pageIndex={pageIndex}&pageSize={pageSize}]
### Top Ranked SRM Members [GET]

+ Parameters
    + rankType (required, string, `Competitors`) ... Ranking Type, support "Competitors", "Schools" and "Countries." Currently only applicable to SRM challenge type.
    + pageIndex (optional, number, `1`) ... The page index of the returned resources. 1-based. It can be null. The default value will be 1
    + pageSize (optional, number, `50`) ... The page size of the returned resources. 1-based. It can be null. The default value will be 10.

+ Response 200 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 3,
            "data":
            [
                {
                    "rank": 1,
                    "name": "University of Tokyo",
                    "country": "Japan",
                    "memberCount": 73,
                    "rating": 3000
                },
                {
                    "rank": 2,
                    "name": "University of Washington",
                    "country": "USA",
                    "memberCount": 73,
                    "rating": 3000
                },
                {
                    "rank": 3,
                    "name": "Tsinghua University",
                    "country": "China",
                    "memberCount": 73,
                    "rating": 3000
                }
            ]
        }

+ Response 202 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 3,
            "data":
            [
                {
                    "rank": 1,
                    "name": "Japan",
                    "memberCount": 73,
                    "rating": 3000
                },
                {
                    "rank": 2,
                    "name": "USA",
                    "memberCount": 73,
                    "rating": 3000
                },
                {
                    "rank": 3,
                    "name": "China",
                    "memberCount": 73,
                    "rating": 3000
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }


## Countries Collection [/data/countries]
### List of countries [GET]

+ Response 200 (application/json)

        [
            {
              "countryCode": "004",
              "countryName": "Afghanistan",
              "modifyDate": "2003-01-06T16:06:26.000Z",
              "participating": 1,
              "default_taxform_id": 2,
              "longitude": 65.917969,
              "latitude": 34.089061,
              "region": "null"
            },
            {
              "countryCode": "005",
              "countryName": "Angola",
              "modifyDate": "2003-01-06T16:06:26.000Z",
              "participating": 1,
              "default_taxform_id": 2,
              "longitude": 65.917969,
              "latitude": 34.089061,
              "region": "null"
            },
            {
              "countryCode": "006",
              "countryName": "United States",
              "modifyDate": "2003-01-06T16:06:26.000Z",
              "participating": 1,
              "default_taxform_id": 2,
              "longitude": 65.917969,
              "latitude": 34.089061,
              "region": "null"
            }
        ]

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Timezones Collection [/data/timezones]
### List of timezones [GET]

+ Response 200 (application/json)

        [
            {
              "timezoneCode": "1",
              "timezoneName": "EDT"
            },
            {
              "timezoneCode": "2",
              "timezoneName": "PST"
            }
        ]

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

# Group Open Bugs API

## Bugs [/bugs/{jiraProjectId}/{status}]
### Bugs [GET]

+ Parameters
    + jiraProjectId (optional, string, `BUGR`) ... The project id. Default BUGR.
    + status (optional, string, `OPEN`) ... The issue status. It can OPEN, CLOSED or ALL. Default OPEN.

+ Response 200 (application/json)

        [
              {
                "id": "BUGR-10571",
                "name": "$75 TC Public Profile Tab Navigation Update",
                "jiraUrl": "https://apps.topcoder.com/bugs/browse/BUGR-10571",
                "payment": 75,
                "tcoPoints": 10,
                "startDate": "2014-01-28T11:12:26-05:00"
              },
              {
                "id": "BUGR-10570",
                "name": "[code] Stormbound Configuration Update",
                "jiraUrl": "https://apps.topcoder.com/bugs/browse/BUGR-10570",
                "payment": 50,
                "tcoPoints": 30,
                "startDate": "2014-01-28T09:57:20-05:00"
              },
              {
                "id": "BUGR-10566",
                "name": "$30 - TC_CS Case studies UI Prototype Updates  - HTML",
                "jiraUrl": "https://apps.topcoder.com/bugs/browse/BUGR-10566",
                "payment": 30,
                "tcoPoints": 10,
                "startDate": "2014-01-28T02:29:51-05:00"
              },
              {
                "id": "BUGR-10563",
                "name": "CS - TC API - Windows Setup Guide",
                "jiraUrl": "https://apps.topcoder.com/bugs/browse/BUGR-10563",
                "payment": 50,
                "tcoPoints": 20,
                "startDate": "2014-01-27T18:37:46-05:00"
              }
        ]

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Terms of Use for a challenge [/terms/{challengeId}]
### Terms of Use for a challenge [GET]

+ Parameters
    + challengeId (required, number, `1234567`) ... The challenge for which to get terms of use
    + role (optional, string, 'copilot') ... The role of the user

+ Response 200 (application/json)

        "terms": [
            {
                "agreeabilityType": "Electronically-agreeable",
                "agreed": true,
                "title": "NodeJS API Sample Term Of Use 1",
                "termsOfUseId": 40000001,
                "url": "http://topcoder.com/tou40000001.txt"
            },
            {
                "agreeabilityType": "Electronically-agreeable",
                "agreed": true,
                "title": "NodeJS API Sample Term Of Use 2",
                "termsOfUseId": 40000002,
                "url": "http://topcoder.com/tou40000002.txt"
            },
            {
                "agreeabilityType": "Electronically-agreeable",
                "agreed": false,
                "title": "NodeJS API Sample Term Of Use 3",
                "termsOfUseId": 40000003,
                "url": "http://topcoder.com/tou40000003.txt"
            },
            {
                "agreeabilityType": "Non-electronically-agreeable",
                "agreed": false,
                "title": "NodeJS API Sample Term Of Use 4",
                "termsOfUseId": 40000004,
                "url": "http://topcoder.com/tou40000004.txt"
            },
            {
                "agreeabilityType": "Non-electronically-agreeable",
                "agreed": false,
                "title": "NodeJS API Sample Term Of Use 5",
                "termsOfUseId": 40000005,
                "url": "http://topcoder.com/tou40000005.txt"
            }
        ]

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Authentication credentials were missing or incorrect."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"The request is understood, but it has been refused or access is not allowed."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Register for a software/studio challenge [/challenges/{challengeId}/register]
### Register for a software/studio challenge [GET]

+ Parameters
    + challengeId (required, number, `1234567`) ... The challenge for which to register

+ Response 200 (application/json)

        {
          "message":"ok"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Authentication credentials were missing or incorrect."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"The request is understood, but it has been refused or access is not allowed."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 500 (application/json)

        {
            "name": "Internal Server Error",
            "value": 500,
            "description": "Something is broken. Please contact support.",
            "details": "Failed to connect to forum"
        }

+ Response 500 (application/json)

        {
            "name": "Internal Server Error",
            "value": 500,
            "description": "Something is broken. Please contact support.",
            "details": "Failed to grant user 124764 forum category 3 access"
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Unregister for a software/studio challenge [/challenges/{challengeId}/unregister]
### Unregister for a software/studio challenge [POST]

+ Parameters
    + challengeId (required, number, `1234567`) ... The challenge for which to Unregister

+ Request

    + Headers

            Authorization : Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZHwxMzI0NTYiLCJleHAiOjEzOTM3MDM1NzEsImF1ZCI6InRvcGNvZGVyIiwiaWF0IjoxMzkzNjQzNTcxfQ.F2iohKp2nwjQeGqrBD1wn42GJUD0r28aGjhDle7KujA

+ Response 200 (application/json)

        {
          "message":"ok"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"challengeId should be less or equal to 2147483647."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"challengeId should be number."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"challengeId should be positive."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"You don\'t have the authority to access this. Please login."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"You cannot unregister since registration phase is closed."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"You are not registered for this challenge."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"No such challenge exists."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 500 (application/json)

        {
            "name": "Internal Server Error",
            "value": 500,
            "description": "Something is broken. Please contact support.",
            "details": "Failed to connect to forum"
        }

+ Response 500 (application/json)

        {
            "name": "Internal Server Error",
            "value": 500,
            "description": "Something is broken. Please contact support.",
            "details": "Could not find user challenge resource"
        }


+ Response 500 (application/json)

        {
            "name": "Internal Server Error",
            "value": 500,
            "description": "Something is broken. Please contact support.",
            "details": "Could not find user challenge forum"
        }


+ Response 500 (application/json)

        {
            "name": "Internal Server Error",
            "value": 500,
            "description": "Something is broken. Please contact support.",
            "details": "Could not find forum category 3"
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

# Group Terms Of Use API
## View terms of use [/terms/detail/{termsOfUseId}]
### View terms of use by id [GET]

+ Parameters
    + termsOfUseId (required, number, `534532`) ... The id of terms of use

+ Response 200 (application/json)

        {
            "agreeabilityType": "Electronically-agreeable",
            "text": "This is the text of Term Of Use 1",
            "title": "NodeJS API Sample Term Of Use 1",
            "termsOfUseId": 40000001,
            "url": "http://topcoder.com/tou40000001.txt"
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Authentication credentials were missing or incorrect."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Agree terms of use [/terms/{termsOfUseId}/agree]
### Agree terms of use by id [POST]

- Only when jwt passed can we agree the terms of use.

+ Parameters
    + termsOfUseId (required, number, `534532`) ... The id of terms of use

+ Request

    + Headers

            Authorization : Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZHwxMzI0NTYiLCJleHAiOjEzOTM3MDM1NzEsImF1ZCI6InRvcGNvZGVyIiwiaWF0IjoxMzkzNjQzNTcxfQ.F2iohKp2nwjQeGqrBD1wn42GJUD0r28aGjhDle7KujA

+ Response 200 (application/json)

        {
             "success": true
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The request was invalid. An accompanying message will explain why."
            "details":"The term is not electronically agreeable."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The request was invalid. An accompanying message will explain why."
            "details":"You have agreed to this terms of use before."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The request was invalid. An accompanying message will explain why."
            "details":"You can't agree to this terms of use before you have agreed to all the dependencies terms of use."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Authentication credentials were missing or incorrect."
            "details":"Authentication credential was missing."
        }

+ Response 403 (application/json)

        {
            "name":"Forbidden",
            "value":"403",
            "description":"The request is understood, but it has been refused or access is not allowed."
            "details":"Sorry, you can not agree to this terms of use."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
            "details:":"No such terms of use exists."
        }


+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Challenges RSS Output [/challenges/rss?listType={listType}&challengeType={challengeType}]
### Challenges RSS Output [GET]

+ Parameters
    + listType (optional, string, `Open`) ... The status of challenges to search. It can only be 'ACTIVE', 'OPEN', 'PAST' or 'UPCOMING'. If it's null, 'Open' will be used.
    + challengeType (optional, string, `develop`) ... The type of challenges to search. It can only be 'develop', 'design' or 'data'.

+ Response 200 (application/json)

        {
            "total": 3,
            "data": [
                {
                    "challengeType": "Web Design",
                    "challengeName": "Cornell - Responsive Storyboard Economics Department Site Redesign Contest",
                    "challengeId": 30036096,
                    "detailedRequirements": "<h2 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Project Overview</span></h2>\n\n<p>TopCoder and the TopCoder community have worked hard to get the platform to its currently level of maturity, but we&#39;re far from done. It&#39;s time to take the platform to the next level. TopCoder is going to start taking some steps to open up the platform API to the outside and community developers so they could incorporate it in their websites, applications or build their own applications (web, mobile or desktop).</p>\n\n<p>The ultimate goal is to open up and build an &quot;API&quot; that is targeting all different type of audiences - Software and Studio Competitors, SRM/MM competitors, Copilots, Admins and TopCoder partners - each audience will have different interests and usages of the API, so it will be a huge project and we need to make sure that we are in the right direction from the beginning.</p>\n\n<p>Currently, we have run several contests to build the APIs and write tests for testing the APIs.&nbsp; All the tests can be found at https://github.com/cloudspokes/tc-api/tree/master/test</p>\n\n<p>Through these contests, we have found several problems for the tests part as following</p>\n\n<ol>\n\t<li>The tests are not properly named, we&#39;d like to follow the way like &#39;test.[api name].js&#39;, like <span class=\"css-truncate css-truncate-target\"><a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/blob/master/test/register_member.js\" id=\"72636476fe496c69e8cc1d0569ffd550-ab6d2363c6933e23ee66bb7b92f4d07841ea286b\" title=\"register_member.js\">register_member.js</a> should be renamed to <u>test.register_member.js</u>.</span></li>\n\t<li>Some of the tests have to presetup the database manually, Some of the tests automically setup and clear the related database tables wisely.</li>\n\t<li>The tests can be passed if run separately, but failed when running togather.</li>\n</ol>\n\n<p>For this contest, we&#39;d like to improve and standarize the way to write tests, so it will be good for further addon and CI integration.</p>\n\n<h2 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Competition Task Overview</span></h2>\n\n<p><span style=\"color:#FF0000;\"><span style=\"font-size: 12px;\"><img align=\"absmiddle\" alt=\"\" border=\"0\" height=\"16\" src=\"http://apps.topcoder.com/wiki/images/icons/emoticons/warning.gif\" width=\"16\" /> <strong>Please raise questions as quick as you can, I am familiar with related database and code base, I can provide as much support as I can.</strong></span></span></p>\n\n<p><span style=\"color:#FF0000;\"><span style=\"font-size: 12px;\"><img align=\"absmiddle\" alt=\"\" border=\"0\" height=\"16\" src=\"http://apps.topcoder.com/wiki/images/icons/emoticons/warning.gif\" width=\"16\" /></span><strong>The updated code must still deploy and work on heroku - any submission which can&#39;t be deployed on heroku successfully will be failed in screening phase - primary reviewer must check this.</strong></span></p>\n\n<p>The implementation will base on the node.js version of TC platform API - <span class=\"nobr\"><a href=\"https://github.com/cloudspokes/tc-api\" rel=\"nofollow\">https://github.com/cloudspokes/tc-api</a>.</span> <strong>Please follow the existing actionhero pattern for your development.</strong></p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Clean State for Running Tests</span></h3>\n\n<p>Currently, some tests requires presetup the database, some tests automically setup and clear the related database tables.</p>\n\n<p>We&#39;d like to follow the approach to setup and clear the related database tables before and after running the tests.</p>\n\n<p>Currently, <span class=\"css-truncate css-truncate-target\"><a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/blob/master/test/register_member.js\" id=\"72636476fe496c69e8cc1d0569ffd550-ab6d2363c6933e23ee66bb7b92f4d07841ea286b\" title=\"register_member.js\">register_member.js</a> used similar approach to setup the data before running tests. We&#39;d like to extra similar logic as utility methods, which can be used to execute a batch of sqls (for example, inside one file) or single sql against one database (Currently we can not do with multiple databases, due to the limitation of nodejs informix module).</span></p>\n\n<p>With this utility methods we can easily do setup and teardown databases.</p>\n\n<p><u>before, after, before each, after each hooks</u></p>\n\n<p>Utilize <code>before()</code>, <code>after()</code>, <code>beforeEach()</code>, <code>afterEach()</code>&nbsp; to setup the tests more wise. For detail information, please check http://visionmedia.github.io/mocha/</p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Test Directory Restructure and Normalization</span></h3>\n\n<p>We&#39;d like to normalize the directory structure inside <a href=\"https://github.com/cloudspokes/tc-api/blob/master/test\">test</a> directory. Currently, it already gives good starting point, but we&#39;d like revise it as we are making the above changes. Here is the general rules to following</p>\n\n<ol>\n\t<li>All tests should be named like test.[api name].js, so normally, for each api, there should be separated test js files.</li>\n\t<li>All tests from contest winner, should be put directly under test directory.</li>\n\t<li>All reviewers tests should be put under corresponding directory under test directory, like <span class=\"css-truncate css-truncate-target\"><a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/accuracy\" id=\"5d6db9a1dc722586187fc2db530f8388-a107215d06565a781a851de5573da8b935851c3f\" title=\"accuracy\">accuracy</a>, <a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/failure\" id=\"3ee28fe1a60c95b89d29317f122c7021-420d711966add1044306cfaba7036b73d50f95e2\" title=\"failure\">failure</a>, <a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/security\" id=\"e91e6348157868de9dd8b25c81aebfb9-8d796d458ceb76eb46407f9164ed17343d529bf6\" title=\"security\">security</a></span> directory.</li>\n\t<li>All sql files used for tests presetup and teardown should be put under <u>sqls</u> directory, sqls files for accuray, failture, security tests, will be in different directory, directly under the <span class=\"css-truncate css-truncate-target\"><a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/accuracy\" id=\"5d6db9a1dc722586187fc2db530f8388-a107215d06565a781a851de5573da8b935851c3f\" title=\"accuracy\">accuracy</a>, <a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/failure\" id=\"3ee28fe1a60c95b89d29317f122c7021-420d711966add1044306cfaba7036b73d50f95e2\" title=\"failure\">failure</a>, <a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/security\" id=\"e91e6348157868de9dd8b25c81aebfb9-8d796d458ceb76eb46407f9164ed17343d529bf6\" title=\"security\">security</a></span> directory, like accuracy/sqls, failure/sqls etc.</li>\n\t<li>All other test related files will be still put under <u>test_files</u> directory.</li>\n</ol>\n\n<p><span style=\"color:#FF0000;\">If you have better idea and improvement to make the test directory well orginized, please suggest. This can be considered as improvement, reviewers and PMs will consider that.</span></p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Scope </span></h3>\n\n<p>All tests under test directory are in scope. If it tests didn&#39;t pass orignally, you should be responsible to fix that.</p>\n\n<p>The ultimate goal is we can run all tests or single test successfully. like</p>\n\n<p>Run a single test:&nbsp; <u>./node_modules/.bin/mocha ./test/test.tops.js</u></p>\n\n<p>Run all tests: <u>./node_modules/.bin/mocha ./test</u></p>\n\n<p>Following steps&nbsp; to run the tests.</p>\n\n<ol>\n\t<li>setup environment varibales: . deploy/development.sh</li>\n\t<li>start the local server: npm start</li>\n\t<li>run the tests: as above commands.</li>\n</ol>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Tests Creation Guide</span></h3>\n\n<p>Beside the above requirements for current tests normalization and improvement, we&#39;d like you to write a general guide which can be followed to further test creation. It just need to be easy to follow.</p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Testing</span></h3>\n\n<p><span style=\"font-size:12px;\">The API Framework supports tests. </span>Use <a href=\"https://github.com/visionmedia/supertest\">supertest</a> with <a href=\"http://visionmedia.github.io/mocha/\">mocha</a>. Don&#39;t install mocha globally.</p>\n\n<p><span style=\"color:#FF0000;\">you must use mocha BDD style (which is the default), within that, you can optionally use chai.</span></p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Code Format</span></h3>\n\n<p>All code must pass <a href=\"http://www.jslint.com/\">jslint</a>. You may use &quot;nomen: true&quot;.</p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Winner Only</span></h3>\n\n<p>Winner will create pull request against the main github repo in final fix phase and merge the code.</p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color:#FF0000;\">Virutal Machines (VMs)</span></h3>\n\n<p>VM specific information is found here: <span class=\"nobr\"><a href=\"http://www.topcoder.com/wiki/display/docs/VM+Image+2.5\" rel=\"nofollow\">http://www.topcoder.com/wiki/display/docs/VM+Image+2.5</a></span></p>\n\n<p>Upon registration as a submitter or reviewer you will need to request a VM based on the TopCoder systems image. The VM will be active through aggregation review, after which it will be terminated except for the winner&#39;s and the reviewers&#39;. To request your image, please post in contest forum.</p>\n\n<p>Before requesting your VM, you need to ensure that you have an SSH key created and in your member profile. Instructions to do so are here: <span class=\"nobr\"><a href=\"http://www.topcoder.com/wiki/display/projects/Generate+SSH+Key\" rel=\"nofollow\">http://www.topcoder.com/wiki/display/projects/Generate+SSH+Key</a></span>, and instructions to connect afterwards are here: <span class=\"nobr\"><a href=\"http://www.topcoder.com/wiki/display/projects/Connect+Using+SSH+Key\" rel=\"nofollow\">http://www.topcoder.com/wiki/display/projects/Connect+Using+SSH+Key</a></span>.</p>\n\n<p>Please realize that VMs are currently issued manually. We make every attempt to issue the VM as soon as it is requested, however, there may be delays of up to 12 hours depending on time of day when you request. We encourage everyone to request a VM as soon as possible to minimize any such delays.</p>\n\n<h2 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Technology Overview</span></h2>\n\n<ul style=\"font-family: Arial, Helvetica, Verdana, sans-serif; font-size: 12px; line-height: 16px;\">\n\t<li>JavaScript</li>\n\t<li><span class=\"nobr\"><a href=\"http://nodejs.org/\" rel=\"nofollow\">Node.js 0.10.x</a></span></li>\n\t<li><a href=\"https://github.com/evantahler/actionHero\">actionhero.js framework</a></li>\n\t<li><a href=\"https://github.com/visionmedia/supertest\">supertest</a></li>\n\t<li><a href=\"http://visionmedia.github.io/mocha/\">mocha</a></li>\n</ul>\n\n<h2 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Documentation Provided</span></h2>\n\n<p>Please check the deployment guide in codebase for reference.</p>\n",
                    "projectId": 6789
                },
                {
                    "challengeType": "UI Prototype Competition",
                    "challengeName": "Corningstone App UI Prototype 2",
                    "challengeId": 30036099,
                    "detailedRequirements": "<h2 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Project Overview</span></h2>\n\n<p>TopCoder and the TopCoder community have worked hard to get the platform to its currently level of maturity, but we&#39;re far from done. It&#39;s time to take the platform to the next level. TopCoder is going to start taking some steps to open up the platform API to the outside and community developers so they could incorporate it in their websites, applications or build their own applications (web, mobile or desktop).</p>\n\n<p>The ultimate goal is to open up and build an &quot;API&quot; that is targeting all different type of audiences - Software and Studio Competitors, SRM/MM competitors, Copilots, Admins and TopCoder partners - each audience will have different interests and usages of the API, so it will be a huge project and we need to make sure that we are in the right direction from the beginning.</p>\n\n<p>Currently, we have run several contests to build the APIs and write tests for testing the APIs.&nbsp; All the tests can be found at https://github.com/cloudspokes/tc-api/tree/master/test</p>\n\n<p>Through these contests, we have found several problems for the tests part as following</p>\n\n<ol>\n\t<li>The tests are not properly named, we&#39;d like to follow the way like &#39;test.[api name].js&#39;, like <span class=\"css-truncate css-truncate-target\"><a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/blob/master/test/register_member.js\" id=\"72636476fe496c69e8cc1d0569ffd550-ab6d2363c6933e23ee66bb7b92f4d07841ea286b\" title=\"register_member.js\">register_member.js</a> should be renamed to <u>test.register_member.js</u>.</span></li>\n\t<li>Some of the tests have to presetup the database manually, Some of the tests automically setup and clear the related database tables wisely.</li>\n\t<li>The tests can be passed if run separately, but failed when running togather.</li>\n</ol>\n\n<p>For this contest, we&#39;d like to improve and standarize the way to write tests, so it will be good for further addon and CI integration.</p>\n\n<h2 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Competition Task Overview</span></h2>\n\n<p><span style=\"color:#FF0000;\"><span style=\"font-size: 12px;\"><img align=\"absmiddle\" alt=\"\" border=\"0\" height=\"16\" src=\"http://apps.topcoder.com/wiki/images/icons/emoticons/warning.gif\" width=\"16\" /> <strong>Please raise questions as quick as you can, I am familiar with related database and code base, I can provide as much support as I can.</strong></span></span></p>\n\n<p><span style=\"color:#FF0000;\"><span style=\"font-size: 12px;\"><img align=\"absmiddle\" alt=\"\" border=\"0\" height=\"16\" src=\"http://apps.topcoder.com/wiki/images/icons/emoticons/warning.gif\" width=\"16\" /></span><strong>The updated code must still deploy and work on heroku - any submission which can&#39;t be deployed on heroku successfully will be failed in screening phase - primary reviewer must check this.</strong></span></p>\n\n<p>The implementation will base on the node.js version of TC platform API - <span class=\"nobr\"><a href=\"https://github.com/cloudspokes/tc-api\" rel=\"nofollow\">https://github.com/cloudspokes/tc-api</a>.</span> <strong>Please follow the existing actionhero pattern for your development.</strong></p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Clean State for Running Tests</span></h3>\n\n<p>Currently, some tests requires presetup the database, some tests automically setup and clear the related database tables.</p>\n\n<p>We&#39;d like to follow the approach to setup and clear the related database tables before and after running the tests.</p>\n\n<p>Currently, <span class=\"css-truncate css-truncate-target\"><a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/blob/master/test/register_member.js\" id=\"72636476fe496c69e8cc1d0569ffd550-ab6d2363c6933e23ee66bb7b92f4d07841ea286b\" title=\"register_member.js\">register_member.js</a> used similar approach to setup the data before running tests. We&#39;d like to extra similar logic as utility methods, which can be used to execute a batch of sqls (for example, inside one file) or single sql against one database (Currently we can not do with multiple databases, due to the limitation of nodejs informix module).</span></p>\n\n<p>With this utility methods we can easily do setup and teardown databases.</p>\n\n<p><u>before, after, before each, after each hooks</u></p>\n\n<p>Utilize <code>before()</code>, <code>after()</code>, <code>beforeEach()</code>, <code>afterEach()</code>&nbsp; to setup the tests more wise. For detail information, please check http://visionmedia.github.io/mocha/</p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Test Directory Restructure and Normalization</span></h3>\n\n<p>We&#39;d like to normalize the directory structure inside <a href=\"https://github.com/cloudspokes/tc-api/blob/master/test\">test</a> directory. Currently, it already gives good starting point, but we&#39;d like revise it as we are making the above changes. Here is the general rules to following</p>\n\n<ol>\n\t<li>All tests should be named like test.[api name].js, so normally, for each api, there should be separated test js files.</li>\n\t<li>All tests from contest winner, should be put directly under test directory.</li>\n\t<li>All reviewers tests should be put under corresponding directory under test directory, like <span class=\"css-truncate css-truncate-target\"><a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/accuracy\" id=\"5d6db9a1dc722586187fc2db530f8388-a107215d06565a781a851de5573da8b935851c3f\" title=\"accuracy\">accuracy</a>, <a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/failure\" id=\"3ee28fe1a60c95b89d29317f122c7021-420d711966add1044306cfaba7036b73d50f95e2\" title=\"failure\">failure</a>, <a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/security\" id=\"e91e6348157868de9dd8b25c81aebfb9-8d796d458ceb76eb46407f9164ed17343d529bf6\" title=\"security\">security</a></span> directory.</li>\n\t<li>All sql files used for tests presetup and teardown should be put under <u>sqls</u> directory, sqls files for accuray, failture, security tests, will be in different directory, directly under the <span class=\"css-truncate css-truncate-target\"><a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/accuracy\" id=\"5d6db9a1dc722586187fc2db530f8388-a107215d06565a781a851de5573da8b935851c3f\" title=\"accuracy\">accuracy</a>, <a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/failure\" id=\"3ee28fe1a60c95b89d29317f122c7021-420d711966add1044306cfaba7036b73d50f95e2\" title=\"failure\">failure</a>, <a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/security\" id=\"e91e6348157868de9dd8b25c81aebfb9-8d796d458ceb76eb46407f9164ed17343d529bf6\" title=\"security\">security</a></span> directory, like accuracy/sqls, failure/sqls etc.</li>\n\t<li>All other test related files will be still put under <u>test_files</u> directory.</li>\n</ol>\n\n<p><span style=\"color:#FF0000;\">If you have better idea and improvement to make the test directory well orginized, please suggest. This can be considered as improvement, reviewers and PMs will consider that.</span></p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Scope </span></h3>\n\n<p>All tests under test directory are in scope. If it tests didn&#39;t pass orignally, you should be responsible to fix that.</p>\n\n<p>The ultimate goal is we can run all tests or single test successfully. like</p>\n\n<p>Run a single test:&nbsp; <u>./node_modules/.bin/mocha ./test/test.tops.js</u></p>\n\n<p>Run all tests: <u>./node_modules/.bin/mocha ./test</u></p>\n\n<p>Following steps&nbsp; to run the tests.</p>\n\n<ol>\n\t<li>setup environment varibales: . deploy/development.sh</li>\n\t<li>start the local server: npm start</li>\n\t<li>run the tests: as above commands.</li>\n</ol>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Tests Creation Guide</span></h3>\n\n<p>Beside the above requirements for current tests normalization and improvement, we&#39;d like you to write a general guide which can be followed to further test creation. It just need to be easy to follow.</p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Testing</span></h3>\n\n<p><span style=\"font-size:12px;\">The API Framework supports tests. </span>Use <a href=\"https://github.com/visionmedia/supertest\">supertest</a> with <a href=\"http://visionmedia.github.io/mocha/\">mocha</a>. Don&#39;t install mocha globally.</p>\n\n<p><span style=\"color:#FF0000;\">you must use mocha BDD style (which is the default), within that, you can optionally use chai.</span></p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Code Format</span></h3>\n\n<p>All code must pass <a href=\"http://www.jslint.com/\">jslint</a>. You may use &quot;nomen: true&quot;.</p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Winner Only</span></h3>\n\n<p>Winner will create pull request against the main github repo in final fix phase and merge the code.</p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color:#FF0000;\">Virutal Machines (VMs)</span></h3>\n\n<p>VM specific information is found here: <span class=\"nobr\"><a href=\"http://www.topcoder.com/wiki/display/docs/VM+Image+2.5\" rel=\"nofollow\">http://www.topcoder.com/wiki/display/docs/VM+Image+2.5</a></span></p>\n\n<p>Upon registration as a submitter or reviewer you will need to request a VM based on the TopCoder systems image. The VM will be active through aggregation review, after which it will be terminated except for the winner&#39;s and the reviewers&#39;. To request your image, please post in contest forum.</p>\n\n<p>Before requesting your VM, you need to ensure that you have an SSH key created and in your member profile. Instructions to do so are here: <span class=\"nobr\"><a href=\"http://www.topcoder.com/wiki/display/projects/Generate+SSH+Key\" rel=\"nofollow\">http://www.topcoder.com/wiki/display/projects/Generate+SSH+Key</a></span>, and instructions to connect afterwards are here: <span class=\"nobr\"><a href=\"http://www.topcoder.com/wiki/display/projects/Connect+Using+SSH+Key\" rel=\"nofollow\">http://www.topcoder.com/wiki/display/projects/Connect+Using+SSH+Key</a></span>.</p>\n\n<p>Please realize that VMs are currently issued manually. We make every attempt to issue the VM as soon as it is requested, however, there may be delays of up to 12 hours depending on time of day when you request. We encourage everyone to request a VM as soon as possible to minimize any such delays.</p>\n\n<h2 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Technology Overview</span></h2>\n\n<ul style=\"font-family: Arial, Helvetica, Verdana, sans-serif; font-size: 12px; line-height: 16px;\">\n\t<li>JavaScript</li>\n\t<li><span class=\"nobr\"><a href=\"http://nodejs.org/\" rel=\"nofollow\">Node.js 0.10.x</a></span></li>\n\t<li><a href=\"https://github.com/evantahler/actionHero\">actionhero.js framework</a></li>\n\t<li><a href=\"https://github.com/visionmedia/supertest\">supertest</a></li>\n\t<li><a href=\"http://visionmedia.github.io/mocha/\">mocha</a></li>\n</ul>\n\n<h2 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Documentation Provided</span></h2>\n\n<p>Please check the deployment guide in codebase for reference.</p>\n",
                    "projectId": 6484
                },
                {
                    "challengeType": "Content Creation",
                    "challengeName": "Crowdsourced Application Security Standards and Review",
                    "challengeId": 30036091,
                    "detailedRequirements": "<h2 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Project Overview</span></h2>\n\n<p>TopCoder and the TopCoder community have worked hard to get the platform to its currently level of maturity, but we&#39;re far from done. It&#39;s time to take the platform to the next level. TopCoder is going to start taking some steps to open up the platform API to the outside and community developers so they could incorporate it in their websites, applications or build their own applications (web, mobile or desktop).</p>\n\n<p>The ultimate goal is to open up and build an &quot;API&quot; that is targeting all different type of audiences - Software and Studio Competitors, SRM/MM competitors, Copilots, Admins and TopCoder partners - each audience will have different interests and usages of the API, so it will be a huge project and we need to make sure that we are in the right direction from the beginning.</p>\n\n<p>Currently, we have run several contests to build the APIs and write tests for testing the APIs.&nbsp; All the tests can be found at https://github.com/cloudspokes/tc-api/tree/master/test</p>\n\n<p>Through these contests, we have found several problems for the tests part as following</p>\n\n<ol>\n\t<li>The tests are not properly named, we&#39;d like to follow the way like &#39;test.[api name].js&#39;, like <span class=\"css-truncate css-truncate-target\"><a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/blob/master/test/register_member.js\" id=\"72636476fe496c69e8cc1d0569ffd550-ab6d2363c6933e23ee66bb7b92f4d07841ea286b\" title=\"register_member.js\">register_member.js</a> should be renamed to <u>test.register_member.js</u>.</span></li>\n\t<li>Some of the tests have to presetup the database manually, Some of the tests automically setup and clear the related database tables wisely.</li>\n\t<li>The tests can be passed if run separately, but failed when running togather.</li>\n</ol>\n\n<p>For this contest, we&#39;d like to improve and standarize the way to write tests, so it will be good for further addon and CI integration.</p>\n\n<h2 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Competition Task Overview</span></h2>\n\n<p><span style=\"color:#FF0000;\"><span style=\"font-size: 12px;\"><img align=\"absmiddle\" alt=\"\" border=\"0\" height=\"16\" src=\"http://apps.topcoder.com/wiki/images/icons/emoticons/warning.gif\" width=\"16\" /> <strong>Please raise questions as quick as you can, I am familiar with related database and code base, I can provide as much support as I can.</strong></span></span></p>\n\n<p><span style=\"color:#FF0000;\"><span style=\"font-size: 12px;\"><img align=\"absmiddle\" alt=\"\" border=\"0\" height=\"16\" src=\"http://apps.topcoder.com/wiki/images/icons/emoticons/warning.gif\" width=\"16\" /></span><strong>The updated code must still deploy and work on heroku - any submission which can&#39;t be deployed on heroku successfully will be failed in screening phase - primary reviewer must check this.</strong></span></p>\n\n<p>The implementation will base on the node.js version of TC platform API - <span class=\"nobr\"><a href=\"https://github.com/cloudspokes/tc-api\" rel=\"nofollow\">https://github.com/cloudspokes/tc-api</a>.</span> <strong>Please follow the existing actionhero pattern for your development.</strong></p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Clean State for Running Tests</span></h3>\n\n<p>Currently, some tests requires presetup the database, some tests automically setup and clear the related database tables.</p>\n\n<p>We&#39;d like to follow the approach to setup and clear the related database tables before and after running the tests.</p>\n\n<p>Currently, <span class=\"css-truncate css-truncate-target\"><a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/blob/master/test/register_member.js\" id=\"72636476fe496c69e8cc1d0569ffd550-ab6d2363c6933e23ee66bb7b92f4d07841ea286b\" title=\"register_member.js\">register_member.js</a> used similar approach to setup the data before running tests. We&#39;d like to extra similar logic as utility methods, which can be used to execute a batch of sqls (for example, inside one file) or single sql against one database (Currently we can not do with multiple databases, due to the limitation of nodejs informix module).</span></p>\n\n<p>With this utility methods we can easily do setup and teardown databases.</p>\n\n<p><u>before, after, before each, after each hooks</u></p>\n\n<p>Utilize <code>before()</code>, <code>after()</code>, <code>beforeEach()</code>, <code>afterEach()</code>&nbsp; to setup the tests more wise. For detail information, please check http://visionmedia.github.io/mocha/</p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Test Directory Restructure and Normalization</span></h3>\n\n<p>We&#39;d like to normalize the directory structure inside <a href=\"https://github.com/cloudspokes/tc-api/blob/master/test\">test</a> directory. Currently, it already gives good starting point, but we&#39;d like revise it as we are making the above changes. Here is the general rules to following</p>\n\n<ol>\n\t<li>All tests should be named like test.[api name].js, so normally, for each api, there should be separated test js files.</li>\n\t<li>All tests from contest winner, should be put directly under test directory.</li>\n\t<li>All reviewers tests should be put under corresponding directory under test directory, like <span class=\"css-truncate css-truncate-target\"><a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/accuracy\" id=\"5d6db9a1dc722586187fc2db530f8388-a107215d06565a781a851de5573da8b935851c3f\" title=\"accuracy\">accuracy</a>, <a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/failure\" id=\"3ee28fe1a60c95b89d29317f122c7021-420d711966add1044306cfaba7036b73d50f95e2\" title=\"failure\">failure</a>, <a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/security\" id=\"e91e6348157868de9dd8b25c81aebfb9-8d796d458ceb76eb46407f9164ed17343d529bf6\" title=\"security\">security</a></span> directory.</li>\n\t<li>All sql files used for tests presetup and teardown should be put under <u>sqls</u> directory, sqls files for accuray, failture, security tests, will be in different directory, directly under the <span class=\"css-truncate css-truncate-target\"><a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/accuracy\" id=\"5d6db9a1dc722586187fc2db530f8388-a107215d06565a781a851de5573da8b935851c3f\" title=\"accuracy\">accuracy</a>, <a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/failure\" id=\"3ee28fe1a60c95b89d29317f122c7021-420d711966add1044306cfaba7036b73d50f95e2\" title=\"failure\">failure</a>, <a class=\"js-directory-link\" href=\"https://github.com/cloudspokes/tc-api/tree/master/test/security\" id=\"e91e6348157868de9dd8b25c81aebfb9-8d796d458ceb76eb46407f9164ed17343d529bf6\" title=\"security\">security</a></span> directory, like accuracy/sqls, failure/sqls etc.</li>\n\t<li>All other test related files will be still put under <u>test_files</u> directory.</li>\n</ol>\n\n<p><span style=\"color:#FF0000;\">If you have better idea and improvement to make the test directory well orginized, please suggest. This can be considered as improvement, reviewers and PMs will consider that.</span></p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Scope </span></h3>\n\n<p>All tests under test directory are in scope. If it tests didn&#39;t pass orignally, you should be responsible to fix that.</p>\n\n<p>The ultimate goal is we can run all tests or single test successfully. like</p>\n\n<p>Run a single test:&nbsp; <u>./node_modules/.bin/mocha ./test/test.tops.js</u></p>\n\n<p>Run all tests: <u>./node_modules/.bin/mocha ./test</u></p>\n\n<p>Following steps&nbsp; to run the tests.</p>\n\n<ol>\n\t<li>setup environment varibales: . deploy/development.sh</li>\n\t<li>start the local server: npm start</li>\n\t<li>run the tests: as above commands.</li>\n</ol>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Tests Creation Guide</span></h3>\n\n<p>Beside the above requirements for current tests normalization and improvement, we&#39;d like you to write a general guide which can be followed to further test creation. It just need to be easy to follow.</p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Testing</span></h3>\n\n<p><span style=\"font-size:12px;\">The API Framework supports tests. </span>Use <a href=\"https://github.com/visionmedia/supertest\">supertest</a> with <a href=\"http://visionmedia.github.io/mocha/\">mocha</a>. Don&#39;t install mocha globally.</p>\n\n<p><span style=\"color:#FF0000;\">you must use mocha BDD style (which is the default), within that, you can optionally use chai.</span></p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Code Format</span></h3>\n\n<p>All code must pass <a href=\"http://www.jslint.com/\">jslint</a>. You may use &quot;nomen: true&quot;.</p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Winner Only</span></h3>\n\n<p>Winner will create pull request against the main github repo in final fix phase and merge the code.</p>\n\n<h3 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color:#FF0000;\">Virutal Machines (VMs)</span></h3>\n\n<p>VM specific information is found here: <span class=\"nobr\"><a href=\"http://www.topcoder.com/wiki/display/docs/VM+Image+2.5\" rel=\"nofollow\">http://www.topcoder.com/wiki/display/docs/VM+Image+2.5</a></span></p>\n\n<p>Upon registration as a submitter or reviewer you will need to request a VM based on the TopCoder systems image. The VM will be active through aggregation review, after which it will be terminated except for the winner&#39;s and the reviewers&#39;. To request your image, please post in contest forum.</p>\n\n<p>Before requesting your VM, you need to ensure that you have an SSH key created and in your member profile. Instructions to do so are here: <span class=\"nobr\"><a href=\"http://www.topcoder.com/wiki/display/projects/Generate+SSH+Key\" rel=\"nofollow\">http://www.topcoder.com/wiki/display/projects/Generate+SSH+Key</a></span>, and instructions to connect afterwards are here: <span class=\"nobr\"><a href=\"http://www.topcoder.com/wiki/display/projects/Connect+Using+SSH+Key\" rel=\"nofollow\">http://www.topcoder.com/wiki/display/projects/Connect+Using+SSH+Key</a></span>.</p>\n\n<p>Please realize that VMs are currently issued manually. We make every attempt to issue the VM as soon as it is requested, however, there may be delays of up to 12 hours depending on time of day when you request. We encourage everyone to request a VM as soon as possible to minimize any such delays.</p>\n\n<h2 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Technology Overview</span></h2>\n\n<ul style=\"font-family: Arial, Helvetica, Verdana, sans-serif; font-size: 12px; line-height: 16px;\">\n\t<li>JavaScript</li>\n\t<li><span class=\"nobr\"><a href=\"http://nodejs.org/\" rel=\"nofollow\">Node.js 0.10.x</a></span></li>\n\t<li><a href=\"https://github.com/evantahler/actionHero\">actionhero.js framework</a></li>\n\t<li><a href=\"https://github.com/visionmedia/supertest\">supertest</a></li>\n\t<li><a href=\"http://visionmedia.github.io/mocha/\">mocha</a></li>\n</ul>\n\n<h2 style=\"font-family: Arial, Helvetica, Verdana, sans-serif; padding: 0px; margin: 0px; font-weight: bold;\"><span style=\"color: rgb(255, 0, 0);\">Documentation Provided</span></h2>\n\n<p>Please check the deployment guide in codebase for reference.</p>\n",
                    "projectId": 6778
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 406 (application/json)

        {
            "name":"Not Acceptable",
            "value":"406",
            "description":"This message will explain why the Search parameters are invalid."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## My Submissions [/challenges/submissions/{challengeId}/mySubmissions]
### My Submissions [GET]

+ Parameters
    + challengeId (required, number, `30005520`) ... The challenge id.

+ Response 200 (application/json)

        {
            "submissions": [
                {
                    "submissionId": 2001,
                    "submissionDate": "2014-06-13T04:43:25.000+0000",
                    "submissionType": "final",
                    "download": "https://software.topcoder.com/review/actions/DownloadContestSubmission.do?method=downloadContestSubmission&uid=2001"
                },
                {
                    "submissionId": 2003,
                    "submissionDate": "2014-06-13T04:43:28.000+0000",
                    "submissionType": "checkpoint",
                    "download": "https://software.topcoder.com/review/actions/DownloadContestSubmission.do?method=downloadContestSubmission&uid=2003"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"challengeId should be number."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"challengeId should be positive."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"challengeId should be Integer."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"challengeId should be less or equal to 2147483647."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"You need to login for this api."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"The challenge is not existed."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

# Group Members API

## Search members by handle [/users/search?handle={handle}&pageIndex={pageIndex}&pageSize={pageSize}&caseSensitive={caseSensitive}]
### Search members by handle [GET]

+ Parameters
    + handle (required, string, `heffan`) ... The handle string, it can contain "%" and "_".
    + pageIndex (optional, number, `1`) ... The page index, default value is 1.
    + pageSize (optional, number, `10`) ... The page size, default value is 10.
    + caseSensitive (required, string, `false`) ... The case sensitive flag.

+ Response 200 (application/json)

    {
        "total": 2,
        "pageIndex": 1,
        "pageSize": 10,
        "users":
        [
            {
                "handle": "Hung",
                "userId": 124764
            },
            {
                "handle": "heffan",
                "userId": 132456
            }
        ]
    }

+ Response 400 (application/json)

    {
        "name":"Bad Request",
        "value":"400",
        "description":"This message will explain why the request is invalid or cannot be served."
        "details:":"caseSensitive should be 'true' or 'false'."
    }

+ Response 400 (application/json)

    {
        "name":"Bad Request",
        "value":"400",
        "description":"This message will explain why the request is invalid or cannot be served."
        "details:":"pageIndex should be positive."
    }

+ Response 400 (application/json)

    {
        "name":"Bad Request",
        "value":"400",
        "description":"This message will explain why the request is invalid or cannot be served."
        "details:":"pageSize should be positive."
    }

+ Response 400 (application/json)

    {
        "name":"Bad Request",
        "value":"400",
        "description":"This message will explain why the request is invalid or cannot be served."
        "details:":"handle should be non-null and non-empty string."
    }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Check Email Availability [/users/validateEmail?email={email}]
### Check Email Availability [GET]

+ Parameters
    + email (required, string, `abc@def.com`) ... The email string.

+ Response 200 (application/json)


        {
            "available":true
        }

+ Response 500 (application/json)


        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)


        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Software Copilot Statistics [/copilots/{handle}/statistics/develop?track={track}]
### Software Copilot Statistics [GET]

+ Parameters
    + handle (required, string, `iRabbit`) ... Member Handle
    + track (optional, string, 'development') ... The track name

+ Response 200 (application/json)

        {
            "handle": "iRabbit",
            "Tracks":
            {
                "Development":
                [
                    "copilotCompletedContests": 300,
                    "copilotRepostedContests": 300,
                    "copilotFailedContests": 300,
                    "copilotFulfillment": "90%"
                ],
                "Assembly":
                [
                    "copilotCompletedContests": 300,
                    "copilotRepostedContests": 300,
                    "copilotFailedContests": 300,
                    "copilotFulfillment": "90%"
                ]
            }
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Docusign Recipient View URL [/terms/docusign/viewURL]
### Docusign Recipient View URL [POST]

- Only when jwt passed can we use this api

+ Parameters
    + templateId (required, UUID, `E12C78DE-67B1-4150-BEC8-C44CE20A2F0B`) ... The template id
    + tabs (optional, String, `Handle||anix`) ... The default values to set for the tabs. Double pipe delimited. Multiple such parameters can be sent.
    + returnUrl (optional, String, `http://localhost:8080/v2/terms/docusign/returnSigning&envelopeId=`) ... The return url.

+ Request

    + Headers

            Authorization : Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZHwxMzI0NTYiLCJleHAiOjEzOTM3MDM1NzEsImF1ZCI6InRvcGNvZGVyIiwiaWF0IjoxMzkzNjQzNTcxfQ.F2iohKp2nwjQeGqrBD1wn42GJUD0r28aGjhDle7KujA

+ Response 200 (application/json)

        {
             "recipientViewURL": "https://demo.docusign.net/Member/StartInSession.aspx?t=3fa766db-c23f-8fc3-0331dca6ca92",
             "envelopeId": "0ea6c212-c4c8-456d-9ec9-38603500cb95"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The request was invalid. An accompanying message will explain why."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Authentication credentials were missing or incorrect."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }


+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Top Track Members [/users/tops/{trackType}?pageIndex={pageIndex}&pageSize={pageSize}]
### Top Track Members [GET]

+ Parameters
    + trackType (required, string, `develop`) ... Track Type, support "design", "develop", "data".
    + pageIndex (optional, number, `1`) ... The paging number, 1-based, -1 if no paging. It can be null. Default 1.
    + pageSize (optional, number, `50`) ... The max number of the results, should be set if pageIndex is set. Default 50.

+ Response 200 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 3,
            "data":
            [
                {
                    "rank": 1,
                    "handle": "Petr",
                    "userId": 123457899,
                    "color": "Red",
                    "rating": 3000,
                    "highestRatingType": "assembly"
                },
                {
                    "rank": 2,
                    "handle": "ACRush",
                    "userId": 123457891,
                    "color": "Red",
                    "rating": 2500,
                    "highestRatingType": "development"
                },
                {
                    "rank": 3,
                    "handle": "lympanda",
                    "userId": 123457892,
                    "color": "Yellow",
                    "rating": 2000,
                    "highestRatingType": "assembly"
                }
            ]
        }


+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

# Group Download API

## Download Documents API [/download/document/{docid}?challengeId={challengeId}]
### Download Documents API [GET]

+ Parameters
    + docid (required, number, `123456`) ... The document id.
    + challengeId (required, number, `12345678`) ... The challenge id.

+ Response 200 (application/octet-stream)

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The request was invalid. An accompanying message will explain why."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Authentication credentials were missing or incorrect."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Download Design Submissions API [/design/download/{submissionId}?submissionType={submissionType}]
### Download Design Submissions API [GET]

+ Parameters
    + submission (required, number, `123456`) ... The submission id.
    + submissionType (required, string, `preview`) ... The submission type should be preview or original
    + submissionImageTypeId (optional) ... The image type id, 25, 26, 28, 29, 30, 31 for tiny, thumb, small, medium and full
    + submissionFileIndex (optional) ... THe file index

+ Response 200 (application/octet-stream)

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The request was invalid. An accompanying message will explain why."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Authentication credentials were missing or incorrect."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Download Develop Submissions API [/develop/download/{submissionId}]
### Download Develop Submissions API [GET]

+ Parameters
    + submission (required, number, `123456`) ... The submission id.
    + username (optional, string, `tc-user`) ... The submission id.
    + password (optional, string, `123456`) ... The submission id.

+ Response 200 (application/octet-stream)

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The request was invalid. An accompanying message will explain why."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Authentication credentials were missing or incorrect."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

# Group Payments API
Payments APIs

## Payment Preference [/payments/preference]
### Payment Preference [GET]

+ Response 200 (application/json)

          {
              "paymentAccrualAmount": 100,
              "paypalAccountEmail": "heffan@topcoder.com",
              "paymentMethod": "PayPal"
          }

+ Response 200 (application/json)
         {
              "paymentAccrualAmount": 43,
              "paymentMethod": "Western Union"
         }

+ Response 401 (application/json)

        {
           "error": {
               "name": "Unauthorized",
               "value": 401,
               "description": "Authentication credentials were missing or incorrect.",
               "details": "No anonymous access to this API."
           }
        }

+ Response 404 (application/json)

        {
          "error": {
              "name": "Not Found",
              "value": 404,
              "description": "The URI requested is invalid or the requested resource does not exist.",
              "details": "No payment preference found for user heffan."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

### Payment Preference [POST]
+ Parameters
     + paymentMethod (required, string, `Western Union`) ... Payment Method: PayPal, Western Union, Payoneer
     + paypalAccountEmail (optional, string, if paymentMethods === "PayPal", else prohibited, must not exceed 100 characters, `heffan@gmail.com`) ... Email address of PayPal account
     + paymentAccrualAmount (optional, integer, must be greater than or equal to 25, `100`) ... Accrual amount to be paid

+ Response 200 (application/json)

             {
              success: true
             }


+ Response 400 (application/json)

            {
                "error": {
                    "name": "Bad Request",
                    "value": 400,
                    "description": "The request was invalid. An accompanying message will explain why.",
                    "details": "'FooBar' is not an active payment method."
            }

+ Response 400 (application/json)

            {
                "error": {
                    "name": "Bad Request",
                    "value": 400,
                    "description": "The request was invalid. An accompanying message will explain why.",
                    "details": "paymentMethod should be string."
                }
            }

+ Response 400 (application/json)

            {
                "error": {
                    "name": "Bad Request",
                    "value": 400,
                    "description": "The request was invalid. An accompanying message will explain why.",
                    "details": "'paymentAccrualAmount' was 1, but must not be lower than 25."
                }
            }

+ Response 400 (application/json)

           {
               "error": {
                   "name": "Bad Request",
                   "value": 400,
                   "description": "The request was invalid. An accompanying message will explain why.",
                   "details": "paymentAccrualAmount should be Integer."
               }
           }

+ Response 400 (application/json)

          {
              "error": {
                  "name": "Bad Request",
                  "value": 400,
                  "description": "The request was invalid. An accompanying message will explain why.",
                  "details": "paymentAccrualAmount should be positive."
              }
          }

+ Response 400 (application/json)

         {
             "error": {
                 "name": "Bad Request",
                 "value": 400,
                 "description": "The request was invalid. An accompanying message will explain why.",
                 "details": "Argument 'paypalAccountEmail' provided, but 'paymentMethod' was 'Payoneer'."
             }
         }

+ Response 400 (application/json)

            {
                "error": {
                    "name": "Bad Request",
                    "value": 400,
                    "description": "The request was invalid. An accompanying message will explain why.",
                    "details": "Mandatory argument 'paypalAccountEmail' is missing."
                }
            }

+ Response 400 (application/json)

            {
                "error": {
                    "name": "Bad Request",
                    "value": 400,
                    "description": "The request was invalid. An accompanying message will explain why.",
                    "details": "paypalAccountEmail should be email address."
                }
            }

+ Response 400 (application/json)

           {
               "error": {
                   "name": "Bad Request",
                   "value": 400,
                   "description": "The request was invalid. An accompanying message will explain why.",
                   "details": "paypalAccountEmail exceeds 100 characters."
               }
           }

+ Response 400 (application/json)

           {
               "error": {
                   "name": "Bad Request",
                   "value": 400,
                   "description": "The request was invalid. An accompanying message will explain why.",
                   "details": "paypalAccountEmail should be string."
               }
           }

+ Response 401 (application/json)

            {
                "error": {
                    "name": "Unauthorized",
                    "value": 401,
                    "description": "Authentication credentials were missing or incorrect.",
                    "details": "No anonymous access to this API."
            }


+ Response 500 (application/json)

            {
                "name":"Internal Server Error",
                "value":"500",
                "description":"Unknown server error. Please contact support."
            }

+ Response 503 (application/json)

            {
                "name":"Service Unavailable",
                "value":"503",
                "description":"Servers are up but overloaded. Try again later."
            }



## Payment List [/payments?type={type}&status={status}&pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}]
### Payment List [GET]

+ Parameters
    + status (optional, string, `Paid`) ... Payment Status: Paid, Owed, Cancelled, Entered into payment system, etc..
    + type (optional, string, `Contest Payment`) ... Payment Type: Contest Payment, Review Payment, Copilot Payment, etc..
    + pageIndex (optional, number, `1`) ... The page index of the returned resources. 1-based. It can be null. The default value will be 1.
    + pageSize (optional, number, `50`) ... The page size of the returned resources. 1-based. It can be null. The default value will be 10.
    + sortColumn (optional, string, `description`) ... The column name to sort, can be null. The default value will be 'createDate'.
    + sortOrder (optional, string, `asc`) ... The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'. The default value will be 'asc'.

+ Request

    + Headers

            Authorization : Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZHwxMzI0NTYiLCJleHAiOjEzOTI4MTc4ODQsImF1ZCI6InRvcGNvZGVyIiwiaWF0IjoxMzkyNzU3ODg0fQ.7X2IKkiyyI1ExSM5GNpdhJ8fGGK5-oAjzccX6YL_BKY


+ Response 200 (application/json)

        {
            "total": 21,
            "pageIndex": 1,
            "pageSize": 2,
            "payments": [
                {
                    "description": "[TCCC-4789] - Cockpit Instant Search Task",
                    "type": "Contest Payment",
                    "createDate": "12/13/2012",
                    "releaseDate": "01/13/2013",
                    "paidDate": "02/30/2013",
                    "status": "Paid",
                    "amount": 250
                },
                {
                    "description": "(Application, v1.0) TC API - Studio Challenge Result API Update - First2Finish review board",
                    "type": "Review Board Payment",
                    "createDate": "12/15/2012",
                    "releaseDate": "01/15/2013",
                    "paidDate": "02/30/2013",
                    "status": "Paid",
                    "amount": 123
                }
            ],
            "summary": {
                "paid": 10000.0,
                "owed": 1234.0,
                "cancelled": 100.0,
                "enteredIntoPaymentSystem": 50.0
            }
        }
+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The request was invalid. An accompanying message will explain why."
            "description":"pageIndex should be number."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The request was invalid. An accompanying message will explain why."
            "description":"pageIndex should be positive."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The request was invalid. An accompanying message will explain why."
            "description":"pageIndex should be less or equal to 2147483647."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The request was invalid. An accompanying message will explain why."
            "description":"pageSize should be number."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The request was invalid. An accompanying message will explain why."
            "description":"pageSize should be positive."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The request was invalid. An accompanying message will explain why."
            "description":"pageSize should be less or equal to 2147483647."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The request was invalid. An accompanying message will explain why."
            "description":"The sort column 'invalid' is invalid, it should be element of description,type,createDate,releaseDate,paidDate,status,amount."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The request was invalid. An accompanying message will explain why."
            "description":"sortOrder should be an element of asc,desc."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The request was invalid. An accompanying message will explain why."
            "description":"The type parameter is incorrect."
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The request was invalid. An accompanying message will explain why."
            "description":"The status parameter is incorrect."
        }

+ Response 401 (application/json)

        {
            "name":"Unauthorized",
            "value":"401",
            "description":"Authentication credentials were missing or incorrect."
            "details:":"Unauthorized Error"
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Docusign Callback [/terms/docusignCallback]
### Docusign Callback [POST]

+ Parameters
    + envelopeStatus (required, String, `Complete`) ... The status of the envelope
    + envelopeId (required, UUID, `9103DC77-D8F1-4D7B-BED1-6116604EE98C`) ... The envelope to process
    + tabs (required, Array, [{tabLabel: 'Handle', tabValue: 'anix'}, {...}]) ... The tab values. Can be empty
    + connectKey (required, String, 'ABCDED-12435-EDFADSEC') The conenct key

+ Response 200 (application/json)
        {
             "message": "some message"
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"The request was invalid. An accompanying message will explain why."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Auth0 Callback API [/auth0/callback]
### Auth0 Callback API [GET]

+ Parameters
    + code (required, string, `drztXEojbzIYF5mg`) ... The access code.
    + state (optional, string, `http%3A%2F%2Ftc.cloud.topcoder.com`) ... The redirect url.

+ Response 200 (application/json)

        {
                "code": "kHmqAt0e99pSfAKx",
                "state": "http://tc.cloud.topcoder.com",
                "handle": "heffan",
                "userId": 132456,
                "password": "4EjPjy6o+/C+dqNPnxIy9A==",
                "result": "login",
                "nextPage": "http://tc.cloud.topcoder.com",
                "socialAccount": {
                  "name": "tc123bk",
                  "email": "",
                  "givenName": "",
                  "familyName": "",
                  "emailVerified": false,
                  "providerId": 4,
                  "enterpriseLogin": false,
                  "socialUserId": 5644427,
                  "jsonWebToken": "eyJ0eXAiOi...",
                  "accessToken": "STjDXB7tfK2sFgQWIgKuuVUVv0ubZB9k3JBnuCKvkpIl5H4fhOSabOScMxAnhaeW"

        }

+ Response 200 (application/json)

        {
                "code": "GE4U7TEzsB4NMe7e",
                "state": "http://tc.cloud.topcoder.com",
                "regUrl": "http://www.topcoder.com/?action=callback#access_token=wu9tZmWRnLJQ8pq0jVjxTEo3PSxnFGOEVyyWjMvudepwxRL1R5yILKSWmuvWX2J6&id_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3RjLTEyMy1iay5hdXRoMC5jb20vIiwic3ViIjoiZ29vZ2xlLW9hdXRoMnwxMDYzNTIyMDEwODcwMTQ1NzgwMTgiLCJhdWQiOiIzRXhqOXZGeGpja1NRN09NRW1VWnYzQWl5a0UwSzVPYSIsImV4cCI6MTM5Njg3ODc1OCwiaWF0IjoxMzk2ODQyNzU4LCJjbGllbnRJRCI6IjNFeGo5dkZ4amNrU1E3T01FbVVadjNBaXlrRTBLNU9hIiwiY3JlYXRlZF9hdCI6IjIwMTQtMDQtMDRUMDg6MTU6NTUuMzY0WiIsImVtYWlsIjoiZmx5dG9qMmVlQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJmYW1pbHlfbmFtZSI6IlplbmciLCJnZW5kZXIiOiJtYWxlIiwiZ2l2ZW5fbmFtZSI6IkVyaWMiLCJpZGVudGl0aWVzIjpbeyJhY2Nlc3NfdG9rZW4iOiJ5YTI5LjEuQUFEdE5fV2VTdF9UMmp2aTdMYV9DTUlGMXBpX1JDS3BkbVRTajBpQU9kM01MZno0M0ItaE5SRHRYZGhOZ0liZV9RIiwicHJvdmlkZXIiOiJnb29nbGUtb2F1dGgyIiwiZXhwaXJlc19pbiI6MzYwMCwidXNlcl9pZCI6IjEwNjM1MjIwMTA4NzAxNDU3ODAxOCIsImNvbm5lY3Rpb24iOiJnb29nbGUtb2F1dGgyIiwiaXNTb2NpYWwiOnRydWV9XSwibG9jYWxlIjoiemgtQ04iLCJuYW1lIjoiRXJpYyBaZW5nIiwibmlja25hbWUiOiJmbHl0b2oyZWUiLCJwaWN0dXJlIjoiaHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tLy1YZFVJcWRNa0NXQS9BQUFBQUFBQUFBSS9BQUFBQUFBQUFBQS80MjUycnNjYnY1TS9waG90by5qcGciLCJ1c2VyX2lkIjoiZ29vZ2xlLW9hdXRoMnwxMDYzNTIyMDEwODcwMTQ1NzgwMTgifQ.0p9nsPLaFtJsnW5W7_Rd7MqH5EEAiALxXwxup4mRxdQ&token_type=bearer&state=http%3A%2F%2Fwww.topcoder.com",
                "nextPage": "http://tc.cloud.topcoder.com",
                "result": "register",
                "socialAccount": {
                  "name": "",
                  "email": "email@gmail.com",
                  "givenName": "name",
                  "familyName": "name",
                  "emailVerified": true,
                  "providerId": 2,
                  "enterpriseLogin": false,
                  "socialUserId": "106352201087014578018",
                  "jsonWebToken": "eyJ0eXAiOi...",
                  "accessToken": "wu9tZmWRnLJQ8pq0jVjxTEo3PSxnFGOEVyyWjMvudepwxRL1R5yILKSWmuvWX2J6"
                }
        }

+ Response 200 (application/json)

        {
                "code": "STSYzhWDjVBqjAIN",
                "state": "http://tc.cloud.topcoder.com",
                "handle": "heffan",
                "userId": 132456,
                "password": "4EjPjy6o+/C+dqNPnxIy9A==",
                "result": "login",
                "nextPage": "http://tc.cloud.topcoder.com",
                "socialAccount": {
                  "name": "heffan",
                  "email": "",
                  "givenName": "",
                  "familyName": "",
                  "emailVerified": false,
                  "providerId": 50,
                  "enterpriseLogin": true,
                  "socialUserId": "132456",
                  "jsonWebToken": "eyJ0eXAiOi...",
                  "accessToken": "C6Ayl5Hy2MeMvTIzK7fvsu5I8xhT943UGn9aJRfTPFvikQbPWowVcZW5krwcuDDc"
                }
        }

+ Response 401 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"The social account should have at least one valid email or one valid username."
        }

+ Response 400 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Fails to get access token from auth0."
        }

+ Response 400 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Fails to get user info from auth0."
        }

# Group SRM Contests
Managing SRM Contests APIs

## List all Contests [/data/srm/contests]

### List all Contests [GET]

+ Response 200 (application/json)

[
    {
        "contestId": 1000,
        "name": "SRM 67 DIV 2",
        "startDate": null,
        "endDate": null,
        "status": "A",
        "groupId": -1,
        "adText": null,
        "adStart": null,
        "adEnd": null,
        "adTask": null,
        "adCommand": null,
        "activateMenu": null,
        "season": null
    },
    {
        "contestId": 1001,
        "name": "Name 1",
        "startDate": "2014-06-02 09:00",
        "endDate": "2014-06-12 09:00",
        "status": "A",
        "groupId": -1,
        "adText": "Ad Text 1",
        "adStart": "2014-06-03 09:00",
        "adEnd": "2014-06-08 09:00",
        "adTask": "Ad Task 1",
        "adCommand": "Ad Command 1",
        "activateMenu": 0,
        "season": {
            "seasonId": 3001,
            "name": "Season 1"
        }
    }
]

+ Response 401 (application/json)

{
 "error": {
                 "name": "Unauthorized",
                 "value": 401,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Authorized access only."
          }
}


+ Response 403 (application/json)

{
 "error": {
                 "name": "Forbidden",
                 "value": 403,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Admin access only."
          }
}

## Create New Contest [/data/srm/contests]

### Create New Contest [POST]

+ Parameters
  + name (required, string, `Name`) ... The contest name.
  + startDate (string, `2014-06-01 09:00`) ... The contest start date.
  + endDate (string, `2014-06-01 09:00`) ...   The contest end date.
  + status (string, has length 1, `A`) ... The contest status.
  + groupId (number, `1`) ... The group id.
  + adText (string, max length 250, `Ad Text`) ... The ad text.
  + adStart (string, `2014-06-01 09:00`) ... The ad start.
  + adEnd (string, `2014-06-01 09:00`) ... The ad end.
  + adTask (string, max length 30 ,`Ad Task`) ... The ad task.
  + adCommand (string, max length 30, `Ad Command`) ... The ad command.
  + activateMenu (number, `0`) ... The activate menu flag.
  + seasonId (number, `123456`) ... The season id.

+ Response 200 (application/json)

    {
        "contestId": 132678
    }

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "name should be defined."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "name should be string."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "name should be non-null and non-empty string."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "Length of name must not exceed 50 characters."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "name contains unescaped quotes."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "startDate is not a valid date."
    }
}


+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "endDate is not a valid date."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "startDate does not precede endDate."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "status should be string."
    }
}


+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "status must be of length 1"
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "status unknown."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "groupId should be number."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "groupId is unknown."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "adText should be string."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "Length of adText must not exceed 250 characters."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "adText contains unescaped quotes."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "adStart is not a valid date."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "adEnd is not a valid date."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "adStart does not precede adEnd."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "adTask should be string."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "Length of adTask must not exceed 30 characters."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "adTask contains unescaped quotes."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "adCommand should be string."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "Length of adCommand must not exceed 30 characters."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "adCommand contains unescaped quotes."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "activateMenu should be number."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "seasonId should be number."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "seasonId is unknown."
    }
}

+ Response 401 (application/json)

{
 "error": {
                 "name": "Unauthorized",
                 "value": 401,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Authorized access only."
          }
}

+ Response 403 (application/json)

{
 "error": {
                 "name": "Forbidden",
                 "value": 403,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Admin access only."
          }
}

## Modify Contest [/data/srm/contests/{id}]

### Modify Contest [PUT]

+ Parameters
  + id (required, number, `123456`) ... The id of the contest to be modified.
  + name (required, string, `Name`) ... The new contest name.
  + contestId (required, number, `123456`) ... The new contest id.
  + startDate (string, `2014-06-01 09:00`) ... The new contest start date.
  + endDate (string, `2014-06-01 09:00`) ...   The new contest end date.
  + status (string, has length 1, `A`) ... The new contest status.
  + groupId (number, `1`) ... The new group id.
  + adText (string, max length 250, `Ad Text`) ... The new ad text.
  + adStart (string, `2014-06-01 09:00`) ... The new ad start.
  + adEnd (string, `2014-06-01 09:00`) ... The new ad end.
  + adTask (string, max length 30 ,`Ad Task`) ... The new ad task.
  + adCommand (string, max length 30, `Ad Command`) ... The new ad command.
  + activateMenu (number, `0`) ... The new activate menu flag.
  + seasonId (number, `123456`) ... The new season id.

+ Response 200 (application/json)

{"success": true}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "id should be number."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "id is unknown."
    }
}

+ Response 400 (application/json)

{
      "error": {
          "name": "Bad Request",
          "value": 400,
          "description": "The request was invalid. An accompanying message will explain why.",
          "details": "contestId should be number."
      }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "name should be string."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "Length of name must not exceed 50 characters."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "name contains unescaped quotes."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "startDate is not a valid date."
    }
}


+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "endDate is not a valid date."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "startDate does not precede endDate."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "status should be string."
    }
}


+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "status must be of length 1"
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "status unknown."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "groupId should be number."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "groupId is unknown."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "adText should be string."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "Length of adText must not exceed 250 characters."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "adText contains unescaped quotes."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "adStart is not a valid date."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "adEnd is not a valid date."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "adStart does not precede adEnd."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "adTask should be string."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "Length of adTask must not exceed 30 characters."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "adTask contains unescaped quotes."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "adCommand should be string."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "Length of adCommand must not exceed 30 characters."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "adCommand contains unescaped quotes."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "activateMenu should be number."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "seasonId should be number."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "seasonId is unknown."
    }
}


+ Response 401 (application/json)

{
 "error": {
                 "name": "Unauthorized",
                 "value": 401,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Authorized access only."
          }
}


+ Response 403 (application/json)

{
 "error": {
                 "name": "Forbidden",
                 "value": 403,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Admin access only."
          }
}

## Set Survey API [/data/srm/rounds/:roundId/survey]

### Set Survey API [POST]

+ Parameters
  + roundId (required, number, `13672`) ... The id of the round to get.

+ Request

    + Headers

            Authorization : Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZHwxMzI0NTYiLCJleHAiOjEzOTI4MTc4ODQsImF1ZCI6InRvcGNvZGVyIiwiaWF0IjoxMzkyNzU3ODg0fQ.7X2IKkiyyI1ExSM5GNpdhJ8fGGK5-oAjzccX6YL_BKY

+ Response 200 (application/json)

{
    "success": true
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be number."
    }
}


+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be Integer."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be positive."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be less or equal to 2147483647."
    }
}

+ Response 401 (application/json)

{
 "error": {
                 "name": "Unauthorized",
                 "value": 401,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Authorized information needed."
          }
}

+ Response 403 (application/json)

{
 "error": {
                 "name": "Forbidden",
                 "value": 403,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Admin access only."
          }
}

+ Response 500 (application/json)

{
 "error": {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }
}

+ Response 503 (application/json)
{
 "error": {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }
}

## Get Round Questions API [/data/srm/rounds/:roundId/questions]

### Get Round Questions API [GET]

+ Parameters
  + roundId (required, number, `13672`) ... The id of the round to get.

+ Request

    + Headers

            Authorization : Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZHwxMzI0NTYiLCJleHAiOjEzOTI4MTc4ODQsImF1ZCI6InRvcGNvZGVyIiwiaWF0IjoxMzkyNzU3ODg0fQ.7X2IKkiyyI1ExSM5GNpdhJ8fGGK5-oAjzccX6YL_BKY

+ Response 200 (application/json)

{
    "questions": [
        {
            "id": 1000032,
            "keyword": "keyword1",
            "status": {
                "id": 1,
                "description": "ACTIVE"
            },
            "style": {
                "id": 1,
                "description": "Single Choice"
            },
            "text": "text2",
            "type": {
                "id": 1,
                "description": "SRM Survey"
            },
            "isRequired": true
        }
    ]
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be number."
    }
}


+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be Integer."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be positive."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be less or equal to 2147483647."
    }
}

+ Response 401 (application/json)

{
 "error": {
                 "name": "Unauthorized",
                 "value": 401,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Authorized information needed."
          }
}

+ Response 403 (application/json)

{
 "error": {
                 "name": "Forbidden",
                 "value": 403,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Admin access only."
          }
}

+ Response 500 (application/json)

{
 "error": {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }
}

+ Response 503 (application/json)
{
 "error": {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }
}

## Add Round Question API [/data/srm/rounds/:roundId/questions]

### Add Round Question API [POST]

+ Parameters
  + roundId (required, number, `13672`) ... The id of the round to set.
  + text (required, text, `text1`) ... The text parameter.
  + styleId (required, number, 1) ... The id of the style to set.
  + typeId (required, number, 1) ... The id of the type to set.
  + statusId (required, number, 1) ... The id of the status to set.
  + keyword (optional, text, `keyword1`) ... The keyword parameter.
  + isRequired (optional, boolean, true) ... The required flag.

+ Request

    + Headers

            Authorization : Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZHwxMzI0NTYiLCJleHAiOjEzOTI4MTc4ODQsImF1ZCI6InRvcGNvZGVyIiwiaWF0IjoxMzkyNzU3ODg0fQ.7X2IKkiyyI1ExSM5GNpdhJ8fGGK5-oAjzccX6YL_BKY

+ Response 200 (application/json)

{
    "success": true
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be number."
    }
}


+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be Integer."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be positive."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be less or equal to 2147483647."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "text should be string.."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "text exceeds 2048 characters."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "keyword should be string."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "keyword exceeds 64 characters."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "The isRequired should be boolean type."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "statusId should be number."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "statusId should be Integer."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "statusId should be greater or equal to 0."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "The statusId does not exist in database."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "typeId should be number."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "typeId should be Integer."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "typeId should be greater or equal to 0."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "The typeId does not exist in database."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "styleId should be number."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "styleId should be Integer."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "styleId should be greater or equal to 0."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "The styleId does not exist in database."
    }
}

+ Response 401 (application/json)

{
 "error": {
                 "name": "Unauthorized",
                 "value": 401,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Authorized information needed."
          }
}

+ Response 403 (application/json)

{
 "error": {
                 "name": "Forbidden",
                 "value": 403,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Admin access only."
          }
}

+ Response 500 (application/json)

{
 "error": {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }
}

+ Response 503 (application/json)
{
 "error": {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }
}

## Modify Round Question API [/data/srm/rounds/:questionId/questions]

### Modify Round Question API [PUT]

+ Parameters
  + questionId (required, number, `1000001`) ... The id of the question to set.
  + text (required, text, `text1`) ... The text parameter.
  + styleId (required, number, 1) ... The id of the style to set.
  + typeId (required, number, 1) ... The id of the type to set.
  + statusId (required, number, 1) ... The id of the status to set.
  + keyword (optional, text, `keyword1`) ... The keyword parameter.

+ Request

    + Headers

            Authorization : Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZHwxMzI0NTYiLCJleHAiOjEzOTI4MTc4ODQsImF1ZCI6InRvcGNvZGVyIiwiaWF0IjoxMzkyNzU3ODg0fQ.7X2IKkiyyI1ExSM5GNpdhJ8fGGK5-oAjzccX6YL_BKY

+ Response 200 (application/json)

{
    "success": true
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "questionId should be number."
    }
}


+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "questionId should be Integer."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "questionId should be positive."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "questionId should be less or equal to 2147483647."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "text should be string.."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "text exceeds 2048 characters."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "keyword should be string."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "keyword exceeds 64 characters."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "statusId should be number."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "statusId should be Integer."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "statusId should be greater or equal to 0."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "The statusId does not exist in database."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "typeId should be number."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "typeId should be Integer."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "typeId should be greater or equal to 0."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "The typeId does not exist in database."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "styleId should be number."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "styleId should be Integer."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "styleId should be greater or equal to 0."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "The styleId does not exist in database."
    }
}

+ Response 401 (application/json)

{
 "error": {
                 "name": "Unauthorized",
                 "value": 401,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Authorized information needed."
          }
}

+ Response 403 (application/json)

{
 "error": {
                 "name": "Forbidden",
                 "value": 403,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Admin access only."
          }
}

+ Response 500 (application/json)

{
 "error": {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }
}

+ Response 503 (application/json)
{
 "error": {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }
}

## Get Round Question Answers API [/data/srm/rounds/:questionId/answers]

### Get Round Question Answers API [GET]

+ Parameters
  + questionId (required, number, `13672`) ... The id of the question to get.

+ Request

    + Headers

            Authorization : Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZHwxMzI0NTYiLCJleHAiOjEzOTI4MTc4ODQsImF1ZCI6InRvcGNvZGVyIiwiaWF0IjoxMzkyNzU3ODg0fQ.7X2IKkiyyI1ExSM5GNpdhJ8fGGK5-oAjzccX6YL_BKY

+ Response 200 (application/json)

{
    "answers": [
        {
            "id": 1000033,
            "text": "text2",
            "sortOrder": 1,
            "correct": true
        }
    ]
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "questionId should be number."
    }
}


+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "questionId should be Integer."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "questionId should be positive."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "questionId should be less or equal to 2147483647."
    }
}

+ Response 401 (application/json)

{
 "error": {
                 "name": "Unauthorized",
                 "value": 401,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Authorized information needed."
          }
}

+ Response 403 (application/json)

{
 "error": {
                 "name": "Forbidden",
                 "value": 403,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Admin access only."
          }
}

+ Response 500 (application/json)

{
 "error": {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }
}

+ Response 503 (application/json)
{
 "error": {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }
}

## Add Round Question Answer API [/data/srm/questions/:questionId/answers]

### Add Round Question Answer API [POST]

+ Parameters
  + questionId (required, number, `1000001`) ... The id of the question to set.
  + text (required, text, `text1`) ... The text parameter.
  + sortOrder (optional, number, 1) ... The sort order to set.
  + correct (optional, boolean, true) ... The correct parameter.

+ Request

    + Headers

            Authorization : Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZHwxMzI0NTYiLCJleHAiOjEzOTI4MTc4ODQsImF1ZCI6InRvcGNvZGVyIiwiaWF0IjoxMzkyNzU3ODg0fQ.7X2IKkiyyI1ExSM5GNpdhJ8fGGK5-oAjzccX6YL_BKY

+ Response 200 (application/json)

{
    "success": true
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "questionId should be number."
    }
}


+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "questionId should be Integer."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "questionId should be positive."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "questionId should be less or equal to 2147483647."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "text should be string.."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "text exceeds 2048 characters."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "sortOrder should be number."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "sortOrder should be Integer."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "sortOrder should be positive."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "The correct should be boolean type."
    }
}

+ Response 401 (application/json)

{
 "error": {
                 "name": "Unauthorized",
                 "value": 401,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Authorized information needed."
          }
}

+ Response 403 (application/json)

{
 "error": {
                 "name": "Forbidden",
                 "value": 403,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Admin access only."
          }
}

+ Response 500 (application/json)

{
 "error": {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }
}

+ Response 503 (application/json)
{
 "error": {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }
}



## List SRM Problems API [/data/srm/problems]

### List Problems API [GET]

+ Request

    + Headers

            Authorization : Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZHwxMzI0NTYiLCJleHAiOjEzOTI4MTc4ODQsImF1ZCI6InRvcGNvZGVyIiwiaWF0IjoxMzkyNzU3ODg0fQ.7X2IKkiyyI1ExSM5GNpdhJ8fGGK5-oAjzccX6YL_BKY

+ Response 200 (application/json)

{
    "problems": [
        {
            "id": 10194,
            "name": "BlackAndWhiteGame",
            "type": {
                "id": 3,
                "description": "Long"
            },
            "status": {
                "id": 90,
                "description": "Used"
            }
        },
        {
            "id": 10195,
            "name": "TestProblem",
            "type": {
                "id": 1,
                "description": "Single"
            },
            "status": {
                "id": 90,
                "description": "Used"
            }
        }
    ]
}

+ Response 401 (application/json)

{
 "error": {
                 "name": "Unauthorized",
                 "value": 401,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Authorized information needed."
          }
}

+ Response 403 (application/json)

{
 "error": {
                 "name": "Forbidden",
                 "value": 403,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Admin access only."
          }
}

+ Response 500 (application/json)

{
 "error": {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }
}


+ Response 503 (application/json)
{
 "error": {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }
}

## List Round Problems API [/data/srm/rounds/:roundId/problems]

### List Round Problems API [GET]

+ Parameters
  + roundId (required, number, `13672`) ... The id of the round to get.

+ Request

    + Headers

            Authorization : Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZHwxMzI0NTYiLCJleHAiOjEzOTI4MTc4ODQsImF1ZCI6InRvcGNvZGVyIiwiaWF0IjoxMzkyNzU3ODg0fQ.7X2IKkiyyI1ExSM5GNpdhJ8fGGK5-oAjzccX6YL_BKY

+ Response 200 (application/json)

{
    "assignedProblems": [
        {
            "division": {
                "id": 1,
                "desc": "Division-I"
            },
            "problemData": {
                "id": 10194,
                "name": "BlackAndWhiteGame",
                "type": {
                    "id": 3,
                    "description": "Long"
                },
                "status": {
                    "id": 90,
                    "description": "Used"
                }
            }
        },
        {
            "division": {
                "id": 2,
                "desc": "Division-II"
            },
            "problemData": {
                "id": 10195,
                "name": "TestProblem",
                "type": {
                    "id": 1,
                    "description": "Single"
                },
                "status": {
                    "id": 90,
                    "description": "Used"
                }
            }
        }
    ]
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be number."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be Integer."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be positive."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be less or equal to 2147483647."
    }
}

+ Response 401 (application/json)

{
 "error": {
                 "name": "Unauthorized",
                 "value": 401,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Authorized information needed."
          }
}

+ Response 403 (application/json)

{
 "error": {
                 "name": "Forbidden",
                 "value": 403,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Admin access only."
          }
}

+ Response 500 (application/json)

{
 "error": {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }
}


+ Response 503 (application/json)
{
 "error": {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }
}

## List Round Problem Components API [/data/srm/rounds/:roundId/components]

### List Round Problem Components API [GET]

+ Parameters
  + roundId (required, number, `13672`) ... The id of the round to get.
  + problemId (optional, number, `10194`) ... The id of the problem to get.
  + divisionId (optional, number, `2020`) ... The id of the division to get.

+ Request

    + Headers

            Authorization : Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZHwxMzI0NTYiLCJleHAiOjEzOTI4MTc4ODQsImF1ZCI6InRvcGNvZGVyIiwiaWF0IjoxMzkyNzU3ODg0fQ.7X2IKkiyyI1ExSM5GNpdhJ8fGGK5-oAjzccX6YL_BKY

+ Response 200 (application/json)

{
    "components": [
        {
            "difficulty": {
                "id": 1,
                "desc": "Level One"
            },
            "division": {
                "id": 1,
                "desc": "Division-I"
            },
            "openOrder": 0,
            "pointValue": 500,
            "componentData": {
                "id": 2020,
                "problemId": 10194,
                "className": "BlackAndWhiteGame",
                "methodName": "displayTestCase",
                "resultType": "String",
                "paramTypes": [
                    "String"
                ],
                "type": {
                    "id": 2,
                    "description": "Supporting Component"
                }
            },
            "submitOrder": 0
        },
        {
            "difficulty": {
                "id": 1,
                "desc": "Level One"
            },
            "division": {
                "id": 2,
                "desc": "Division-II"
            },
            "openOrder": 0,
            "pointValue": 250,
            "componentData": {
                "id": 2021,
                "problemId": 10195,
                "className": "TestProblem",
                "methodName": "sum",
                "resultType": "int",
                "paramTypes": [
                    "int",
                    "int"
                ],
                "type": {
                    "id": 1,
                    "description": "Main Component"
                }
            },
            "submitOrder": 0
        }
    ]
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be number."
    }
}


+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be Integer."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be positive."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be less or equal to 2147483647."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "problemId should be number."
    }
}


+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "problemId should be Integer."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "problemId should be positive."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "problemId should be less or equal to 2147483647."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "divisionId should be number."
    }
}


+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "divisionId should be Integer."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "divisionId should be positive."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "divisionId should be less or equal to 2147483647."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "Both problemId and divisionId should be provided if you provided one of them."
    }
}

+ Response 401 (application/json)

{
 "error": {
                 "name": "Unauthorized",
                 "value": 401,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Authorized information needed."
          }
}

+ Response 403 (application/json)

{
 "error": {
                 "name": "Forbidden",
                 "value": 403,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Admin access only."
          }
}

+ Response 500 (application/json)

{
 "error": {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }
}


+ Response 503 (application/json)
{
 "error": {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }
}

# Group SRM Round Configuration APIs
Managing SRM Round Configuration APIs

## Set Round Room Assignment [/data/srm/rounds/{roundId}/roomAssignment]

### Set Round Room Assignment [POST]

+ Parameters
  + roundId (required, number, `123456`) ... The round id for the room to be assigned
  + isByDivision (number, `1`) ... The isByDivision flag
  + isByRegion (number, `1`) ... The isByRegion flag
  + isFinal (number, `1`) ... The isFinal flag
  + type (number, `1`) ... The algorithm seeding
  + seasonId (number, `10`) ... The number of coders per room
  + p (number, `1.1`) ... The p value


+ Response 200 (application/json)

{
    success: true
}


+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'roundId should be number.' } }


+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'roundId should be positive.' } }


+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'roundId does not have a round room assignment.' } }


+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'roundId should be less or equal to 999999999.' } }

+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'codersPerRoom should be number.' } }

+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'codersPerRoom should be positive.' } }

+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'codersPerRoom should be less or equal to 9999.' } }

+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'type should be number.' } }

+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'type should be positive.' } }

+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'type should be an element of 1,2,3,4,5,6,7,8,9,10.' } }

+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'isByDivision should be an element of 0,1.' } }

+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'isByRegion should be an element of 0,1.' } }

+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'isFinal should be an element of 0,1.' } }


+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'p must be a floating point number.' } }


+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'Precision of p must not exceed (10,2).' } }


+ Response 401 (application/json)

{ error:
   { name: 'Unauthorized',
     value: 401,
     description: 'Authentication credentials were missing or incorrect.',
     details: 'Authorized access only.' } }


+ Response 403 (application/json)

{ error:
   { name: 'Forbidden',
     value: 403,
     description: 'The request is understood, but it has been refused or access is not allowed.',
     details: 'Admin access only.' } }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Set Round Language [/data/srm/rounds/{roundId}/languages]

### Set Round Room Language [POST]

+ Parameters
  + roundId (required, number, `123456`) ... The round id
  + languages (required, Array, [1, 3]) ... The array of language ids to be assigened to the room


+ Response 200 (application/json)

{
        success: true
}

+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'roundId should be number.' } }

+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'roundId should be positive.' } }

+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'roundId unknown.' } }

+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'roundId should be less or equal to 999999999.' } }

+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'languages must be an array.' } }

+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'language should be an element of 1,3,4,5,6,7.' } }

+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'Array size exceeds number of known languages.' } }



+ Response 401 (application/json)

{ error:
   { name: 'Unauthorized',
     value: 401,
     description: 'Authentication credentials were missing or incorrect.',
     details: 'Authorized access only.' } }


+ Response 403 (application/json)

{ error:
   { name: 'Forbidden',
     value: 403,
     description: 'The request is understood, but it has been refused or access is not allowed.',
     details: 'Admin access only.' } }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }


## Set Round Events [/data/srm/rounds/{roundId}/events]

### Set Round Events [POST]

+ Parameters
  + roundId (required, number, `123456`) ... The round id
  + eventId (required, number, `123456`) ... The event id
  + eventName (string, max length 50, `Event `) ... The name of the event
  + registrationUrl (string, max length 255, `http://www.topcoder.com`) ... The registration url for the event


+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'roundId should be number.' } }


+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'roundId should be positive.' } }


+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'roundId unknown.' } }


+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'roundId should be less or equal to 999999999.' } }


+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'eventId should be number.' } }


+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'eventId should be positive.' } }


+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'eventId should be less or equal to 999999999.' } }


+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'eventName should be string.' } }

+ Response 400 (application/json)

{
  "error": {
    "name": "Bad Request",
    "value": 400,
    "description": "The request was invalid. An accompanying message will explain why.",
    "details": "eventName contains unescaped quotes."
  } }


+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'Length of eventName should be less or equal to 50.' } }


+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'registrationUrl should be string.' } }

+ Response 400 (application/json)

{
  "error": {
    "name": "Bad Request",
    "value": 400,
    "description": "The request was invalid. An accompanying message will explain why.",
    "details": "registrationUrl contains unescaped quotes."
  } }

+ Response 400 (application/json)

{ error:
   { name: 'Bad Request',
     value: 400,
     description: 'The request was invalid. An accompanying message will explain why.',
     details: 'Length of registrationUrl should be less or equal to 255.' } }

+ Response 401 (application/json)

{ error:
   { name: 'Unauthorized',
     value: 401,
     description: 'Authentication credentials were missing or incorrect.',
     details: 'Authorized access only.' } }


+ Response 403 (application/json)

{ error:
   { name: 'Forbidden',
     value: 403,
     description: 'The request is understood, but it has been refused or access is not allowed.',
     details: 'Admin access only.' } }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }


## Set Round Segments [/data/srm/rounds/{roundId}/segments]

### Set Round Segments [POST]

+ Parameters
  + roundId (required, number, `123456`) ... The round id.
  + registrationStart (required, string, `2014-06-01 09:00:00`) ... The registration start time.
  + registrationLength (required, number, `10`) ... The registration duration minutes.
  + codingStart (required, string, `2014-06-01 13:00:00`) ... The coding start time.
  + codingLength (required, number, `100`) ... The coding duration minutes.
  + intermissionLength (required, number, `10`) ... The intermission duration minutes.
  + challengeLength (required, number, `10`) ... The challenge duration minutes.
  + registrationStatus (required, string, `F`) ... The registration status for the round, max length 1.
  + codingStatus (required, string, `F`) ... The coding status for the round, max length 1.
  + intermissionStatus (required, string, `F`) ... The intermission status for the round, max length 1.
  + challengeStatus (required, string, `F`) ... The challenge status for the round, max length 1.
  + systemTestStatus (required, string, `F`) ... The system test status for the round, max length 1.

+ Request

    + Headers

            Authorization : Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZHwxMzI0NTYiLCJleHAiOjEzOTI4MTc4ODQsImF1ZCI6InRvcGNvZGVyIiwiaWF0IjoxMzkyNzU3ODg0fQ.7X2IKkiyyI1ExSM5GNpdhJ8fGGK5-oAjzccX6YL_BKY

+ Response 200 (application/json)

{
    "success": true
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be number."
    }
}


+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be Integer."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be positive."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be less or equal to 2147483647."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "registrationStart should be a valid date.."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "registrationLength should be number.."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "registrationLength should be Integer.."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "registrationLength should be positive.."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "codingStart should be a valid date.."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "codingLength should be number.."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "codingLength should be Integer.."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "codingLength should be positive.."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "intermissionLength should be number.."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "intermissionLength should be Integer.."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "intermissionLength should be positive.."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "challengeLength should be number.."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "challengeLength should be Integer.."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "challengeLength should be positive.."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "registrationStatus exceeds 1 characters."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "codingStatus exceeds 1 characters."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "intermissionStatus exceeds 1 characters."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "challengeStatus exceeds 1 characters."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "systemTestStatus exceeds 1 characters."
    }
}

+ Response 401 (application/json)

{
 "error": {
                 "name": "Unauthorized",
                 "value": 401,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Authorized information needed."
          }
}

+ Response 403 (application/json)

{
 "error": {
                 "name": "Forbidden",
                 "value": 403,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Admin access only."
          }
}

+ Response 500 (application/json)

{
 "error": {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }
}

+ Response 503 (application/json)
{
 "error": {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }
}


## Load Round Access [/data/srm/roundAccess]

### Load Round Access [GET]

+ Response 200 (application/json)

{ accessibleRounds:
   [ { roundId: 13672,
       name: 'Test SRM Test SRM Round',
       startDate: '2014-07-13 20:22' },
     { roundId: 13673,
       name: 'Test MM Test MM Round',
       startDate: '2014-07-13 20:22' },
     { roundId: 4010,
       name: 'Contest 2 Round 10',
       startDate: '2014-07-12 09:05' },
     { roundId: 4009,
       name: 'Contest 1 Round 9',
       startDate: '2014-07-11 09:05' },
     { roundId: 4007,
       name: 'Contest 1 Round 7',
       startDate: '2014-07-09 09:05' },
     { roundId: 4006,
       name: 'Contest 2 Round 6',
       startDate: '2014-07-08 09:05' },
     { roundId: 4002,
       name: 'Contest 2 Round 2',
       startDate: '2014-07-04 09:05' },
     { roundId: 4001,
       name: 'Contest 1 Round 1',
       startDate: '2014-07-03 09:05' } ] }


+ Response 401 (application/json)

{ error:
   { name: 'Unauthorized',
     value: 401,
     description: 'Authentication credentials were missing or incorrect.',
     details: 'Authorized access only.' } }


+ Response 403 (application/json)

{ error:
   { name: 'Forbidden',
     value: 403,
     description: 'The request is understood, but it has been refused or access is not allowed.',
     details: 'Admin access only.' } }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }


# Group Deprecated APIs

## Search Software Challenges [/develop/challenges?listType={listType}&pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}&communityId={communityId}&submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}]
### Search Software Challenges [GET]

+ Parameters
    + listType (optional, string, `Open`) ... The type of challenges to search. It can only be 'ACTIVE', 'OPEN', 'PAST' or 'UPCOMING'. If it's null, 'Open' will be used.
    + pageIndex (optional, number, `1`) ... The paging number, 1-based, -1 if no paging. It can be null.
    + pageSize (optional, number, `50`) ... The max number of the results, should be set if pageIndex is set.
    + sortColumn (optional, string, `challengeName`) ... The column name to sort, can be null.
    + sortOrder (optional, string, `asc`) ... The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'.
    + communityId (optional, number, `1`) ... The community id.
    + submissionEndFrom (optional, string, `2014-03-01`) ... submission end date from value.
    + submissionEndTo (optional, string, `2014-03-15`) ... submission end date to value.

+ Response 200 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 3,
            "data": [
                {
                    "challengeType": "Web Design",
                    "challengeName": "Cornell - Responsive Storyboard Economics Department Site Redesign Contest",
                    "challengeId": 30036096,
                    "projectId": 6789,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "platforms": [ "Heroku", "NodeJS"],
                    "technologies": [ "JavaScript", "Node.js" ],
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "appealsEndDate": "10.31.2013 10:10 EDT",
                    "finalFixEndDate": "10.31.2013 10:10 EDT",
                    "currentPhaseEndDate": "10.31.2013 10:10 EDT",
                    "currentPhaseRemainingTime": 500,
                    "currentStatus": "Active",
                    "currentPhaseName": "Submission",
                    "challengeCommunity": "Develop",
                    "prize": [1250, 500],
                    "reliabilityBonus": 0,
                    "digitalRunPoints": 500,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "topCheckPointPrize": 200,
                    "postingDate": "10.31.2013 10:10 EDT"
                },
                {
                    "challengeType": "UI Prototype Competition",
                    "challengeName": "Corningstone App UI Prototype 2",
                    "challengeId": 30036099,
                    "projectId": 6484,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "platforms": [ "Heroku", "NodeJS"],
                    "technologies": [ "JavaScript", "Node.js" ],
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "appealsEndDate": "10.31.2013 10:10 EDT",
                    "finalFixEndDate": "10.31.2013 10:10 EDT",
                    "currentPhaseEndDate": "10.31.2013 10:10 EDT",
                    "currentPhaseRemainingTime": 500,
                    "currentStatus": "Active",
                    "currentPhaseName": "Submission",
                    "challengeCommunity": "Develop",
                    "prize": [1250, 500],
                    "reliabilityBonus": 660,
                    "digitalRunPoints": 990,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "topCheckPointPrize": 200,
                    "postingDate": "10.31.2013 10:10 EDT"
                },
                {
                    "challengeType": "Content Creation",
                    "challengeName": "Crowdsourced Application Security Standards and Review",
                    "challengeId": 30036091,
                    "projectId": 6778,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "platforms": [ "Heroku", "NodeJS"],
                    "technologies": [ "JavaScript", "Node.js" ],
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "appealsEndDate": "10.31.2013 10:10 EDT",
                    "finalFixEndDate": "10.31.2013 10:10 EDT",
                    "currentPhaseEndDate": "10.31.2013 10:10 EDT",
                    "currentPhaseRemainingTime": 500,
                    "currentStatus": "Active",
                    "currentPhaseName": "Submission",
                    "challengeCommunity": "Develop",
                    "prize": [1250, 500],
                    "reliabilityBonus": 360,
                    "digitalRunPoints": 0,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "topCheckPointPrize": 200,
                    "postingDate": "10.31.2013 10:10 EDT"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 406 (application/json)

        {
            "name":"Not Acceptable",
            "value":"406",
            "description":"This message will explain why the Search parameters are invalid."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }


## Search Studio Challenges [/design/challenges?listType={listType}&pageSize={pageSize}&pageIndex={pageIndex}&sortColumn={sortColumn}&sortOrder={sortOrder}&communityId={communityId}&submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}]
### Search Studio Challenges [GET]

+ Parameters
    + listType (optional, string, `Open`) ... The type of challenges to search. It can only be 'ACTIVE', 'OPEN', 'PAST' or 'UPCOMING'. If it's null, 'Open' will be used.
    + filter (optional, string, `challengeType`) ... Key of the filter key-value pair
    + value (optional, string, `Development`) ... Value of the filter key-value pair
    + pageIndex (optional, number, `1`) ... The paging number, 1-based, -1 if no paging. It can be null.
    + pageSize (optional, number, `50`) ... The max number of the results, should be set if pageIndex is set.
    + sortColumn (optional, string, `challengeName`) ... The column name to sort, can be null.
    + sortOrder (optional, string, `asc`) ... The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'.
    + communityId (optional, number, `1`) ... The community id.
    + submissionEndFrom (optional, string, `2014-03-01`) ... submission end date from value.
    + submissionEndTo (optional, string, `2014-03-15`) ... submission end date to value.

+ Response 200 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 2,
            "data":
            [
                {
                    "challengeType": "Web Design",
                    "challengeName": "Cornell - Responsive Storyboard Economics Department Site Redesign Contest",
                    "challengeId": 30036096,
                    "projectId": 6789,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "appealsEndDate": "10.31.2013 10:10 EDT",
                    "finalFixEndDate": "10.31.2013 10:10 EDT",
                    "currentPhaseEndDate": "10.31.2013 10:10 EDT",
                    "currentPhaseRemainingTime": 500,
                    "currentStatus": "Active",
                    "currentPhaseName": "Submission",
                    "challengeCommunity": "Develop",
                    "prize": [1250, 500],
                    "reliabilityBonus": 0,
                    "digitalRunPoints": 500,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "topCheckPointPrize": 200,
                    "postingDate": "10.31.2013 10:10 EDT"
                },
                {
                    "challengeType": "Web Design",
                    "challengeName": "Cornell - Responsive Storyboard Economics Department Site Redesign Contest",
                    "challengeId": 30036096,
                    "projectId": 6789,
                    "forumId": 1001,
                    "eventId": 1,
                    "eventName": "TCO14",
                    "numSubmissions": 16,
                    "numRegistrants": 27,
                    "screeningScorecardId": 1001,
                    "reviewScorecardId": 1001,
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "checkpointSubmissionEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "appealsEndDate": "10.31.2013 10:10 EDT",
                    "finalFixEndDate": "10.31.2013 10:10 EDT",
                    "currentPhaseEndDate": "10.31.2013 10:10 EDT",
                    "currentPhaseRemainingTime": 500,
                    "currentStatus": "Active",
                    "currentPhaseName": "Submission",
                    "challengeCommunity": "Develop",
                    "prize": [1250, 500],
                    "reliabilityBonus": 0,
                    "digitalRunPoints": 500,
                    "cmcTaskId": "ab",
                    "numberOfCheckpointsPrizes": 2,
                    "topCheckPointPrize": 200,
                    "postingDate": "10.31.2013 10:10 EDT"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "name":"Bad Request",
            "value":"400",
            "description":"This message will explain why the request is invalid or cannot be served."
        }

+ Response 404 (application/json)

        {
            "name":"Not Found",
            "value":"404",
            "description":"This message will explain why the URI requested is invalid or the resource does not exist."
        }

+ Response 406 (application/json)

        {
            "name":"Not Acceptable",
            "value":"406",
            "description":"This message will explain why the Search parameters are invalid."
        }

+ Response 500 (application/json)

        {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }

+ Response 503 (application/json)

        {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }

## Add Round Components API [/data/srm/rounds/:roundId/components]

### Set Round Components API [POST]

+ Parameters
  + roundId (required, number, `1000001`) ... The id of the round to set.
  + components (required, JSON object, a JSON object) ... The components parameter.

+ Request

    + Headers

            Authorization : Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZHwxMzI0NTYiLCJleHAiOjEzOTI4MTc4ODQsImF1ZCI6InRvcGNvZGVyIiwiaWF0IjoxMzkyNzU3ODg0fQ.7X2IKkiyyI1ExSM5GNpdhJ8fGGK5-oAjzccX6YL_BKY

+ Response 200 (application/json)

{
    "success": true
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be number."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be Integer."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be positive."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be less or equal to 2147483647."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "components should be Array."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "componentId should not be null or undefined"
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "points should not be null or undefined"
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "divisionId should not be null or undefined"
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "difficultyId should not be null or undefined"
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "openOrder should not be null or undefined"
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "submitOrder should not be null or undefined"
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "componentId should be positive."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "points should be greater or equal to 0"
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "divisionId should be number."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "difficultyId should be positive."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "openOrder should be non-negative."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "submitOrder should be non-negative."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "The componentId does not exist in database."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "The divisionId does not exist in database."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "The difficultyId does not exist in database."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "The componentId and divisionId group should be unique."
    }
}

+ Response 401 (application/json)

{
 "error": {
                 "name": "Unauthorized",
                 "value": 401,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Authorized information needed."
          }
}

+ Response 403 (application/json)

{
 "error": {
                 "name": "Forbidden",
                 "value": 403,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Admin access only."
          }
}

+ Response 500 (application/json)

{
 "error": {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }
}

+ Response 503 (application/json)
{
 "error": {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }
}

## Set Round Terms API [/data/srm/rounds/:roundId/terms]

### Set Round Terms API [POST]

+ Parameters
  + roundId (required, number, `1000001`) ... The id of the round to set.
  + terms (required, String, 'test terms') ... The terms parameter.

+ Request

    + Headers

            Authorization : Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZHwxMzI0NTYiLCJleHAiOjEzOTI4MTc4ODQsImF1ZCI6InRvcGNvZGVyIiwiaWF0IjoxMzkyNzU3ODg0fQ.7X2IKkiyyI1ExSM5GNpdhJ8fGGK5-oAjzccX6YL_BKY

+ Response 200 (application/json)

{
    "success": true
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be number."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be Integer."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be positive."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "roundId should be less or equal to 2147483647."
    }
}

+ Response 400 (application/json)

{
    "error": {
        "name": "Bad Request",
        "value": 400,
        "description": "The request was invalid. An accompanying message will explain why.",
        "details": "The round terms should not be empty."
    }
}

+ Response 401 (application/json)

{
 "error": {
                 "name": "Unauthorized",
                 "value": 401,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Authorized information needed."
          }
}

+ Response 403 (application/json)

{
 "error": {
                 "name": "Forbidden",
                 "value": 403,
                 "description": "The request is understood, but it has been refused or access is not allowed.",
                 "details": "Admin access only."
          }
}

+ Response 500 (application/json)

{
 "error": {
            "name":"Internal Server Error",
            "value":"500",
            "description":"Unknown server error. Please contact support."
        }
}

+ Response 503 (application/json)
{
 "error": {
            "name":"Service Unavailable",
            "value":"503",
            "description":"Servers are up but overloaded. Try again later."
        }
}
